{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPoolMetrics = void 0;\n/** @internal */\nvar ConnectionPoolMetrics = /*#__PURE__*/function () {\n  function ConnectionPoolMetrics() {\n    _classCallCheck(this, ConnectionPoolMetrics);\n    this.txnConnections = 0;\n    this.cursorConnections = 0;\n    this.otherConnections = 0;\n  }\n  /**\n   * Mark a connection as pinned for a specific operation.\n   */\n  _createClass(ConnectionPoolMetrics, [{\n    key: \"markPinned\",\n    value: function markPinned(pinType) {\n      if (pinType === ConnectionPoolMetrics.TXN) {\n        this.txnConnections += 1;\n      } else if (pinType === ConnectionPoolMetrics.CURSOR) {\n        this.cursorConnections += 1;\n      } else {\n        this.otherConnections += 1;\n      }\n    }\n    /**\n     * Unmark a connection as pinned for an operation.\n     */\n  }, {\n    key: \"markUnpinned\",\n    value: function markUnpinned(pinType) {\n      if (pinType === ConnectionPoolMetrics.TXN) {\n        this.txnConnections -= 1;\n      } else if (pinType === ConnectionPoolMetrics.CURSOR) {\n        this.cursorConnections -= 1;\n      } else {\n        this.otherConnections -= 1;\n      }\n    }\n    /**\n     * Return information about the cmap metrics as a string.\n     */\n  }, {\n    key: \"info\",\n    value: function info(maxPoolSize) {\n      return 'Timed out while checking out a connection from connection pool: ' + \"maxPoolSize: \".concat(maxPoolSize, \", \") + \"connections in use by cursors: \".concat(this.cursorConnections, \", \") + \"connections in use by transactions: \".concat(this.txnConnections, \", \") + \"connections in use by other operations: \".concat(this.otherConnections);\n    }\n    /**\n     * Reset the metrics to the initial values.\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.txnConnections = 0;\n      this.cursorConnections = 0;\n      this.otherConnections = 0;\n    }\n  }]);\n  return ConnectionPoolMetrics;\n}();\nConnectionPoolMetrics.TXN = 'txn';\nConnectionPoolMetrics.CURSOR = 'cursor';\nConnectionPoolMetrics.OTHER = 'other';\nexports.ConnectionPoolMetrics = ConnectionPoolMetrics;","map":{"version":3,"names":["ConnectionPoolMetrics","_classCallCheck","txnConnections","cursorConnections","otherConnections","_createClass","key","value","markPinned","pinType","TXN","CURSOR","markUnpinned","info","maxPoolSize","concat","reset","OTHER","exports"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cmap\\metrics.ts"],"sourcesContent":["/** @internal */\nexport class ConnectionPoolMetrics {\n  static readonly TXN = 'txn' as const;\n  static readonly CURSOR = 'cursor' as const;\n  static readonly OTHER = 'other' as const;\n\n  txnConnections = 0;\n  cursorConnections = 0;\n  otherConnections = 0;\n\n  /**\n   * Mark a connection as pinned for a specific operation.\n   */\n  markPinned(pinType: string): void {\n    if (pinType === ConnectionPoolMetrics.TXN) {\n      this.txnConnections += 1;\n    } else if (pinType === ConnectionPoolMetrics.CURSOR) {\n      this.cursorConnections += 1;\n    } else {\n      this.otherConnections += 1;\n    }\n  }\n\n  /**\n   * Unmark a connection as pinned for an operation.\n   */\n  markUnpinned(pinType: string): void {\n    if (pinType === ConnectionPoolMetrics.TXN) {\n      this.txnConnections -= 1;\n    } else if (pinType === ConnectionPoolMetrics.CURSOR) {\n      this.cursorConnections -= 1;\n    } else {\n      this.otherConnections -= 1;\n    }\n  }\n\n  /**\n   * Return information about the cmap metrics as a string.\n   */\n  info(maxPoolSize: number): string {\n    return (\n      'Timed out while checking out a connection from connection pool: ' +\n      `maxPoolSize: ${maxPoolSize}, ` +\n      `connections in use by cursors: ${this.cursorConnections}, ` +\n      `connections in use by transactions: ${this.txnConnections}, ` +\n      `connections in use by other operations: ${this.otherConnections}`\n    );\n  }\n\n  /**\n   * Reset the metrics to the initial values.\n   */\n  reset(): void {\n    this.txnConnections = 0;\n    this.cursorConnections = 0;\n    this.otherConnections = 0;\n  }\n}\n"],"mappings":";;;;;;;;AAAA;AAAA,IACaA,qBAAqB;EAAlC,SAAAA,sBAAA;IAAAC,eAAA,OAAAD,qBAAA;IAKE,KAAAE,cAAc,GAAG,CAAC;IAClB,KAAAC,iBAAiB,GAAG,CAAC;IACrB,KAAAC,gBAAgB,GAAG,CAAC;EAiDtB;EA/CE;;;EAAAC,YAAA,CAAAL,qBAAA;IAAAM,GAAA;IAAAC,KAAA,EAGA,SAAAC,WAAWC,OAAe;MACxB,IAAIA,OAAO,KAAKT,qBAAqB,CAACU,GAAG,EAAE;QACzC,IAAI,CAACR,cAAc,IAAI,CAAC;OACzB,MAAM,IAAIO,OAAO,KAAKT,qBAAqB,CAACW,MAAM,EAAE;QACnD,IAAI,CAACR,iBAAiB,IAAI,CAAC;OAC5B,MAAM;QACL,IAAI,CAACC,gBAAgB,IAAI,CAAC;;IAE9B;IAEA;;;EAAA;IAAAE,GAAA;IAAAC,KAAA,EAGA,SAAAK,aAAaH,OAAe;MAC1B,IAAIA,OAAO,KAAKT,qBAAqB,CAACU,GAAG,EAAE;QACzC,IAAI,CAACR,cAAc,IAAI,CAAC;OACzB,MAAM,IAAIO,OAAO,KAAKT,qBAAqB,CAACW,MAAM,EAAE;QACnD,IAAI,CAACR,iBAAiB,IAAI,CAAC;OAC5B,MAAM;QACL,IAAI,CAACC,gBAAgB,IAAI,CAAC;;IAE9B;IAEA;;;EAAA;IAAAE,GAAA;IAAAC,KAAA,EAGA,SAAAM,KAAKC,WAAmB;MACtB,OACE,kEAAkE,mBAAAC,MAAA,CAClDD,WAAW,OAAI,qCAAAC,MAAA,CACG,IAAI,CAACZ,iBAAiB,OAAI,0CAAAY,MAAA,CACrB,IAAI,CAACb,cAAc,OAAI,8CAAAa,MAAA,CACnB,IAAI,CAACX,gBAAgB,CAAE;IAEtE;IAEA;;;EAAA;IAAAE,GAAA;IAAAC,KAAA,EAGA,SAAAS,MAAA,EAAK;MACH,IAAI,CAACd,cAAc,GAAG,CAAC;MACvB,IAAI,CAACC,iBAAiB,GAAG,CAAC;MAC1B,IAAI,CAACC,gBAAgB,GAAG,CAAC;IAC3B;EAAC;EAAA,OAAAJ,qBAAA;AAAA;AAtDeA,qBAAA,CAAAU,GAAG,GAAG,KAAc;AACpBV,qBAAA,CAAAW,MAAM,GAAG,QAAiB;AAC1BX,qBAAA,CAAAiB,KAAK,GAAG,OAAgB;AAH7BC,OAAA,CAAAlB,qBAAA,GAAAA,qBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}