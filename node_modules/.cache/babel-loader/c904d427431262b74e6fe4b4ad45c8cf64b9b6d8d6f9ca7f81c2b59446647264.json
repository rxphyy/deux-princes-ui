{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = require(\"timers\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst connect_1 = require(\"./connect\");\nconst connection_1 = require(\"./connection\");\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\nconst errors_1 = require(\"./errors\");\nconst metrics_1 = require(\"./metrics\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n/** @internal */\nexports.PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n  constructor(server, options) {\n    super();\n    this.options = Object.freeze({\n      ...options,\n      connectionType: connection_1.Connection,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxConnecting: options.maxConnecting ?? 2,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n    }\n    this[kPoolState] = exports.PoolState.paused;\n    this[kServer] = server;\n    this[kConnections] = new utils_1.List();\n    this[kPending] = 0;\n    this[kCheckedOut] = new Set();\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new utils_1.List();\n    this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n    this.mongoLogger = this[kServer].topology.client.mongoLogger;\n    this.component = 'connection';\n    process.nextTick(() => {\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n    });\n  }\n  /** The address of the endpoint the pool is connected to */\n  get address() {\n    return this.options.hostAddress.toString();\n  }\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n  get closed() {\n    return this[kPoolState] === exports.PoolState.closed;\n  }\n  /** An integer representing the SDAM generation of the pool */\n  get generation() {\n    return this[kGeneration];\n  }\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n  get totalConnectionCount() {\n    return this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount;\n  }\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount() {\n    return this[kConnections].length;\n  }\n  get pendingConnectionCount() {\n    return this[kPending];\n  }\n  get currentCheckedOutCount() {\n    return this[kCheckedOut].size;\n  }\n  get waitQueueSize() {\n    return this[kWaitQueue].length;\n  }\n  get loadBalanced() {\n    return this.options.loadBalanced;\n  }\n  get serviceGenerations() {\n    return this[kServiceGenerations];\n  }\n  get serverError() {\n    return this[kServer].description.error;\n  }\n  /**\n   * This is exposed ONLY for use in mongosh, to enable\n   * killing all connections if a user quits the shell with\n   * operations in progress.\n   *\n   * This property may be removed as a part of NODE-3263.\n   */\n  get checkedOutConnections() {\n    return this[kCheckedOut];\n  }\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  waitQueueErrorMetrics() {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n  /**\n   * Set the pool state to \"ready\"\n   */\n  ready() {\n    if (this[kPoolState] !== exports.PoolState.paused) {\n      return;\n    }\n    this[kPoolState] = exports.PoolState.ready;\n    this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n    (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n    this.ensureMinPoolSize();\n  }\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  checkOut(callback) {\n    this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n    const waitQueueMember = {\n      callback\n    };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n        waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : 'Timed out while checking out a connection from connection pool', this.address));\n      }, waitQueueTimeoutMS);\n    }\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection) {\n    if (!this[kCheckedOut].has(connection)) {\n      return;\n    }\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n    this[kCheckedOut].delete(connection);\n    this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(options = {}) {\n    if (this.closed) {\n      return;\n    }\n    // handle load balanced case\n    if (this.loadBalanced) {\n      const {\n        serviceId\n      } = options;\n      if (!serviceId) {\n        throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');\n      }\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n        serviceId\n      }));\n      return;\n    }\n    // handle non load-balanced case\n    const interruptInUseConnections = options.interruptInUseConnections ?? false;\n    const oldGeneration = this[kGeneration];\n    this[kGeneration] += 1;\n    const alreadyPaused = this[kPoolState] === exports.PoolState.paused;\n    this[kPoolState] = exports.PoolState.paused;\n    this.clearMinPoolSizeTimer();\n    if (!alreadyPaused) {\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n        interruptInUseConnections\n      }));\n    }\n    if (interruptInUseConnections) {\n      process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n    }\n    this.processWaitQueue();\n  }\n  /**\n   * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n   *\n   * Only connections where `connection.generation <= minGeneration` are killed.\n   */\n  interruptInUseConnections(minGeneration) {\n    for (const connection of this[kCheckedOut]) {\n      if (connection.generation <= minGeneration) {\n        this.checkIn(connection);\n        connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n      }\n    }\n  }\n  close(_options, _cb) {\n    let options = _options;\n    const callback = _cb ?? _options;\n    if (typeof options === 'function') {\n      options = {};\n    }\n    options = Object.assign({\n      force: false\n    }, options);\n    if (this.closed) {\n      return callback();\n    }\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n    this[kPoolState] = exports.PoolState.closed;\n    this.clearMinPoolSizeTimer();\n    this.processWaitQueue();\n    (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb) => {\n      this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n      conn.destroy({\n        force: !!options.force\n      }, cb);\n    }, err => {\n      this[kConnections].clear();\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n      callback(err);\n    });\n  }\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n  withConnection(conn, fn, callback) {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (fnErr) {\n          return this.withReauthentication(fnErr, conn, fn, callback);\n        }\n        callback(undefined, result);\n      });\n      return;\n    }\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err, conn, (fnErr, result) => {\n        if (fnErr) {\n          if (conn) {\n            this.withReauthentication(fnErr, conn, fn, callback);\n          } else {\n            callback(fnErr);\n          }\n        } else {\n          callback(undefined, result);\n        }\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n  withReauthentication(fnErr, conn, fn, callback) {\n    if (fnErr instanceof error_1.MongoError && fnErr.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n      this.reauthenticate(conn, fn, (error, res) => {\n        if (error) {\n          return callback(error);\n        }\n        callback(undefined, res);\n      });\n    } else {\n      callback(fnErr);\n    }\n  }\n  /**\n   * Reauthenticate on the same connection and then retry the operation.\n   */\n  reauthenticate(connection, fn, callback) {\n    const authContext = connection.authContext;\n    if (!authContext) {\n      return callback(new error_1.MongoRuntimeError('No auth context found on connection.'));\n    }\n    const credentials = authContext.credentials;\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('Connection is missing credentials when asked to reauthenticate'));\n    }\n    const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello || undefined);\n    const provider = connect_1.AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n    if (!provider) {\n      return callback(new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`));\n    }\n    provider.reauth(authContext).then(() => {\n      fn(undefined, connection, (fnErr, fnResult) => {\n        if (fnErr) {\n          return callback(fnErr);\n        }\n        callback(undefined, fnResult);\n      });\n    }, error => callback(error));\n  }\n  /** Clear the min pool size timer */\n  clearMinPoolSizeTimer() {\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      (0, timers_1.clearTimeout)(minPoolSizeTimer);\n    }\n  }\n  destroyConnection(connection, reason) {\n    this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n    // destroy the connection\n    process.nextTick(() => connection.destroy({\n      force: false\n    }));\n  }\n  connectionIsStale(connection) {\n    const serviceId = connection.serviceId;\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n    return connection.generation !== this[kGeneration];\n  }\n  connectionIsIdle(connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n  /**\n   * Destroys a connection if the connection is perished.\n   *\n   * @returns `true` if the connection was destroyed, `false` otherwise.\n   */\n  destroyConnectionIfPerished(connection) {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n  createConnection(callback) {\n    const connectOptions = {\n      ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken]\n    };\n    this[kPending]++;\n    // This is our version of a \"virtual\" no-I/O connection as the spec requires\n    this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, {\n      id: connectOptions.id\n    }));\n    (0, connect_1.connect)(connectOptions, (err, connection) => {\n      if (err || !connection) {\n        this[kPending]--;\n        this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, {\n          id: connectOptions.id,\n          serviceId: undefined\n        }, 'error',\n        // TODO(NODE-5192): Remove this cast\n        err));\n        if (err instanceof error_1.MongoNetworkError || err instanceof error_1.MongoServerError) {\n          err.connectionGeneration = connectOptions.generation;\n        }\n        callback(err ?? new error_1.MongoRuntimeError('Connection creation failed without error'));\n        return;\n      }\n      // The pool might have closed since we started trying to create a connection\n      if (this[kPoolState] !== exports.PoolState.ready) {\n        this[kPending]--;\n        connection.destroy({\n          force: true\n        });\n        callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n        return;\n      }\n      // forward all events from the connection to the pool\n      for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n        connection.on(event, e => this.emit(event, e));\n      }\n      if (this.loadBalanced) {\n        connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n        connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n        const serviceId = connection.serviceId;\n        if (serviceId) {\n          let generation;\n          const sid = serviceId.toHexString();\n          if (generation = this.serviceGenerations.get(sid)) {\n            connection.generation = generation;\n          } else {\n            this.serviceGenerations.set(sid, 0);\n            connection.generation = 0;\n          }\n        }\n      }\n      connection.markAvailable();\n      this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n      this[kPending]--;\n      callback(undefined, connection);\n      return;\n    });\n  }\n  ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n    if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {\n      return;\n    }\n    this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n    if (this.totalConnectionCount < minPoolSize && this.pendingConnectionCount < this.options.maxConnecting) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        if (err) {\n          this[kServer].handleError(err);\n        }\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n        if (this[kPoolState] === exports.PoolState.ready) {\n          (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n          this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n      });\n    } else {\n      (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n      this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n    }\n  }\n  processWaitQueue() {\n    if (this[kProcessingWaitQueue]) {\n      return;\n    }\n    this[kProcessingWaitQueue] = true;\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].first();\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n      if (this[kPoolState] !== exports.PoolState.ready) {\n        const reason = this.closed ? 'poolClosed' : 'connectionError';\n        const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, error));\n        if (waitQueueMember.timer) {\n          (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(error);\n        continue;\n      }\n      if (!this.availableConnectionCount) {\n        break;\n      }\n      const connection = this[kConnections].shift();\n      if (!connection) {\n        break;\n      }\n      if (!this.destroyConnectionIfPerished(connection)) {\n        this[kCheckedOut].add(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n        if (waitQueueMember.timer) {\n          (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(undefined, connection);\n      }\n    }\n    const {\n      maxPoolSize,\n      maxConnecting\n    } = this.options;\n    while (this.waitQueueSize > 0 && this.pendingConnectionCount < maxConnecting && (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n      const waitQueueMember = this[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n      this.createConnection((err, connection) => {\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n            // TODO(NODE-5192): Remove this cast\n            new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'connectionError', err));\n          } else if (connection) {\n            this[kCheckedOut].add(connection);\n            this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n          }\n          if (waitQueueMember.timer) {\n            (0, timers_1.clearTimeout)(waitQueueMember.timer);\n          }\n          waitQueueMember.callback(err, connection);\n        }\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n    this[kProcessingWaitQueue] = false;\n  }\n}\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */\nConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\nexports.ConnectionPool = ConnectionPool;","map":{"version":3,"names":["timers_1","require","constants_1","error_1","mongo_types_1","utils_1","connect_1","connection_1","connection_pool_events_1","errors_1","metrics_1","kServer","Symbol","kConnections","kPending","kCheckedOut","kMinPoolSizeTimer","kGeneration","kServiceGenerations","kConnectionCounter","kCancellationToken","kWaitQueue","kCancelled","kMetrics","kProcessingWaitQueue","kPoolState","exports","PoolState","Object","freeze","paused","ready","closed","ConnectionPool","TypedEventEmitter","constructor","server","options","connectionType","Connection","maxPoolSize","minPoolSize","maxConnecting","maxIdleTimeMS","waitQueueTimeoutMS","minPoolSizeCheckFrequencyMS","autoEncrypter","metadata","MongoInvalidArgumentError","List","Set","undefined","Map","makeCounter","CancellationToken","setMaxListeners","Infinity","ConnectionPoolMetrics","mongoLogger","topology","client","component","process","nextTick","emitAndLog","CONNECTION_POOL_CREATED","ConnectionPoolCreatedEvent","address","hostAddress","toString","generation","totalConnectionCount","availableConnectionCount","pendingConnectionCount","currentCheckedOutCount","length","size","waitQueueSize","loadBalanced","serviceGenerations","serverError","description","error","checkedOutConnections","waitQueueErrorMetrics","info","CONNECTION_POOL_READY","ConnectionPoolReadyEvent","clearTimeout","ensureMinPoolSize","checkOut","callback","CONNECTION_CHECK_OUT_STARTED","ConnectionCheckOutStartedEvent","waitQueueMember","timer","setTimeout","CONNECTION_CHECK_OUT_FAILED","ConnectionCheckOutFailedEvent","WaitQueueTimeoutError","push","processWaitQueue","checkIn","connection","has","poolClosed","stale","connectionIsStale","willDestroy","markAvailable","unshift","delete","CONNECTION_CHECKED_IN","ConnectionCheckedInEvent","reason","destroyConnection","clear","serviceId","MongoRuntimeError","sid","toHexString","get","set","CONNECTION_POOL_CLEARED","ConnectionPoolClearedEvent","interruptInUseConnections","oldGeneration","alreadyPaused","clearMinPoolSizeTimer","minGeneration","onError","PoolClearedOnNetworkError","close","_options","_cb","assign","force","emit","return","eachAsync","toArray","conn","cb","CONNECTION_CLOSED","ConnectionClosedEvent","destroy","err","CONNECTION_POOL_CLOSED","ConnectionPoolClosedEvent","withConnection","fn","fnErr","result","withReauthentication","MongoError","code","MONGODB_ERROR_CODES","Reauthenticate","reauthenticate","res","authContext","credentials","MongoMissingCredentialsError","resolvedCredentials","resolveAuthMechanism","hello","provider","AUTH_PROVIDERS","mechanism","reauth","then","fnResult","minPoolSizeTimer","connectionIsIdle","idleTime","destroyConnectionIfPerished","isStale","isIdle","createConnection","connectOptions","id","next","value","cancellationToken","CONNECTION_CREATED","ConnectionCreatedEvent","connect","MongoNetworkError","MongoServerError","connectionGeneration","PoolClosedError","PoolClearedError","event","APM_EVENTS","CLUSTER_TIME_RECEIVED","on","e","PINNED","pinType","markPinned","UNPINNED","markUnpinned","CONNECTION_READY","ConnectionReadyEvent","prune","handleError","first","shift","add","CONNECTION_CHECKED_OUT","ConnectionCheckedOutEvent"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cmap\\connection_pool.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport type { ObjectId } from '../bson';\nimport {\n  APM_EVENTS,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_POOL_READY,\n  CONNECTION_READY\n} from '../constants';\nimport {\n  type AnyError,\n  MONGODB_ERROR_CODES,\n  MongoError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError,\n  MongoNetworkError,\n  MongoRuntimeError,\n  MongoServerError\n} from '../error';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport { type Callback, eachAsync, List, makeCounter } from '../utils';\nimport { AUTH_PROVIDERS, connect } from './connect';\nimport { Connection, type ConnectionEvents, type ConnectionOptions } from './connection';\nimport {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolReadyEvent,\n  ConnectionReadyEvent\n} from './connection_pool_events';\nimport {\n  PoolClearedError,\n  PoolClearedOnNetworkError,\n  PoolClosedError,\n  WaitQueueTimeoutError\n} from './errors';\nimport { ConnectionPoolMetrics } from './metrics';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n\n/** @public */\nexport interface ConnectionPoolOptions extends Omit<ConnectionOptions, 'id' | 'generation'> {\n  /** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections. */\n  maxPoolSize: number;\n  /** The minimum number of connections that MUST exist at any moment in a single connection pool. */\n  minPoolSize: number;\n  /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */\n  maxConnecting: number;\n  /** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. */\n  maxIdleTimeMS: number;\n  /** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit. */\n  waitQueueTimeoutMS: number;\n  /** If we are in load balancer mode. */\n  loadBalanced: boolean;\n  /** @internal */\n  minPoolSizeCheckFrequencyMS?: number;\n}\n\n/** @internal */\nexport interface WaitQueueMember {\n  callback: Callback<Connection>;\n  timer?: NodeJS.Timeout;\n  [kCancelled]?: boolean;\n}\n\n/** @internal */\nexport const PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n} as const);\n\n/** @public */\nexport interface CloseOptions {\n  force?: boolean;\n}\n\n/** @public */\nexport type ConnectionPoolEvents = {\n  connectionPoolCreated(event: ConnectionPoolCreatedEvent): void;\n  connectionPoolReady(event: ConnectionPoolReadyEvent): void;\n  connectionPoolClosed(event: ConnectionPoolClosedEvent): void;\n  connectionPoolCleared(event: ConnectionPoolClearedEvent): void;\n  connectionCreated(event: ConnectionCreatedEvent): void;\n  connectionReady(event: ConnectionReadyEvent): void;\n  connectionClosed(event: ConnectionClosedEvent): void;\n  connectionCheckOutStarted(event: ConnectionCheckOutStartedEvent): void;\n  connectionCheckOutFailed(event: ConnectionCheckOutFailedEvent): void;\n  connectionCheckedOut(event: ConnectionCheckedOutEvent): void;\n  connectionCheckedIn(event: ConnectionCheckedInEvent): void;\n} & Omit<ConnectionEvents, 'close' | 'message'>;\n\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nexport class ConnectionPool extends TypedEventEmitter<ConnectionPoolEvents> {\n  options: Readonly<ConnectionPoolOptions>;\n  [kPoolState]: (typeof PoolState)[keyof typeof PoolState];\n  [kServer]: Server;\n  [kConnections]: List<Connection>;\n  [kPending]: number;\n  [kCheckedOut]: Set<Connection>;\n  [kMinPoolSizeTimer]?: NodeJS.Timeout;\n  /**\n   * An integer representing the SDAM generation of the pool\n   */\n  [kGeneration]: number;\n  /**\n   * A map of generations to service ids\n   */\n  [kServiceGenerations]: Map<string, number>;\n  [kConnectionCounter]: Generator<number>;\n  [kCancellationToken]: CancellationToken;\n  [kWaitQueue]: List<WaitQueueMember>;\n  [kMetrics]: ConnectionPoolMetrics;\n  [kProcessingWaitQueue]: boolean;\n\n  /**\n   * Emitted when the connection pool is created.\n   * @event\n   */\n  static readonly CONNECTION_POOL_CREATED = CONNECTION_POOL_CREATED;\n  /**\n   * Emitted once when the connection pool is closed\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLOSED = CONNECTION_POOL_CLOSED;\n  /**\n   * Emitted each time the connection pool is cleared and it's generation incremented\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLEARED = CONNECTION_POOL_CLEARED;\n  /**\n   * Emitted each time the connection pool is marked ready\n   * @event\n   */\n  static readonly CONNECTION_POOL_READY = CONNECTION_POOL_READY;\n  /**\n   * Emitted when a connection is created.\n   * @event\n   */\n  static readonly CONNECTION_CREATED = CONNECTION_CREATED;\n  /**\n   * Emitted when a connection becomes established, and is ready to use\n   * @event\n   */\n  static readonly CONNECTION_READY = CONNECTION_READY;\n  /**\n   * Emitted when a connection is closed\n   * @event\n   */\n  static readonly CONNECTION_CLOSED = CONNECTION_CLOSED;\n  /**\n   * Emitted when an attempt to check out a connection begins\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_STARTED = CONNECTION_CHECK_OUT_STARTED;\n  /**\n   * Emitted when an attempt to check out a connection fails\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_FAILED = CONNECTION_CHECK_OUT_FAILED;\n  /**\n   * Emitted each time a connection is successfully checked out of the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_OUT = CONNECTION_CHECKED_OUT;\n  /**\n   * Emitted each time a connection is successfully checked into the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_IN = CONNECTION_CHECKED_IN;\n\n  constructor(server: Server, options: ConnectionPoolOptions) {\n    super();\n\n    this.options = Object.freeze({\n      ...options,\n      connectionType: Connection,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxConnecting: options.maxConnecting ?? 2,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new MongoInvalidArgumentError(\n        'Connection pool minimum size must not be greater than maximum pool size'\n      );\n    }\n\n    this[kPoolState] = PoolState.paused;\n    this[kServer] = server;\n    this[kConnections] = new List();\n    this[kPending] = 0;\n    this[kCheckedOut] = new Set();\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = makeCounter(1);\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new List();\n    this[kMetrics] = new ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n\n    this.mongoLogger = this[kServer].topology.client.mongoLogger;\n    this.component = 'connection';\n\n    process.nextTick(() => {\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new ConnectionPoolCreatedEvent(this));\n    });\n  }\n\n  /** The address of the endpoint the pool is connected to */\n  get address(): string {\n    return this.options.hostAddress.toString();\n  }\n\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n  get closed(): boolean {\n    return this[kPoolState] === PoolState.closed;\n  }\n\n  /** An integer representing the SDAM generation of the pool */\n  get generation(): number {\n    return this[kGeneration];\n  }\n\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n  get totalConnectionCount(): number {\n    return (\n      this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount\n    );\n  }\n\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount(): number {\n    return this[kConnections].length;\n  }\n\n  get pendingConnectionCount(): number {\n    return this[kPending];\n  }\n\n  get currentCheckedOutCount(): number {\n    return this[kCheckedOut].size;\n  }\n\n  get waitQueueSize(): number {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced(): boolean {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations(): Map<string, number> {\n    return this[kServiceGenerations];\n  }\n\n  get serverError() {\n    return this[kServer].description.error;\n  }\n\n  /**\n   * This is exposed ONLY for use in mongosh, to enable\n   * killing all connections if a user quits the shell with\n   * operations in progress.\n   *\n   * This property may be removed as a part of NODE-3263.\n   */\n  get checkedOutConnections() {\n    return this[kCheckedOut];\n  }\n\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  private waitQueueErrorMetrics(): string {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n\n  /**\n   * Set the pool state to \"ready\"\n   */\n  ready(): void {\n    if (this[kPoolState] !== PoolState.paused) {\n      return;\n    }\n    this[kPoolState] = PoolState.ready;\n    this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new ConnectionPoolReadyEvent(this));\n    clearTimeout(this[kMinPoolSizeTimer]);\n    this.ensureMinPoolSize();\n  }\n\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  checkOut(callback: Callback<Connection>): void {\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CHECK_OUT_STARTED,\n      new ConnectionCheckOutStartedEvent(this)\n    );\n\n    const waitQueueMember: WaitQueueMember = { callback };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, 'timeout')\n        );\n        waitQueueMember.callback(\n          new WaitQueueTimeoutError(\n            this.loadBalanced\n              ? this.waitQueueErrorMetrics()\n              : 'Timed out while checking out a connection from connection pool',\n            this.address\n          )\n        );\n      }, waitQueueTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n  }\n\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection: Connection): void {\n    if (!this[kCheckedOut].has(connection)) {\n      return;\n    }\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut].delete(connection);\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CHECKED_IN,\n      new ConnectionCheckedInEvent(this, connection)\n    );\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n\n    process.nextTick(() => this.processWaitQueue());\n  }\n\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(options: { serviceId?: ObjectId; interruptInUseConnections?: boolean } = {}): void {\n    if (this.closed) {\n      return;\n    }\n\n    // handle load balanced case\n    if (this.loadBalanced) {\n      const { serviceId } = options;\n      if (!serviceId) {\n        throw new MongoRuntimeError(\n          'ConnectionPool.clear() called in load balanced mode with no serviceId.'\n        );\n      }\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        throw new MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n      this.emitAndLog(\n        ConnectionPool.CONNECTION_POOL_CLEARED,\n        new ConnectionPoolClearedEvent(this, { serviceId })\n      );\n      return;\n    }\n    // handle non load-balanced case\n    const interruptInUseConnections = options.interruptInUseConnections ?? false;\n    const oldGeneration = this[kGeneration];\n    this[kGeneration] += 1;\n    const alreadyPaused = this[kPoolState] === PoolState.paused;\n    this[kPoolState] = PoolState.paused;\n\n    this.clearMinPoolSizeTimer();\n    if (!alreadyPaused) {\n      this.emitAndLog(\n        ConnectionPool.CONNECTION_POOL_CLEARED,\n        new ConnectionPoolClearedEvent(this, {\n          interruptInUseConnections\n        })\n      );\n    }\n\n    if (interruptInUseConnections) {\n      process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n    }\n\n    this.processWaitQueue();\n  }\n\n  /**\n   * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n   *\n   * Only connections where `connection.generation <= minGeneration` are killed.\n   */\n  private interruptInUseConnections(minGeneration: number) {\n    for (const connection of this[kCheckedOut]) {\n      if (connection.generation <= minGeneration) {\n        this.checkIn(connection);\n        connection.onError(new PoolClearedOnNetworkError(this));\n      }\n    }\n  }\n\n  /** Close the pool */\n  close(callback: Callback<void>): void;\n  close(options: CloseOptions, callback: Callback<void>): void;\n  close(_options?: CloseOptions | Callback<void>, _cb?: Callback<void>): void {\n    let options = _options as CloseOptions;\n    const callback = (_cb ?? _options) as Callback<void>;\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    options = Object.assign({ force: false }, options);\n    if (this.closed) {\n      return callback();\n    }\n\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n\n    this[kPoolState] = PoolState.closed;\n    this.clearMinPoolSizeTimer();\n    this.processWaitQueue();\n\n    eachAsync<Connection>(\n      this[kConnections].toArray(),\n      (conn, cb) => {\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CLOSED,\n          new ConnectionClosedEvent(this, conn, 'poolClosed')\n        );\n        conn.destroy({ force: !!options.force }, cb);\n      },\n      err => {\n        this[kConnections].clear();\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new ConnectionPoolClosedEvent(this));\n        callback(err);\n      }\n    );\n  }\n\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n  withConnection(\n    conn: Connection | undefined,\n    fn: WithConnectionCallback,\n    callback: Callback<Connection>\n  ): void {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (fnErr) {\n          return this.withReauthentication(fnErr, conn, fn, callback);\n        }\n        callback(undefined, result);\n      });\n      return;\n    }\n\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err as MongoError, conn, (fnErr, result) => {\n        if (fnErr) {\n          if (conn) {\n            this.withReauthentication(fnErr, conn, fn, callback);\n          } else {\n            callback(fnErr);\n          }\n        } else {\n          callback(undefined, result);\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n\n  private withReauthentication(\n    fnErr: AnyError,\n    conn: Connection,\n    fn: WithConnectionCallback,\n    callback: Callback<Connection>\n  ) {\n    if (fnErr instanceof MongoError && fnErr.code === MONGODB_ERROR_CODES.Reauthenticate) {\n      this.reauthenticate(conn, fn, (error, res) => {\n        if (error) {\n          return callback(error);\n        }\n        callback(undefined, res);\n      });\n    } else {\n      callback(fnErr);\n    }\n  }\n\n  /**\n   * Reauthenticate on the same connection and then retry the operation.\n   */\n  private reauthenticate(\n    connection: Connection,\n    fn: WithConnectionCallback,\n    callback: Callback\n  ): void {\n    const authContext = connection.authContext;\n    if (!authContext) {\n      return callback(new MongoRuntimeError('No auth context found on connection.'));\n    }\n    const credentials = authContext.credentials;\n    if (!credentials) {\n      return callback(\n        new MongoMissingCredentialsError(\n          'Connection is missing credentials when asked to reauthenticate'\n        )\n      );\n    }\n    const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello || undefined);\n    const provider = AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n    if (!provider) {\n      return callback(\n        new MongoMissingCredentialsError(\n          `Reauthenticate failed due to no auth provider for ${credentials.mechanism}`\n        )\n      );\n    }\n    provider.reauth(authContext).then(\n      () => {\n        fn(undefined, connection, (fnErr, fnResult) => {\n          if (fnErr) {\n            return callback(fnErr);\n          }\n          callback(undefined, fnResult);\n        });\n      },\n      error => callback(error)\n    );\n  }\n\n  /** Clear the min pool size timer */\n  private clearMinPoolSizeTimer(): void {\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      clearTimeout(minPoolSizeTimer);\n    }\n  }\n\n  private destroyConnection(\n    connection: Connection,\n    reason: 'error' | 'idle' | 'stale' | 'poolClosed'\n  ) {\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CLOSED,\n      new ConnectionClosedEvent(this, connection, reason)\n    );\n    // destroy the connection\n    process.nextTick(() => connection.destroy({ force: false }));\n  }\n\n  private connectionIsStale(connection: Connection) {\n    const serviceId = connection.serviceId;\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n\n    return connection.generation !== this[kGeneration];\n  }\n\n  private connectionIsIdle(connection: Connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n\n  /**\n   * Destroys a connection if the connection is perished.\n   *\n   * @returns `true` if the connection was destroyed, `false` otherwise.\n   */\n  private destroyConnectionIfPerished(connection: Connection): boolean {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n\n  private createConnection(callback: Callback<Connection>) {\n    const connectOptions: ConnectionOptions = {\n      ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken]\n    };\n\n    this[kPending]++;\n    // This is our version of a \"virtual\" no-I/O connection as the spec requires\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CREATED,\n      new ConnectionCreatedEvent(this, { id: connectOptions.id })\n    );\n\n    connect(connectOptions, (err, connection) => {\n      if (err || !connection) {\n        this[kPending]--;\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CLOSED,\n          new ConnectionClosedEvent(\n            this,\n            { id: connectOptions.id, serviceId: undefined },\n            'error',\n            // TODO(NODE-5192): Remove this cast\n            err as MongoError\n          )\n        );\n        if (err instanceof MongoNetworkError || err instanceof MongoServerError) {\n          err.connectionGeneration = connectOptions.generation;\n        }\n        callback(err ?? new MongoRuntimeError('Connection creation failed without error'));\n        return;\n      }\n\n      // The pool might have closed since we started trying to create a connection\n      if (this[kPoolState] !== PoolState.ready) {\n        this[kPending]--;\n        connection.destroy({ force: true });\n        callback(this.closed ? new PoolClosedError(this) : new PoolClearedError(this));\n        return;\n      }\n\n      // forward all events from the connection to the pool\n      for (const event of [...APM_EVENTS, Connection.CLUSTER_TIME_RECEIVED]) {\n        connection.on(event, (e: any) => this.emit(event, e));\n      }\n\n      if (this.loadBalanced) {\n        connection.on(Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n        connection.on(Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n\n        const serviceId = connection.serviceId;\n        if (serviceId) {\n          let generation;\n          const sid = serviceId.toHexString();\n          if ((generation = this.serviceGenerations.get(sid))) {\n            connection.generation = generation;\n          } else {\n            this.serviceGenerations.set(sid, 0);\n            connection.generation = 0;\n          }\n        }\n      }\n\n      connection.markAvailable();\n      this.emitAndLog(ConnectionPool.CONNECTION_READY, new ConnectionReadyEvent(this, connection));\n\n      this[kPending]--;\n      callback(undefined, connection);\n      return;\n    });\n  }\n\n  private ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n    if (this[kPoolState] !== PoolState.ready || minPoolSize === 0) {\n      return;\n    }\n\n    this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n\n    if (\n      this.totalConnectionCount < minPoolSize &&\n      this.pendingConnectionCount < this.options.maxConnecting\n    ) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        if (err) {\n          this[kServer].handleError(err);\n        }\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n        if (this[kPoolState] === PoolState.ready) {\n          clearTimeout(this[kMinPoolSizeTimer]);\n          this[kMinPoolSizeTimer] = setTimeout(\n            () => this.ensureMinPoolSize(),\n            this.options.minPoolSizeCheckFrequencyMS\n          );\n        }\n      });\n    } else {\n      clearTimeout(this[kMinPoolSizeTimer]);\n      this[kMinPoolSizeTimer] = setTimeout(\n        () => this.ensureMinPoolSize(),\n        this.options.minPoolSizeCheckFrequencyMS\n      );\n    }\n  }\n\n  private processWaitQueue() {\n    if (this[kProcessingWaitQueue]) {\n      return;\n    }\n    this[kProcessingWaitQueue] = true;\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].first();\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (this[kPoolState] !== PoolState.ready) {\n        const reason = this.closed ? 'poolClosed' : 'connectionError';\n        const error = this.closed ? new PoolClosedError(this) : new PoolClearedError(this);\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, reason, error)\n        );\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(error);\n        continue;\n      }\n\n      if (!this.availableConnectionCount) {\n        break;\n      }\n\n      const connection = this[kConnections].shift();\n      if (!connection) {\n        break;\n      }\n\n      if (!this.destroyConnectionIfPerished(connection)) {\n        this[kCheckedOut].add(connection);\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CHECKED_OUT,\n          new ConnectionCheckedOutEvent(this, connection)\n        );\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(undefined, connection);\n      }\n    }\n\n    const { maxPoolSize, maxConnecting } = this.options;\n    while (\n      this.waitQueueSize > 0 &&\n      this.pendingConnectionCount < maxConnecting &&\n      (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)\n    ) {\n      const waitQueueMember = this[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n      this.createConnection((err, connection) => {\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emitAndLog(\n              ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n              // TODO(NODE-5192): Remove this cast\n              new ConnectionCheckOutFailedEvent(this, 'connectionError', err as MongoError)\n            );\n          } else if (connection) {\n            this[kCheckedOut].add(connection);\n            this.emitAndLog(\n              ConnectionPool.CONNECTION_CHECKED_OUT,\n              new ConnectionCheckedOutEvent(this, connection)\n            );\n          }\n\n          if (waitQueueMember.timer) {\n            clearTimeout(waitQueueMember.timer);\n          }\n          waitQueueMember.callback(err, connection);\n        }\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n    this[kProcessingWaitQueue] = false;\n  }\n}\n\n/**\n * A callback provided to `withConnection`\n * @internal\n *\n * @param error - An error instance representing the error during the execution.\n * @param connection - The managed connection which was checked out of the pool.\n * @param callback - A function to call back after connection management is complete\n */\nexport type WithConnectionCallback = (\n  error: MongoError | undefined,\n  connection: Connection | undefined,\n  callback: Callback<Connection>\n) => void;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}