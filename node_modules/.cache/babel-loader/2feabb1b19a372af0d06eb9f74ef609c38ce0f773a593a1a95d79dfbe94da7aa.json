{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readPreferenceServerSelector = exports.secondaryWritableServerSelector = exports.sameServerSelector = exports.writableServerSelector = exports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst common_1 = require(\"./common\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n  return (topologyDescription, servers) => latencyWindowReducer(topologyDescription, servers.filter(s => s.isWritable));\n}\nexports.writableServerSelector = writableServerSelector;\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */\nfunction sameServerSelector(description) {\n  return (topologyDescription, servers) => {\n    if (!description) return [];\n    // Filter the servers to match the provided description only if\n    // the type is not unknown.\n    return servers.filter(sd => {\n      return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n    });\n  };\n}\nexports.sameServerSelector = sameServerSelector;\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */\nfunction secondaryWritableServerSelector(wireVersion, readPreference) {\n  // If server version < 5.0, read preference always primary.\n  // If server version >= 5.0...\n  // - If read preference is supplied, use that.\n  // - If no read preference is supplied, use primary.\n  if (!readPreference || !wireVersion || wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n    return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n  }\n  return readPreferenceServerSelector(readPreference);\n}\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n  if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n    return servers;\n  }\n  const maxStaleness = readPreference.maxStalenessSeconds;\n  const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n  if (maxStaleness < maxStalenessVariance) {\n    throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n  }\n  if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n    throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n  }\n  if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n    const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n    return servers.reduce((result, server) => {\n      const stalenessMS = server.lastUpdateTime - server.lastWriteDate - (primary.lastUpdateTime - primary.lastWriteDate) + topologyDescription.heartbeatFrequencyMS;\n      const staleness = stalenessMS / 1000;\n      const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n      if (staleness <= maxStalenessSeconds) {\n        result.push(server);\n      }\n      return result;\n    }, []);\n  }\n  if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n    if (servers.length === 0) {\n      return servers;\n    }\n    const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n    return servers.reduce((result, server) => {\n      const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n      const staleness = stalenessMS / 1000;\n      const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n      if (staleness <= maxStalenessSeconds) {\n        result.push(server);\n      }\n      return result;\n    }, []);\n  }\n  return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n  const keys = Object.keys(tagSet);\n  const serverTagKeys = Object.keys(serverTags);\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n  if (readPreference.tags == null || Array.isArray(readPreference.tags) && readPreference.tags.length === 0) {\n    return servers;\n  }\n  for (let i = 0; i < readPreference.tags.length; ++i) {\n    const tagSet = readPreference.tags[i];\n    const serversMatchingTagset = servers.reduce((matched, server) => {\n      if (tagSetMatch(tagSet, server.tags)) matched.push(server);\n      return matched;\n    }, []);\n    if (serversMatchingTagset.length) {\n      return serversMatchingTagset;\n    }\n  }\n  return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n  const low = servers.reduce((min, server) => min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min), -1);\n  const high = low + topologyDescription.localThresholdMS;\n  return servers.reduce((result, server) => {\n    if (server.roundTripTime <= high && server.roundTripTime >= low) result.push(server);\n    return result;\n  }, []);\n}\n// filters\nfunction primaryFilter(server) {\n  return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n  return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n  return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n  return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n  return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n  if (!readPreference.isValid()) {\n    throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n  }\n  return (topologyDescription, servers) => {\n    const commonWireVersion = topologyDescription.commonWireVersion;\n    if (commonWireVersion && readPreference.minWireVersion && readPreference.minWireVersion > commonWireVersion) {\n      throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n      return servers.filter(loadBalancerFilter);\n    }\n    if (topologyDescription.type === common_1.TopologyType.Unknown) {\n      return [];\n    }\n    if (topologyDescription.type === common_1.TopologyType.Single || topologyDescription.type === common_1.TopologyType.Sharded) {\n      return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n    }\n    const mode = readPreference.mode;\n    if (mode === read_preference_1.ReadPreference.PRIMARY) {\n      return servers.filter(primaryFilter);\n    }\n    if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n      const result = servers.filter(primaryFilter);\n      if (result.length) {\n        return result;\n      }\n    }\n    const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n    const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n    if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n      return servers.filter(primaryFilter);\n    }\n    return selectedServers;\n  };\n}\nexports.readPreferenceServerSelector = readPreferenceServerSelector;","map":{"version":3,"names":["error_1","require","read_preference_1","common_1","IDLE_WRITE_PERIOD","SMALLEST_MAX_STALENESS_SECONDS","exports","MIN_SECONDARY_WRITE_WIRE_VERSION","writableServerSelector","topologyDescription","servers","latencyWindowReducer","filter","s","isWritable","sameServerSelector","description","sd","address","type","ServerType","Unknown","secondaryWritableServerSelector","wireVersion","readPreference","readPreferenceServerSelector","ReadPreference","primary","maxStalenessReducer","maxStalenessSeconds","maxStaleness","maxStalenessVariance","heartbeatFrequencyMS","MongoInvalidArgumentError","TopologyType","ReplicaSetWithPrimary","Array","from","values","primaryFilter","reduce","result","server","stalenessMS","lastUpdateTime","lastWriteDate","staleness","push","ReplicaSetNoPrimary","length","sMax","max","tagSetMatch","tagSet","serverTags","keys","Object","serverTagKeys","i","key","indexOf","tagSetReducer","tags","isArray","serversMatchingTagset","matched","low","min","roundTripTime","Math","high","localThresholdMS","RSPrimary","secondaryFilter","RSSecondary","nearestFilter","knownFilter","loadBalancerFilter","LoadBalancer","isValid","commonWireVersion","minWireVersion","MongoCompatibilityError","LoadBalanced","Single","Sharded","mode","PRIMARY","PRIMARY_PREFERRED","NEAREST","selectedServers","SECONDARY_PREFERRED"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\sdam\\server_selection.ts"],"sourcesContent":["import { MongoCompatibilityError, MongoInvalidArgumentError } from '../error';\nimport { ReadPreference } from '../read_preference';\nimport { ServerType, TopologyType } from './common';\nimport type { ServerDescription, TagSet } from './server_description';\nimport type { TopologyDescription } from './topology_description';\n\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n\n//  Minimum version to try writes on secondaries.\nexport const MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n\n/** @internal */\nexport type ServerSelector = (\n  topologyDescription: TopologyDescription,\n  servers: ServerDescription[]\n) => ServerDescription[];\n\n/**\n * Returns a server selector that selects for writable servers\n */\nexport function writableServerSelector(): ServerSelector {\n  return (\n    topologyDescription: TopologyDescription,\n    servers: ServerDescription[]\n  ): ServerDescription[] =>\n    latencyWindowReducer(\n      topologyDescription,\n      servers.filter((s: ServerDescription) => s.isWritable)\n    );\n}\n\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */\nexport function sameServerSelector(description?: ServerDescription): ServerSelector {\n  return (\n    topologyDescription: TopologyDescription,\n    servers: ServerDescription[]\n  ): ServerDescription[] => {\n    if (!description) return [];\n    // Filter the servers to match the provided description only if\n    // the type is not unknown.\n    return servers.filter(sd => {\n      return sd.address === description.address && sd.type !== ServerType.Unknown;\n    });\n  };\n}\n\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */\nexport function secondaryWritableServerSelector(\n  wireVersion?: number,\n  readPreference?: ReadPreference\n): ServerSelector {\n  // If server version < 5.0, read preference always primary.\n  // If server version >= 5.0...\n  // - If read preference is supplied, use that.\n  // - If no read preference is supplied, use primary.\n  if (\n    !readPreference ||\n    !wireVersion ||\n    (wireVersion && wireVersion < MIN_SECONDARY_WRITE_WIRE_VERSION)\n  ) {\n    return readPreferenceServerSelector(ReadPreference.primary);\n  }\n  return readPreferenceServerSelector(readPreference);\n}\n\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(\n  readPreference: ReadPreference,\n  topologyDescription: TopologyDescription,\n  servers: ServerDescription[]\n): ServerDescription[] {\n  if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n    return servers;\n  }\n\n  const maxStaleness = readPreference.maxStalenessSeconds;\n  const maxStalenessVariance =\n    (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n  if (maxStaleness < maxStalenessVariance) {\n    throw new MongoInvalidArgumentError(\n      `Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`\n    );\n  }\n\n  if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n    throw new MongoInvalidArgumentError(\n      `Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`\n    );\n  }\n\n  if (topologyDescription.type === TopologyType.ReplicaSetWithPrimary) {\n    const primary: ServerDescription = Array.from(topologyDescription.servers.values()).filter(\n      primaryFilter\n    )[0];\n\n    return servers.reduce((result: ServerDescription[], server: ServerDescription) => {\n      const stalenessMS =\n        server.lastUpdateTime -\n        server.lastWriteDate -\n        (primary.lastUpdateTime - primary.lastWriteDate) +\n        topologyDescription.heartbeatFrequencyMS;\n\n      const staleness = stalenessMS / 1000;\n      const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n      if (staleness <= maxStalenessSeconds) {\n        result.push(server);\n      }\n\n      return result;\n    }, []);\n  }\n\n  if (topologyDescription.type === TopologyType.ReplicaSetNoPrimary) {\n    if (servers.length === 0) {\n      return servers;\n    }\n\n    const sMax = servers.reduce((max: ServerDescription, s: ServerDescription) =>\n      s.lastWriteDate > max.lastWriteDate ? s : max\n    );\n\n    return servers.reduce((result: ServerDescription[], server: ServerDescription) => {\n      const stalenessMS =\n        sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n\n      const staleness = stalenessMS / 1000;\n      const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n      if (staleness <= maxStalenessSeconds) {\n        result.push(server);\n      }\n\n      return result;\n    }, []);\n  }\n\n  return servers;\n}\n\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet: TagSet, serverTags: TagSet) {\n  const keys = Object.keys(tagSet);\n  const serverTagKeys = Object.keys(serverTags);\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(\n  readPreference: ReadPreference,\n  servers: ServerDescription[]\n): ServerDescription[] {\n  if (\n    readPreference.tags == null ||\n    (Array.isArray(readPreference.tags) && readPreference.tags.length === 0)\n  ) {\n    return servers;\n  }\n\n  for (let i = 0; i < readPreference.tags.length; ++i) {\n    const tagSet = readPreference.tags[i];\n    const serversMatchingTagset = servers.reduce(\n      (matched: ServerDescription[], server: ServerDescription) => {\n        if (tagSetMatch(tagSet, server.tags)) matched.push(server);\n        return matched;\n      },\n      []\n    );\n\n    if (serversMatchingTagset.length) {\n      return serversMatchingTagset;\n    }\n  }\n\n  return [];\n}\n\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(\n  topologyDescription: TopologyDescription,\n  servers: ServerDescription[]\n): ServerDescription[] {\n  const low = servers.reduce(\n    (min: number, server: ServerDescription) =>\n      min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min),\n    -1\n  );\n\n  const high = low + topologyDescription.localThresholdMS;\n  return servers.reduce((result: ServerDescription[], server: ServerDescription) => {\n    if (server.roundTripTime <= high && server.roundTripTime >= low) result.push(server);\n    return result;\n  }, []);\n}\n\n// filters\nfunction primaryFilter(server: ServerDescription): boolean {\n  return server.type === ServerType.RSPrimary;\n}\n\nfunction secondaryFilter(server: ServerDescription): boolean {\n  return server.type === ServerType.RSSecondary;\n}\n\nfunction nearestFilter(server: ServerDescription): boolean {\n  return server.type === ServerType.RSSecondary || server.type === ServerType.RSPrimary;\n}\n\nfunction knownFilter(server: ServerDescription): boolean {\n  return server.type !== ServerType.Unknown;\n}\n\nfunction loadBalancerFilter(server: ServerDescription): boolean {\n  return server.type === ServerType.LoadBalancer;\n}\n\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nexport function readPreferenceServerSelector(readPreference: ReadPreference): ServerSelector {\n  if (!readPreference.isValid()) {\n    throw new MongoInvalidArgumentError('Invalid read preference specified');\n  }\n\n  return (\n    topologyDescription: TopologyDescription,\n    servers: ServerDescription[]\n  ): ServerDescription[] => {\n    const commonWireVersion = topologyDescription.commonWireVersion;\n    if (\n      commonWireVersion &&\n      readPreference.minWireVersion &&\n      readPreference.minWireVersion > commonWireVersion\n    ) {\n      throw new MongoCompatibilityError(\n        `Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`\n      );\n    }\n\n    if (topologyDescription.type === TopologyType.LoadBalanced) {\n      return servers.filter(loadBalancerFilter);\n    }\n\n    if (topologyDescription.type === TopologyType.Unknown) {\n      return [];\n    }\n\n    if (\n      topologyDescription.type === TopologyType.Single ||\n      topologyDescription.type === TopologyType.Sharded\n    ) {\n      return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n    }\n\n    const mode = readPreference.mode;\n    if (mode === ReadPreference.PRIMARY) {\n      return servers.filter(primaryFilter);\n    }\n\n    if (mode === ReadPreference.PRIMARY_PREFERRED) {\n      const result = servers.filter(primaryFilter);\n      if (result.length) {\n        return result;\n      }\n    }\n\n    const filter = mode === ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n    const selectedServers = latencyWindowReducer(\n      topologyDescription,\n      tagSetReducer(\n        readPreference,\n        maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))\n      )\n    );\n\n    if (mode === ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n      return servers.filter(primaryFilter);\n    }\n\n    return selectedServers;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}