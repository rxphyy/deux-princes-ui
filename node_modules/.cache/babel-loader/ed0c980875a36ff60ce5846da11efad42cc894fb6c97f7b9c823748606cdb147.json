{"ast":null,"code":"const ip = exports;\nconst {\n  Buffer\n} = require('buffer');\nconst os = require('os');\nip.toBuffer = function (ip, buff, offset) {\n  offset = ~~offset;\n  let result;\n  if (this.isV4Format(ip)) {\n    result = buff || Buffer.alloc(offset + 4);\n    ip.split(/\\./g).map(byte => {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (this.isV6Format(ip)) {\n    const sections = ip.split(':', 8);\n    let i;\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = this.isV4Format(sections[i]);\n      let v4Buffer;\n      if (isv4) {\n        v4Buffer = this.toBuffer(sections[i]);\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\n      }\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\n      }\n    }\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv = [i, 1];\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n      sections.splice(...argv);\n    }\n    result = buff || Buffer.alloc(offset + 16);\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16);\n      result[offset++] = word >> 8 & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n  if (!result) {\n    throw Error(`Invalid ip address: ${ip}`);\n  }\n  return result;\n};\nip.toString = function (buff, offset, length) {\n  offset = ~~offset;\n  length = length || buff.length - offset;\n  let result = [];\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n    result = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(buff.readUInt16BE(offset + i).toString(16));\n    }\n    result = result.join(':');\n    result = result.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    result = result.replace(/:{3,4}/, '::');\n  }\n  return result;\n};\nconst ipv4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\nconst ipv6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\nip.isV4Format = function (ip) {\n  return ipv4Regex.test(ip);\n};\nip.isV6Format = function (ip) {\n  return ipv6Regex.test(ip);\n};\nfunction _normalizeFamily(family) {\n  if (family === 4) {\n    return 'ipv4';\n  }\n  if (family === 6) {\n    return 'ipv6';\n  }\n  return family ? family.toLowerCase() : 'ipv4';\n}\nip.fromPrefixLen = function (prefixlen, family) {\n  if (prefixlen > 32) {\n    family = 'ipv6';\n  } else {\n    family = _normalizeFamily(family);\n  }\n  let len = 4;\n  if (family === 'ipv6') {\n    len = 16;\n  }\n  const buff = Buffer.alloc(len);\n  for (let i = 0, n = buff.length; i < n; ++i) {\n    let bits = 8;\n    if (prefixlen < 8) {\n      bits = prefixlen;\n    }\n    prefixlen -= bits;\n    buff[i] = ~(0xff >> bits) & 0xff;\n  }\n  return ip.toString(buff);\n};\nip.mask = function (addr, mask) {\n  addr = ip.toBuffer(addr);\n  mask = ip.toBuffer(mask);\n  const result = Buffer.alloc(Math.max(addr.length, mask.length));\n\n  // Same protocol - do bitwise and\n  let i;\n  if (addr.length === mask.length) {\n    for (i = 0; i < addr.length; i++) {\n      result[i] = addr[i] & mask[i];\n    }\n  } else if (mask.length === 4) {\n    // IPv6 address and IPv4 mask\n    // (Mask low bits)\n    for (i = 0; i < mask.length; i++) {\n      result[i] = addr[addr.length - 4 + i] & mask[i];\n    }\n  } else {\n    // IPv6 mask and IPv4 addr\n    for (i = 0; i < result.length - 6; i++) {\n      result[i] = 0;\n    }\n\n    // ::ffff:ipv4\n    result[10] = 0xff;\n    result[11] = 0xff;\n    for (i = 0; i < addr.length; i++) {\n      result[i + 12] = addr[i] & mask[i + 12];\n    }\n    i += 12;\n  }\n  for (; i < result.length; i++) {\n    result[i] = 0;\n  }\n  return ip.toString(result);\n};\nip.cidr = function (cidrString) {\n  const cidrParts = cidrString.split('/');\n  const addr = cidrParts[0];\n  if (cidrParts.length !== 2) {\n    throw new Error(`invalid CIDR subnet: ${addr}`);\n  }\n  const mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n  return ip.mask(addr, mask);\n};\nip.subnet = function (addr, mask) {\n  const networkAddress = ip.toLong(ip.mask(addr, mask));\n\n  // Calculate the mask's length.\n  const maskBuffer = ip.toBuffer(mask);\n  let maskLength = 0;\n  for (let i = 0; i < maskBuffer.length; i++) {\n    if (maskBuffer[i] === 0xff) {\n      maskLength += 8;\n    } else {\n      let octet = maskBuffer[i] & 0xff;\n      while (octet) {\n        octet = octet << 1 & 0xff;\n        maskLength++;\n      }\n    }\n  }\n  const numberOfAddresses = 2 ** (32 - maskLength);\n  return {\n    networkAddress: ip.fromLong(networkAddress),\n    firstAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress) : ip.fromLong(networkAddress + 1),\n    lastAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress + numberOfAddresses - 1) : ip.fromLong(networkAddress + numberOfAddresses - 2),\n    broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),\n    subnetMask: mask,\n    subnetMaskLength: maskLength,\n    numHosts: numberOfAddresses <= 2 ? numberOfAddresses : numberOfAddresses - 2,\n    length: numberOfAddresses,\n    contains(other) {\n      return networkAddress === ip.toLong(ip.mask(other, mask));\n    }\n  };\n};\nip.cidrSubnet = function (cidrString) {\n  const cidrParts = cidrString.split('/');\n  const addr = cidrParts[0];\n  if (cidrParts.length !== 2) {\n    throw new Error(`invalid CIDR subnet: ${addr}`);\n  }\n  const mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n  return ip.subnet(addr, mask);\n};\nip.not = function (addr) {\n  const buff = ip.toBuffer(addr);\n  for (let i = 0; i < buff.length; i++) {\n    buff[i] = 0xff ^ buff[i];\n  }\n  return ip.toString(buff);\n};\nip.or = function (a, b) {\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // same protocol\n  if (a.length === b.length) {\n    for (let i = 0; i < a.length; ++i) {\n      a[i] |= b[i];\n    }\n    return ip.toString(a);\n\n    // mixed protocols\n  }\n\n  let buff = a;\n  let other = b;\n  if (b.length > a.length) {\n    buff = b;\n    other = a;\n  }\n  const offset = buff.length - other.length;\n  for (let i = offset; i < buff.length; ++i) {\n    buff[i] |= other[i - offset];\n  }\n  return ip.toString(buff);\n};\nip.isEqual = function (a, b) {\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // Same protocol\n  if (a.length === b.length) {\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n\n  // Swap\n  if (b.length === 4) {\n    const t = b;\n    b = a;\n    a = t;\n  }\n\n  // a - IPv4, b - IPv6\n  for (let i = 0; i < 10; i++) {\n    if (b[i] !== 0) return false;\n  }\n  const word = b.readUInt16BE(10);\n  if (word !== 0 && word !== 0xffff) return false;\n  for (let i = 0; i < 4; i++) {\n    if (a[i] !== b[i + 12]) return false;\n  }\n  return true;\n};\nip.isPrivate = function (addr) {\n  return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^f[cd][0-9a-f]{2}:/i.test(addr) || /^fe80:/i.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);\n};\nip.isPublic = function (addr) {\n  return !ip.isPrivate(addr);\n};\nip.isLoopback = function (addr) {\n  return /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/.test(addr) || /^fe80::1$/.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);\n};\nip.loopback = function (family) {\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n  if (family !== 'ipv4' && family !== 'ipv6') {\n    throw new Error('family must be ipv4 or ipv6');\n  }\n  return family === 'ipv4' ? '127.0.0.1' : 'fe80::1';\n};\n\n//\n// ### function address (name, family)\n// #### @name {string|'public'|'private'} **Optional** Name or security\n//      of the network interface.\n// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults\n//      to ipv4).\n//\n// Returns the address for the network interface on the current system with\n// the specified `name`:\n//   * String: First `family` address of the interface.\n//             If not found see `undefined`.\n//   * 'public': the first public ip address of family.\n//   * 'private': the first private ip address of family.\n//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.\n//\nip.address = function (name, family) {\n  const interfaces = os.networkInterfaces();\n\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  //\n  // If a specific network interface has been named,\n  // return the address.\n  //\n  if (name && name !== 'private' && name !== 'public') {\n    const res = interfaces[name].filter(details => {\n      const itemFamily = _normalizeFamily(details.family);\n      return itemFamily === family;\n    });\n    if (res.length === 0) {\n      return undefined;\n    }\n    return res[0].address;\n  }\n  const all = Object.keys(interfaces).map(nic => {\n    //\n    // Note: name will only be `public` or `private`\n    // when this is called.\n    //\n    const addresses = interfaces[nic].filter(details => {\n      details.family = _normalizeFamily(details.family);\n      if (details.family !== family || ip.isLoopback(details.address)) {\n        return false;\n      }\n      if (!name) {\n        return true;\n      }\n      return name === 'public' ? ip.isPrivate(details.address) : ip.isPublic(details.address);\n    });\n    return addresses.length ? addresses[0].address : undefined;\n  }).filter(Boolean);\n  return !all.length ? ip.loopback(family) : all[0];\n};\nip.toLong = function (ip) {\n  let ipl = 0;\n  ip.split('.').forEach(octet => {\n    ipl <<= 8;\n    ipl += parseInt(octet);\n  });\n  return ipl >>> 0;\n};\nip.fromLong = function (ipl) {\n  return `${ipl >>> 24}.${ipl >> 16 & 255}.${ipl >> 8 & 255}.${ipl & 255}`;\n};","map":{"version":3,"names":["ip","exports","Buffer","require","os","toBuffer","buff","offset","result","isV4Format","alloc","split","map","byte","parseInt","isV6Format","sections","i","length","isv4","v4Buffer","slice","toString","splice","unshift","push","argv","word","Error","join","readUInt16BE","replace","ipv4Regex","ipv6Regex","test","_normalizeFamily","family","toLowerCase","fromPrefixLen","prefixlen","len","n","bits","mask","addr","Math","max","cidr","cidrString","cidrParts","subnet","networkAddress","toLong","maskBuffer","maskLength","octet","numberOfAddresses","fromLong","firstAddress","lastAddress","broadcastAddress","subnetMask","subnetMaskLength","numHosts","contains","other","cidrSubnet","not","or","a","b","isEqual","t","isPrivate","isPublic","isLoopback","loopback","address","name","interfaces","networkInterfaces","res","filter","details","itemFamily","undefined","all","Object","keys","nic","addresses","Boolean","ipl","forEach"],"sources":["C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/ip/lib/ip.js"],"sourcesContent":["const ip = exports;\nconst { Buffer } = require('buffer');\nconst os = require('os');\n\nip.toBuffer = function (ip, buff, offset) {\n  offset = ~~offset;\n\n  let result;\n\n  if (this.isV4Format(ip)) {\n    result = buff || Buffer.alloc(offset + 4);\n    ip.split(/\\./g).map((byte) => {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (this.isV6Format(ip)) {\n    const sections = ip.split(':', 8);\n\n    let i;\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = this.isV4Format(sections[i]);\n      let v4Buffer;\n\n      if (isv4) {\n        v4Buffer = this.toBuffer(sections[i]);\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv = [i, 1];\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n      sections.splice(...argv);\n    }\n\n    result = buff || Buffer.alloc(offset + 16);\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16);\n      result[offset++] = (word >> 8) & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n\n  if (!result) {\n    throw Error(`Invalid ip address: ${ip}`);\n  }\n\n  return result;\n};\n\nip.toString = function (buff, offset, length) {\n  offset = ~~offset;\n  length = length || (buff.length - offset);\n\n  let result = [];\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n    result = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(buff.readUInt16BE(offset + i).toString(16));\n    }\n    result = result.join(':');\n    result = result.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    result = result.replace(/:{3,4}/, '::');\n  }\n\n  return result;\n};\n\nconst ipv4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\nconst ipv6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\n\nip.isV4Format = function (ip) {\n  return ipv4Regex.test(ip);\n};\n\nip.isV6Format = function (ip) {\n  return ipv6Regex.test(ip);\n};\n\nfunction _normalizeFamily(family) {\n  if (family === 4) {\n    return 'ipv4';\n  }\n  if (family === 6) {\n    return 'ipv6';\n  }\n  return family ? family.toLowerCase() : 'ipv4';\n}\n\nip.fromPrefixLen = function (prefixlen, family) {\n  if (prefixlen > 32) {\n    family = 'ipv6';\n  } else {\n    family = _normalizeFamily(family);\n  }\n\n  let len = 4;\n  if (family === 'ipv6') {\n    len = 16;\n  }\n  const buff = Buffer.alloc(len);\n\n  for (let i = 0, n = buff.length; i < n; ++i) {\n    let bits = 8;\n    if (prefixlen < 8) {\n      bits = prefixlen;\n    }\n    prefixlen -= bits;\n\n    buff[i] = ~(0xff >> bits) & 0xff;\n  }\n\n  return ip.toString(buff);\n};\n\nip.mask = function (addr, mask) {\n  addr = ip.toBuffer(addr);\n  mask = ip.toBuffer(mask);\n\n  const result = Buffer.alloc(Math.max(addr.length, mask.length));\n\n  // Same protocol - do bitwise and\n  let i;\n  if (addr.length === mask.length) {\n    for (i = 0; i < addr.length; i++) {\n      result[i] = addr[i] & mask[i];\n    }\n  } else if (mask.length === 4) {\n    // IPv6 address and IPv4 mask\n    // (Mask low bits)\n    for (i = 0; i < mask.length; i++) {\n      result[i] = addr[addr.length - 4 + i] & mask[i];\n    }\n  } else {\n    // IPv6 mask and IPv4 addr\n    for (i = 0; i < result.length - 6; i++) {\n      result[i] = 0;\n    }\n\n    // ::ffff:ipv4\n    result[10] = 0xff;\n    result[11] = 0xff;\n    for (i = 0; i < addr.length; i++) {\n      result[i + 12] = addr[i] & mask[i + 12];\n    }\n    i += 12;\n  }\n  for (; i < result.length; i++) {\n    result[i] = 0;\n  }\n\n  return ip.toString(result);\n};\n\nip.cidr = function (cidrString) {\n  const cidrParts = cidrString.split('/');\n\n  const addr = cidrParts[0];\n  if (cidrParts.length !== 2) {\n    throw new Error(`invalid CIDR subnet: ${addr}`);\n  }\n\n  const mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n\n  return ip.mask(addr, mask);\n};\n\nip.subnet = function (addr, mask) {\n  const networkAddress = ip.toLong(ip.mask(addr, mask));\n\n  // Calculate the mask's length.\n  const maskBuffer = ip.toBuffer(mask);\n  let maskLength = 0;\n\n  for (let i = 0; i < maskBuffer.length; i++) {\n    if (maskBuffer[i] === 0xff) {\n      maskLength += 8;\n    } else {\n      let octet = maskBuffer[i] & 0xff;\n      while (octet) {\n        octet = (octet << 1) & 0xff;\n        maskLength++;\n      }\n    }\n  }\n\n  const numberOfAddresses = 2 ** (32 - maskLength);\n\n  return {\n    networkAddress: ip.fromLong(networkAddress),\n    firstAddress: numberOfAddresses <= 2\n      ? ip.fromLong(networkAddress)\n      : ip.fromLong(networkAddress + 1),\n    lastAddress: numberOfAddresses <= 2\n      ? ip.fromLong(networkAddress + numberOfAddresses - 1)\n      : ip.fromLong(networkAddress + numberOfAddresses - 2),\n    broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),\n    subnetMask: mask,\n    subnetMaskLength: maskLength,\n    numHosts: numberOfAddresses <= 2\n      ? numberOfAddresses : numberOfAddresses - 2,\n    length: numberOfAddresses,\n    contains(other) {\n      return networkAddress === ip.toLong(ip.mask(other, mask));\n    },\n  };\n};\n\nip.cidrSubnet = function (cidrString) {\n  const cidrParts = cidrString.split('/');\n\n  const addr = cidrParts[0];\n  if (cidrParts.length !== 2) {\n    throw new Error(`invalid CIDR subnet: ${addr}`);\n  }\n\n  const mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n\n  return ip.subnet(addr, mask);\n};\n\nip.not = function (addr) {\n  const buff = ip.toBuffer(addr);\n  for (let i = 0; i < buff.length; i++) {\n    buff[i] = 0xff ^ buff[i];\n  }\n  return ip.toString(buff);\n};\n\nip.or = function (a, b) {\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // same protocol\n  if (a.length === b.length) {\n    for (let i = 0; i < a.length; ++i) {\n      a[i] |= b[i];\n    }\n    return ip.toString(a);\n\n  // mixed protocols\n  }\n  let buff = a;\n  let other = b;\n  if (b.length > a.length) {\n    buff = b;\n    other = a;\n  }\n\n  const offset = buff.length - other.length;\n  for (let i = offset; i < buff.length; ++i) {\n    buff[i] |= other[i - offset];\n  }\n\n  return ip.toString(buff);\n};\n\nip.isEqual = function (a, b) {\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // Same protocol\n  if (a.length === b.length) {\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n\n  // Swap\n  if (b.length === 4) {\n    const t = b;\n    b = a;\n    a = t;\n  }\n\n  // a - IPv4, b - IPv6\n  for (let i = 0; i < 10; i++) {\n    if (b[i] !== 0) return false;\n  }\n\n  const word = b.readUInt16BE(10);\n  if (word !== 0 && word !== 0xffff) return false;\n\n  for (let i = 0; i < 4; i++) {\n    if (a[i] !== b[i + 12]) return false;\n  }\n\n  return true;\n};\n\nip.isPrivate = function (addr) {\n  return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\n    .test(addr)\n    || /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr)\n    || /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\n      .test(addr)\n    || /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr)\n    || /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr)\n    || /^f[cd][0-9a-f]{2}:/i.test(addr)\n    || /^fe80:/i.test(addr)\n    || /^::1$/.test(addr)\n    || /^::$/.test(addr);\n};\n\nip.isPublic = function (addr) {\n  return !ip.isPrivate(addr);\n};\n\nip.isLoopback = function (addr) {\n  return /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/\n    .test(addr)\n    || /^fe80::1$/.test(addr)\n    || /^::1$/.test(addr)\n    || /^::$/.test(addr);\n};\n\nip.loopback = function (family) {\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  if (family !== 'ipv4' && family !== 'ipv6') {\n    throw new Error('family must be ipv4 or ipv6');\n  }\n\n  return family === 'ipv4' ? '127.0.0.1' : 'fe80::1';\n};\n\n//\n// ### function address (name, family)\n// #### @name {string|'public'|'private'} **Optional** Name or security\n//      of the network interface.\n// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults\n//      to ipv4).\n//\n// Returns the address for the network interface on the current system with\n// the specified `name`:\n//   * String: First `family` address of the interface.\n//             If not found see `undefined`.\n//   * 'public': the first public ip address of family.\n//   * 'private': the first private ip address of family.\n//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.\n//\nip.address = function (name, family) {\n  const interfaces = os.networkInterfaces();\n\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  //\n  // If a specific network interface has been named,\n  // return the address.\n  //\n  if (name && name !== 'private' && name !== 'public') {\n    const res = interfaces[name].filter((details) => {\n      const itemFamily = _normalizeFamily(details.family);\n      return itemFamily === family;\n    });\n    if (res.length === 0) {\n      return undefined;\n    }\n    return res[0].address;\n  }\n\n  const all = Object.keys(interfaces).map((nic) => {\n    //\n    // Note: name will only be `public` or `private`\n    // when this is called.\n    //\n    const addresses = interfaces[nic].filter((details) => {\n      details.family = _normalizeFamily(details.family);\n      if (details.family !== family || ip.isLoopback(details.address)) {\n        return false;\n      } if (!name) {\n        return true;\n      }\n\n      return name === 'public' ? ip.isPrivate(details.address)\n        : ip.isPublic(details.address);\n    });\n\n    return addresses.length ? addresses[0].address : undefined;\n  }).filter(Boolean);\n\n  return !all.length ? ip.loopback(family) : all[0];\n};\n\nip.toLong = function (ip) {\n  let ipl = 0;\n  ip.split('.').forEach((octet) => {\n    ipl <<= 8;\n    ipl += parseInt(octet);\n  });\n  return (ipl >>> 0);\n};\n\nip.fromLong = function (ipl) {\n  return (`${ipl >>> 24}.${\n    ipl >> 16 & 255}.${\n    ipl >> 8 & 255}.${\n    ipl & 255}`);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}