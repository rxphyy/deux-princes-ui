{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Admin = void 0;\nconst bson_1 = require(\"./bson\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst list_databases_1 = require(\"./operations/list_databases\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nclass Admin {\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db) {\n    this.s = {\n      db\n    };\n  }\n  /**\n   * Execute a command\n   *\n   * The driver will ensure the following fields are attached to the command sent to the server:\n   * - `lsid` - sourced from an implicit session or options.session\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n   * - `$db` - sourced from the name of this database\n   *\n   * If the client has a serverApi setting:\n   * - `apiVersion`\n   * - `apiStrict`\n   * - `apiDeprecationErrors`\n   *\n   * When in a transaction:\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n   *\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n   *\n   * @param command - The command to execute\n   * @param options - Optional settings for the command\n   */\n  async command(command, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunAdminCommandOperation(command, {\n      ...(0, bson_1.resolveBSONOptions)(options),\n      session: options?.session,\n      readPreference: options?.readPreference\n    }));\n  }\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   */\n  async buildInfo(options) {\n    return this.command({\n      buildinfo: 1\n    }, options);\n  }\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   */\n  async serverInfo(options) {\n    return this.command({\n      buildinfo: 1\n    }, options);\n  }\n  /**\n   * Retrieve this db's server status.\n   *\n   * @param options - Optional settings for the command\n   */\n  async serverStatus(options) {\n    return this.command({\n      serverStatus: 1\n    }, options);\n  }\n  /**\n   * Ping the MongoDB server and retrieve results\n   *\n   * @param options - Optional settings for the command\n   */\n  async ping(options) {\n    return this.command({\n      ping: 1\n    }, options);\n  }\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n  async removeUser(username, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, {\n      dbName: 'admin',\n      ...options\n    }));\n  }\n  /**\n   * Validate an existing collection\n   *\n   * @param collectionName - The name of the collection to validate.\n   * @param options - Optional settings for the command\n   */\n  async validateCollection(collectionName, options = {}) {\n    return (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n  }\n  /**\n   * List the available databases\n   *\n   * @param options - Optional settings for the command\n   */\n  async listDatabases(options) {\n    return (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, options));\n  }\n  /**\n   * Get ReplicaSet status\n   *\n   * @param options - Optional settings for the command\n   */\n  async replSetGetStatus(options) {\n    return this.command({\n      replSetGetStatus: 1\n    }, options);\n  }\n}\nexports.Admin = Admin;","map":{"version":3,"names":["bson_1","require","execute_operation_1","list_databases_1","remove_user_1","run_command_1","validate_collection_1","Admin","constructor","db","s","command","options","executeOperation","client","RunAdminCommandOperation","resolveBSONOptions","session","readPreference","buildInfo","buildinfo","serverInfo","serverStatus","ping","removeUser","username","RemoveUserOperation","dbName","validateCollection","collectionName","ValidateCollectionOperation","listDatabases","ListDatabasesOperation","replSetGetStatus","exports"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\admin.ts"],"sourcesContent":["import { type Document, resolveBSONOptions } from './bson';\nimport type { Db } from './db';\nimport type { CommandOperationOptions } from './operations/command';\nimport { executeOperation } from './operations/execute_operation';\nimport {\n  ListDatabasesOperation,\n  type ListDatabasesOptions,\n  type ListDatabasesResult\n} from './operations/list_databases';\nimport { RemoveUserOperation, type RemoveUserOptions } from './operations/remove_user';\nimport { RunAdminCommandOperation, type RunCommandOptions } from './operations/run_command';\nimport {\n  ValidateCollectionOperation,\n  type ValidateCollectionOptions\n} from './operations/validate_collection';\n\n/** @internal */\nexport interface AdminPrivate {\n  db: Db;\n}\n\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nexport class Admin {\n  /** @internal */\n  s: AdminPrivate;\n\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db: Db) {\n    this.s = { db };\n  }\n\n  /**\n   * Execute a command\n   *\n   * The driver will ensure the following fields are attached to the command sent to the server:\n   * - `lsid` - sourced from an implicit session or options.session\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n   * - `$db` - sourced from the name of this database\n   *\n   * If the client has a serverApi setting:\n   * - `apiVersion`\n   * - `apiStrict`\n   * - `apiDeprecationErrors`\n   *\n   * When in a transaction:\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n   *\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n   *\n   * @param command - The command to execute\n   * @param options - Optional settings for the command\n   */\n  async command(command: Document, options?: RunCommandOptions): Promise<Document> {\n    return executeOperation(\n      this.s.db.client,\n      new RunAdminCommandOperation(command, {\n        ...resolveBSONOptions(options),\n        session: options?.session,\n        readPreference: options?.readPreference\n      })\n    );\n  }\n\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   */\n  async buildInfo(options?: CommandOperationOptions): Promise<Document> {\n    return this.command({ buildinfo: 1 }, options);\n  }\n\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   */\n  async serverInfo(options?: CommandOperationOptions): Promise<Document> {\n    return this.command({ buildinfo: 1 }, options);\n  }\n\n  /**\n   * Retrieve this db's server status.\n   *\n   * @param options - Optional settings for the command\n   */\n  async serverStatus(options?: CommandOperationOptions): Promise<Document> {\n    return this.command({ serverStatus: 1 }, options);\n  }\n\n  /**\n   * Ping the MongoDB server and retrieve results\n   *\n   * @param options - Optional settings for the command\n   */\n  async ping(options?: CommandOperationOptions): Promise<Document> {\n    return this.command({ ping: 1 }, options);\n  }\n\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n  async removeUser(username: string, options?: RemoveUserOptions): Promise<boolean> {\n    return executeOperation(\n      this.s.db.client,\n      new RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options })\n    );\n  }\n\n  /**\n   * Validate an existing collection\n   *\n   * @param collectionName - The name of the collection to validate.\n   * @param options - Optional settings for the command\n   */\n  async validateCollection(\n    collectionName: string,\n    options: ValidateCollectionOptions = {}\n  ): Promise<Document> {\n    return executeOperation(\n      this.s.db.client,\n      new ValidateCollectionOperation(this, collectionName, options)\n    );\n  }\n\n  /**\n   * List the available databases\n   *\n   * @param options - Optional settings for the command\n   */\n  async listDatabases(options?: ListDatabasesOptions): Promise<ListDatabasesResult> {\n    return executeOperation(this.s.db.client, new ListDatabasesOperation(this.s.db, options));\n  }\n\n  /**\n   * Get ReplicaSet status\n   *\n   * @param options - Optional settings for the command\n   */\n  async replSetGetStatus(options?: CommandOperationOptions): Promise<Document> {\n    return this.command({ replSetGetStatus: 1 }, options);\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AAGA,MAAAC,mBAAA,GAAAD,OAAA;AACA,MAAAE,gBAAA,GAAAF,OAAA;AAKA,MAAAG,aAAA,GAAAH,OAAA;AACA,MAAAI,aAAA,GAAAJ,OAAA;AACA,MAAAK,qBAAA,GAAAL,OAAA;AAUA;;;;;;;;;;;;;;;;;;;AAmBA,MAAaM,KAAK;EAIhB;;;;EAIAC,YAAYC,EAAM;IAChB,IAAI,CAACC,CAAC,GAAG;MAAED;IAAE,CAAE;EACjB;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBA,MAAME,OAAOA,CAACA,OAAiB,EAAEC,OAA2B;IAC1D,OAAO,IAAAV,mBAAA,CAAAW,gBAAgB,EACrB,IAAI,CAACH,CAAC,CAACD,EAAE,CAACK,MAAM,EAChB,IAAIT,aAAA,CAAAU,wBAAwB,CAACJ,OAAO,EAAE;MACpC,GAAG,IAAAX,MAAA,CAAAgB,kBAAkB,EAACJ,OAAO,CAAC;MAC9BK,OAAO,EAAEL,OAAO,EAAEK,OAAO;MACzBC,cAAc,EAAEN,OAAO,EAAEM;KAC1B,CAAC,CACH;EACH;EAEA;;;;;EAKA,MAAMC,SAASA,CAACP,OAAiC;IAC/C,OAAO,IAAI,CAACD,OAAO,CAAC;MAAES,SAAS,EAAE;IAAC,CAAE,EAAER,OAAO,CAAC;EAChD;EAEA;;;;;EAKA,MAAMS,UAAUA,CAACT,OAAiC;IAChD,OAAO,IAAI,CAACD,OAAO,CAAC;MAAES,SAAS,EAAE;IAAC,CAAE,EAAER,OAAO,CAAC;EAChD;EAEA;;;;;EAKA,MAAMU,YAAYA,CAACV,OAAiC;IAClD,OAAO,IAAI,CAACD,OAAO,CAAC;MAAEW,YAAY,EAAE;IAAC,CAAE,EAAEV,OAAO,CAAC;EACnD;EAEA;;;;;EAKA,MAAMW,IAAIA,CAACX,OAAiC;IAC1C,OAAO,IAAI,CAACD,OAAO,CAAC;MAAEY,IAAI,EAAE;IAAC,CAAE,EAAEX,OAAO,CAAC;EAC3C;EAEA;;;;;;EAMA,MAAMY,UAAUA,CAACC,QAAgB,EAAEb,OAA2B;IAC5D,OAAO,IAAAV,mBAAA,CAAAW,gBAAgB,EACrB,IAAI,CAACH,CAAC,CAACD,EAAE,CAACK,MAAM,EAChB,IAAIV,aAAA,CAAAsB,mBAAmB,CAAC,IAAI,CAAChB,CAAC,CAACD,EAAE,EAAEgB,QAAQ,EAAE;MAAEE,MAAM,EAAE,OAAO;MAAE,GAAGf;IAAO,CAAE,CAAC,CAC9E;EACH;EAEA;;;;;;EAMA,MAAMgB,kBAAkBA,CACtBC,cAAsB,EACtBjB,OAAA,GAAqC,EAAE;IAEvC,OAAO,IAAAV,mBAAA,CAAAW,gBAAgB,EACrB,IAAI,CAACH,CAAC,CAACD,EAAE,CAACK,MAAM,EAChB,IAAIR,qBAAA,CAAAwB,2BAA2B,CAAC,IAAI,EAAED,cAAc,EAAEjB,OAAO,CAAC,CAC/D;EACH;EAEA;;;;;EAKA,MAAMmB,aAAaA,CAACnB,OAA8B;IAChD,OAAO,IAAAV,mBAAA,CAAAW,gBAAgB,EAAC,IAAI,CAACH,CAAC,CAACD,EAAE,CAACK,MAAM,EAAE,IAAIX,gBAAA,CAAA6B,sBAAsB,CAAC,IAAI,CAACtB,CAAC,CAACD,EAAE,EAAEG,OAAO,CAAC,CAAC;EAC3F;EAEA;;;;;EAKA,MAAMqB,gBAAgBA,CAACrB,OAAiC;IACtD,OAAO,IAAI,CAACD,OAAO,CAAC;MAAEsB,gBAAgB,EAAE;IAAC,CAAE,EAAErB,OAAO,CAAC;EACvD;;AA9HFsB,OAAA,CAAA3B,KAAA,GAAAA,KAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}