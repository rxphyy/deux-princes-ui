{"ast":null,"code":"\"use strict\";\n\nconst punycode = require(\"punycode\");\nconst regexes = require(\"./lib/regexes.js\");\nconst mappingTable = require(\"./lib/mappingTable.json\");\nconst {\n  STATUS_MAPPING\n} = require(\"./lib/statusMapping.js\");\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/u.test(str);\n}\nfunction findStatus(val, {\n  useSTD3ASCIIRules\n}) {\n  let start = 0;\n  let end = mappingTable.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    const target = mappingTable[mid];\n    const min = Array.isArray(target[0]) ? target[0][0] : target[0];\n    const max = Array.isArray(target[0]) ? target[0][1] : target[0];\n    if (min <= val && max >= val) {\n      if (useSTD3ASCIIRules && (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {\n        return [STATUS_MAPPING.disallowed, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {\n        return [STATUS_MAPPING.valid, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {\n        return [STATUS_MAPPING.mapped, ...target.slice(2)];\n      }\n      return target.slice(1);\n    } else if (min > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  return null;\n}\nfunction mapChars(domainName, {\n  useSTD3ASCIIRules,\n  processingOption\n}) {\n  let hasError = false;\n  let processed = \"\";\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0), {\n      useSTD3ASCIIRules\n    });\n    switch (status) {\n      case STATUS_MAPPING.disallowed:\n        hasError = true;\n        processed += ch;\n        break;\n      case STATUS_MAPPING.ignored:\n        break;\n      case STATUS_MAPPING.mapped:\n        processed += mapping;\n        break;\n      case STATUS_MAPPING.deviation:\n        if (processingOption === \"transitional\") {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n        break;\n      case STATUS_MAPPING.valid:\n        processed += ch;\n        break;\n    }\n  }\n  return {\n    string: processed,\n    error: hasError\n  };\n}\nfunction validateLabel(label, {\n  checkHyphens,\n  checkBidi,\n  checkJoiners,\n  processingOption,\n  useSTD3ASCIIRules\n}) {\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n  const codePoints = Array.from(label);\n  if (checkHyphens) {\n    if (codePoints[2] === \"-\" && codePoints[3] === \"-\" || label.startsWith(\"-\") || label.endsWith(\"-\")) {\n      return false;\n    }\n  }\n  if (label.includes(\".\") || codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0])) {\n    return false;\n  }\n  for (const ch of codePoints) {\n    const [status] = findStatus(ch.codePointAt(0), {\n      useSTD3ASCIIRules\n    });\n    if (processingOption === \"transitional\" && status !== STATUS_MAPPING.valid || processingOption === \"nontransitional\" && status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation) {\n      return false;\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    let last = 0;\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n        return false;\n      }\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi) {\n    let rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {\n      // 5-6\n      return false;\n    }\n  }\n  return true;\n}\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\nfunction processing(domainName, options) {\n  const {\n    processingOption\n  } = options;\n\n  // 1. Map.\n  let {\n    string,\n    error\n  } = mapChars(domainName, options);\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let curProcessing = processingOption;\n    if (label.startsWith(\"xn--\")) {\n      try {\n        label = punycode.decode(label.substring(4));\n        labels[i] = label;\n      } catch (err) {\n        error = true;\n        continue;\n      }\n      curProcessing = \"nontransitional\";\n    }\n\n    // No need to validate if we already know there is an error.\n    if (error) {\n      continue;\n    }\n    const validation = validateLabel(label, {\n      ...options,\n      processingOption: curProcessing,\n      checkBidi: options.checkBidi && isBidi\n    });\n    if (!validation) {\n      error = true;\n    }\n  }\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\nfunction toASCII(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\",\n  verifyDNSLength = false\n} = {}) {\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return `xn--${punycode.encode(l)}`;\n      } catch (e) {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\nfunction toUnicode(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\"\n} = {}) {\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\nmodule.exports = {\n  toASCII,\n  toUnicode\n};","map":{"version":3,"names":["punycode","require","regexes","mappingTable","STATUS_MAPPING","containsNonASCII","str","test","findStatus","val","useSTD3ASCIIRules","start","end","length","mid","Math","floor","target","min","Array","isArray","max","disallowed_STD3_valid","disallowed_STD3_mapped","disallowed","slice","valid","mapped","mapChars","domainName","processingOption","hasError","processed","ch","status","mapping","codePointAt","ignored","deviation","string","error","validateLabel","label","checkHyphens","checkBidi","checkJoiners","normalize","codePoints","from","startsWith","endsWith","includes","combiningMarks","last","i","entries","combiningClassVirama","next","indexOf","validZWNJ","join","rtl","bidiS1LTR","bidiS1RTL","bidiS2","bidiS3","bidiS4EN","bidiS4AN","bidiS5","bidiS6","isBidiDomain","labels","domain","map","decode","substring","err","bidiDomain","processing","options","split","isBidi","origLabel","curProcessing","validation","toASCII","verifyDNSLength","RangeError","result","l","encode","e","total","toUnicode","module","exports"],"sources":["C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/mongodb-connection-string-url/node_modules/tr46/index.js"],"sourcesContent":["\"use strict\";\n\nconst punycode = require(\"punycode\");\nconst regexes = require(\"./lib/regexes.js\");\nconst mappingTable = require(\"./lib/mappingTable.json\");\nconst { STATUS_MAPPING } = require(\"./lib/statusMapping.js\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/u.test(str);\n}\n\nfunction findStatus(val, { useSTD3ASCIIRules }) {\n  let start = 0;\n  let end = mappingTable.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n\n    const target = mappingTable[mid];\n    const min = Array.isArray(target[0]) ? target[0][0] : target[0];\n    const max = Array.isArray(target[0]) ? target[0][1] : target[0];\n\n    if (min <= val && max >= val) {\n      if (useSTD3ASCIIRules &&\n          (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {\n        return [STATUS_MAPPING.disallowed, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {\n        return [STATUS_MAPPING.valid, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {\n        return [STATUS_MAPPING.mapped, ...target.slice(2)];\n      }\n\n      return target.slice(1);\n    } else if (min > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, { useSTD3ASCIIRules, processingOption }) {\n  let hasError = false;\n  let processed = \"\";\n\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n\n    switch (status) {\n      case STATUS_MAPPING.disallowed:\n        hasError = true;\n        processed += ch;\n        break;\n      case STATUS_MAPPING.ignored:\n        break;\n      case STATUS_MAPPING.mapped:\n        processed += mapping;\n        break;\n      case STATUS_MAPPING.deviation:\n        if (processingOption === \"transitional\") {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n        break;\n      case STATUS_MAPPING.valid:\n        processed += ch;\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nfunction validateLabel(label, { checkHyphens, checkBidi, checkJoiners, processingOption, useSTD3ASCIIRules }) {\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  const codePoints = Array.from(label);\n\n  if (checkHyphens) {\n    if ((codePoints[2] === \"-\" && codePoints[3] === \"-\") ||\n        (label.startsWith(\"-\") || label.endsWith(\"-\"))) {\n      return false;\n    }\n  }\n\n  if (label.includes(\".\") ||\n      (codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0]))) {\n    return false;\n  }\n\n  for (const ch of codePoints) {\n    const [status] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n    if ((processingOption === \"transitional\" && status !== STATUS_MAPPING.valid) ||\n        (processingOption === \"nontransitional\" &&\n         status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation)) {\n      return false;\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    let last = 0;\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n        return false;\n      }\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi) {\n    let rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) ||\n          !regexes.bidiS3.test(label) ||\n          (regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label))) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) ||\n               !regexes.bidiS6.test(label)) { // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  const { processingOption } = options;\n\n  // 1. Map.\n  let { string, error } = mapChars(domainName, options);\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let curProcessing = processingOption;\n    if (label.startsWith(\"xn--\")) {\n      try {\n        label = punycode.decode(label.substring(4));\n        labels[i] = label;\n      } catch (err) {\n        error = true;\n        continue;\n      }\n      curProcessing = \"nontransitional\";\n    }\n\n    // No need to validate if we already know there is an error.\n    if (error) {\n      continue;\n    }\n    const validation = validateLabel(label, {\n      ...options,\n      processingOption: curProcessing,\n      checkBidi: options.checkBidi && isBidi\n    });\n    if (!validation) {\n      error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\n\nfunction toASCII(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\",\n  verifyDNSLength = false\n} = {}) {\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return `xn--${punycode.encode(l)}`;\n      } catch (e) {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\"\n} = {}) {\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII,\n  toUnicode\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}