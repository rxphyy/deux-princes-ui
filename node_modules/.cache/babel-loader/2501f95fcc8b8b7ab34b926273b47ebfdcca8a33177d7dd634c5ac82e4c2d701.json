{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nvar dns = require(\"dns\");\nvar timers_1 = require(\"timers\");\nvar error_1 = require(\"../error\");\nvar mongo_types_1 = require(\"../mongo_types\");\nvar utils_1 = require(\"../utils\");\n/**\n * @internal\n * @category Event\n */\nvar SrvPollingEvent = /*#__PURE__*/function () {\n  function SrvPollingEvent(srvRecords) {\n    _classCallCheck(this, SrvPollingEvent);\n    this.srvRecords = srvRecords;\n  }\n  _createClass(SrvPollingEvent, [{\n    key: \"hostnames\",\n    value: function hostnames() {\n      return new Set(this.srvRecords.map(function (r) {\n        return utils_1.HostAddress.fromSrvRecord(r).toString();\n      }));\n    }\n  }]);\n  return SrvPollingEvent;\n}();\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nvar SrvPoller = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(SrvPoller, _mongo_types_1$TypedE);\n  var _super = _createSuper(SrvPoller);\n  function SrvPoller(options) {\n    var _options$srvMaxHosts, _options$srvServiceNa, _options$heartbeatFre;\n    var _this;\n    _classCallCheck(this, SrvPoller);\n    _this = _super.call(this);\n    if (!options || !options.srvHost) {\n      throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n    _this.srvHost = options.srvHost;\n    _this.srvMaxHosts = (_options$srvMaxHosts = options.srvMaxHosts) !== null && _options$srvMaxHosts !== void 0 ? _options$srvMaxHosts : 0;\n    _this.srvServiceName = (_options$srvServiceNa = options.srvServiceName) !== null && _options$srvServiceNa !== void 0 ? _options$srvServiceNa : 'mongodb';\n    _this.rescanSrvIntervalMS = 60000;\n    _this.heartbeatFrequencyMS = (_options$heartbeatFre = options.heartbeatFrequencyMS) !== null && _options$heartbeatFre !== void 0 ? _options$heartbeatFre : 10000;\n    _this.haMode = false;\n    _this.generation = 0;\n    _this._timeout = undefined;\n    return _this;\n  }\n  _createClass(SrvPoller, [{\n    key: \"srvAddress\",\n    get: function get() {\n      return \"_\".concat(this.srvServiceName, \"._tcp.\").concat(this.srvHost);\n    }\n  }, {\n    key: \"intervalMS\",\n    get: function get() {\n      return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (!this._timeout) {\n        this.schedule();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._timeout) {\n        (0, timers_1.clearTimeout)(this._timeout);\n        this.generation += 1;\n        this._timeout = undefined;\n      }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n  }, {\n    key: \"schedule\",\n    value: function schedule() {\n      var _this2 = this;\n      if (this._timeout) {\n        (0, timers_1.clearTimeout)(this._timeout);\n      }\n      this._timeout = (0, timers_1.setTimeout)(function () {\n        _this2._poll().catch(function () {\n          return null;\n        });\n      }, this.intervalMS);\n    }\n  }, {\n    key: \"success\",\n    value: function success(srvRecords) {\n      this.haMode = false;\n      this.schedule();\n      this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n  }, {\n    key: \"failure\",\n    value: function failure() {\n      this.haMode = true;\n      this.schedule();\n    }\n  }, {\n    key: \"_poll\",\n    value: function () {\n      var _poll2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var generation, srvRecords, finalAddresses, _iterator, _step, record;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              generation = this.generation;\n              _context.prev = 1;\n              _context.next = 4;\n              return dns.promises.resolveSrv(this.srvAddress);\n            case 4:\n              srvRecords = _context.sent;\n              _context.next = 11;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              this.failure();\n              return _context.abrupt(\"return\");\n            case 11:\n              if (!(generation !== this.generation)) {\n                _context.next = 13;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 13:\n              finalAddresses = [];\n              _iterator = _createForOfIteratorHelper(srvRecords);\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  record = _step.value;\n                  if ((0, utils_1.matchesParentDomain)(record.name, this.srvHost)) {\n                    finalAddresses.push(record);\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n              if (finalAddresses.length) {\n                _context.next = 19;\n                break;\n              }\n              this.failure();\n              return _context.abrupt(\"return\");\n            case 19:\n              this.success(finalAddresses);\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n      function _poll() {\n        return _poll2.apply(this, arguments);\n      }\n      return _poll;\n    }()\n  }]);\n  return SrvPoller;\n}(mongo_types_1.TypedEventEmitter);\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\nexports.SrvPoller = SrvPoller;","map":{"version":3,"names":["dns","require","timers_1","error_1","mongo_types_1","utils_1","SrvPollingEvent","srvRecords","_classCallCheck","_createClass","key","value","hostnames","Set","map","r","HostAddress","fromSrvRecord","toString","exports","SrvPoller","_mongo_types_1$TypedE","_inherits","_super","_createSuper","options","_options$srvMaxHosts","_options$srvServiceNa","_options$heartbeatFre","_this","call","srvHost","MongoRuntimeError","srvMaxHosts","srvServiceName","rescanSrvIntervalMS","heartbeatFrequencyMS","haMode","generation","_timeout","undefined","get","concat","start","schedule","stop","clearTimeout","_this2","setTimeout","_poll","catch","intervalMS","success","emit","SRV_RECORD_DISCOVERY","failure","_poll2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","finalAddresses","_iterator","_step","record","wrap","_callee$","_context","prev","next","promises","resolveSrv","srvAddress","sent","t0","abrupt","_createForOfIteratorHelper","s","n","done","matchesParentDomain","name","push","err","e","f","length","apply","arguments","TypedEventEmitter"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\sdam\\srv_polling.ts"],"sourcesContent":["import * as dns from 'dns';\nimport { clearTimeout, setTimeout } from 'timers';\n\nimport { MongoRuntimeError } from '../error';\nimport { TypedEventEmitter } from '../mongo_types';\nimport { HostAddress, matchesParentDomain } from '../utils';\n\n/**\n * @internal\n * @category Event\n */\nexport class SrvPollingEvent {\n  srvRecords: dns.SrvRecord[];\n  constructor(srvRecords: dns.SrvRecord[]) {\n    this.srvRecords = srvRecords;\n  }\n\n  hostnames(): Set<string> {\n    return new Set(this.srvRecords.map(r => HostAddress.fromSrvRecord(r).toString()));\n  }\n}\n\n/** @internal */\nexport interface SrvPollerOptions {\n  srvServiceName: string;\n  srvMaxHosts: number;\n  srvHost: string;\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport type SrvPollerEvents = {\n  srvRecordDiscovery(event: SrvPollingEvent): void;\n};\n\n/** @internal */\nexport class SrvPoller extends TypedEventEmitter<SrvPollerEvents> {\n  srvHost: string;\n  rescanSrvIntervalMS: number;\n  heartbeatFrequencyMS: number;\n  haMode: boolean;\n  generation: number;\n  srvMaxHosts: number;\n  srvServiceName: string;\n  _timeout?: NodeJS.Timeout;\n\n  /** @event */\n  static readonly SRV_RECORD_DISCOVERY = 'srvRecordDiscovery' as const;\n\n  constructor(options: SrvPollerOptions) {\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = options.srvMaxHosts ?? 0;\n    this.srvServiceName = options.srvServiceName ?? 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n\n    this.haMode = false;\n    this.generation = 0;\n\n    this._timeout = undefined;\n  }\n\n  get srvAddress(): string {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS(): number {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start(): void {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop(): void {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  }\n\n  // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n  schedule(): void {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    this._timeout = setTimeout(() => {\n      this._poll().catch(() => null);\n    }, this.intervalMS);\n  }\n\n  success(srvRecords: dns.SrvRecord[]): void {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n\n  failure(): void {\n    this.haMode = true;\n    this.schedule();\n  }\n\n  async _poll(): Promise<void> {\n    const generation = this.generation;\n    let srvRecords;\n\n    try {\n      srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n    } catch (dnsError) {\n      this.failure();\n      return;\n    }\n\n    if (generation !== this.generation) {\n      return;\n    }\n\n    const finalAddresses: dns.SrvRecord[] = [];\n    for (const record of srvRecords) {\n      if (matchesParentDomain(record.name, this.srvHost)) {\n        finalAddresses.push(record);\n      }\n    }\n\n    if (!finalAddresses.length) {\n      this.failure();\n      return;\n    }\n\n    this.success(finalAddresses);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}