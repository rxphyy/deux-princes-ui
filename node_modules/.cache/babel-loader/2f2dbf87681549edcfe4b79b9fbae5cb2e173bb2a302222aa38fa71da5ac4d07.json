{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.get = void 0;\nconst http = require(\"http\");\nconst timers_1 = require(\"timers\");\nconst errors_1 = require(\"../errors\");\n/**\n * @internal\n */\nfunction get(url, options = {}) {\n  return new Promise((resolve, reject) => {\n    /* eslint-disable prefer-const */\n    let timeoutId;\n    const request = http.get(url, options, response => {\n      response.setEncoding('utf8');\n      let body = '';\n      response.on('data', chunk => body += chunk);\n      response.on('end', () => {\n        (0, timers_1.clearTimeout)(timeoutId);\n        resolve({\n          status: response.statusCode,\n          body\n        });\n      });\n    }).on('error', error => {\n      (0, timers_1.clearTimeout)(timeoutId);\n      reject(error);\n    }).end();\n    timeoutId = (0, timers_1.setTimeout)(() => {\n      request.destroy(new errors_1.MongoCryptKMSRequestNetworkTimeoutError(`request timed out after 10 seconds`));\n    }, 10000);\n  });\n}\nexports.get = get;","map":{"version":3,"names":["http","require","timers_1","errors_1","get","url","options","Promise","resolve","reject","timeoutId","request","response","setEncoding","body","on","chunk","clearTimeout","status","statusCode","error","end","setTimeout","destroy","MongoCryptKMSRequestNetworkTimeoutError","exports"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\client-side-encryption\\providers\\utils.ts"],"sourcesContent":["import * as http from 'http';\nimport { clearTimeout, setTimeout } from 'timers';\n\nimport { MongoCryptKMSRequestNetworkTimeoutError } from '../errors';\n\n/**\n * @internal\n */\nexport function get(\n  url: URL | string,\n  options: http.RequestOptions = {}\n): Promise<{ body: string; status: number | undefined }> {\n  return new Promise((resolve, reject) => {\n    /* eslint-disable prefer-const */\n    let timeoutId: NodeJS.Timeout;\n    const request = http\n      .get(url, options, response => {\n        response.setEncoding('utf8');\n        let body = '';\n        response.on('data', chunk => (body += chunk));\n        response.on('end', () => {\n          clearTimeout(timeoutId);\n          resolve({ status: response.statusCode, body });\n        });\n      })\n      .on('error', error => {\n        clearTimeout(timeoutId);\n        reject(error);\n      })\n      .end();\n    timeoutId = setTimeout(() => {\n      request.destroy(\n        new MongoCryptKMSRequestNetworkTimeoutError(`request timed out after 10 seconds`)\n      );\n    }, 10000);\n  });\n}\n"],"mappings":";;;;;;AAAA,MAAAA,IAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AAEA,MAAAE,QAAA,GAAAF,OAAA;AAEA;;;AAGA,SAAgBG,GAAGA,CACjBC,GAAiB,EACjBC,OAAA,GAA+B,EAAE;EAEjC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;IACrC;IACA,IAAIC,SAAyB;IAC7B,MAAMC,OAAO,GAAGX,IAAI,CACjBI,GAAG,CAACC,GAAG,EAAEC,OAAO,EAAEM,QAAQ,IAAG;MAC5BA,QAAQ,CAACC,WAAW,CAAC,MAAM,CAAC;MAC5B,IAAIC,IAAI,GAAG,EAAE;MACbF,QAAQ,CAACG,EAAE,CAAC,MAAM,EAAEC,KAAK,IAAKF,IAAI,IAAIE,KAAM,CAAC;MAC7CJ,QAAQ,CAACG,EAAE,CAAC,KAAK,EAAE,MAAK;QACtB,IAAAb,QAAA,CAAAe,YAAY,EAACP,SAAS,CAAC;QACvBF,OAAO,CAAC;UAAEU,MAAM,EAAEN,QAAQ,CAACO,UAAU;UAAEL;QAAI,CAAE,CAAC;MAChD,CAAC,CAAC;IACJ,CAAC,CAAC,CACDC,EAAE,CAAC,OAAO,EAAEK,KAAK,IAAG;MACnB,IAAAlB,QAAA,CAAAe,YAAY,EAACP,SAAS,CAAC;MACvBD,MAAM,CAACW,KAAK,CAAC;IACf,CAAC,CAAC,CACDC,GAAG,EAAE;IACRX,SAAS,GAAG,IAAAR,QAAA,CAAAoB,UAAU,EAAC,MAAK;MAC1BX,OAAO,CAACY,OAAO,CACb,IAAIpB,QAAA,CAAAqB,uCAAuC,CAAC,oCAAoC,CAAC,CAClF;IACH,CAAC,EAAE,KAAK,CAAC;EACX,CAAC,CAAC;AACJ;AA5BAC,OAAA,CAAArB,GAAA,GAAAA,GAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}