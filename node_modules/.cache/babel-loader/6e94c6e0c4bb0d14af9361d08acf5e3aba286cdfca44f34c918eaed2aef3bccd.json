{"ast":null,"code":"import { MongoClient, ServerApiVersion } from 'mongodb';\nimport { config } from 'dotenv';\nconfig({\n  path: '../.env'\n});\nconst uri = process.env.MONGODB_CONNECTION_STRING;\nconst initializeDbClient = async () => {\n  // Create a MongoClient with a MongoClientOptions object to set the Stable API version\n  const client = new MongoClient(uri, {\n    serverApi: {\n      version: ServerApiVersion.v1,\n      strict: true,\n      deprecationErrors: true\n    }\n  });\n  try {\n    await client.connect();\n    console.log(\"Connected to MongoDB.\");\n    return client;\n  } catch (error) {\n    console.error(\"Error connecting to MongoDB:\", error);\n    throw error; // Re-throw the error to handle it further up the call stack\n  }\n};\n\nconst client = await initializeDbClient();\nconst collectionExists = async (dbName, collectionName) => {\n  const collections = await client.db(dbName).listCollections({\n    name: collectionName\n  }).toArray();\n  return collections.length > 0;\n};\nasync function saveItemToCollection(collectionName, item) {\n  return await client.db(\"deuxPrinces\").collection(collectionName).insertOne(item);\n}\nasync function saveItemsToCollection(collectionName, items) {\n  if (!(await collectionExists('deuxPrinces', collectionName))) {\n    await client.db(\"deuxPrinces\").collection(collectionName).insertMany(items);\n    return true;\n  }\n  return false;\n}\nconst fetchItemsByQuery = async query => {\n  const allCollections = await client.db('deuxPrinces').listCollections().toArray();\n  const result = {};\n  for (const collection of allCollections) {\n    const collectionName = collection.name;\n    const items = await client.db('deuxPrinces').collection(collectionName).find({\n      text: {\n        $regex: query,\n        $options: 'i'\n      }\n    }).project({\n      _id: 1,\n      startTime: 1,\n      text: 1\n    }).toArray();\n    if (items.length > 0) {\n      result[collectionName] = items;\n    }\n  }\n  return result;\n};\nconst fetchItemsByQuery2 = async query => {\n  const allCollections = await client.db('deuxPrinces').listCollections().toArray();\n  const result = [];\n  for (const collection of allCollections) {\n    const collectionName = collection.name;\n    const items = await client.db('deuxPrinces').collection(collectionName).find({\n      text: {\n        $regex: query,\n        $options: 'i'\n      }\n    }).project({\n      _id: 1,\n      startTime: 1,\n      text: 1\n    }).toArray();\n    result.push({\n      id: collectionName,\n      captions: items\n    });\n    if (items.length > 0) {\n      result.push({\n        id: collectionName,\n        captions: items\n      });\n    }\n  }\n  return result;\n};\n\n// Function to check if a video is already in the subtitles collection\nasync function isVideoInCollection(videoId, collection) {\n  const video = await client.db('deuxPrinces').collection(collection).findOne({\n    videoId\n  });\n  return !!video; // Returns true if the video is found in the collection\n}\n\nconst searchSubtitles = async query => {\n  try {\n    await client.connect();\n    const database = client.db('deuxPrinces');\n    const subtitlesCollection = database.collection('subtitles');\n    const cursor = subtitlesCollection.aggregate([{\n      $match: {\n        'captions.text': {\n          $regex: query,\n          $options: 'i'\n        } // Case-insensitive search\n      }\n    }, {\n      $addFields: {\n        captions: {\n          $filter: {\n            input: '$captions',\n            as: 'caption',\n            cond: {\n              $regexMatch: {\n                input: '$$caption.text',\n                regex: query,\n                options: 'i' // Case-insensitive search\n              }\n            }\n          }\n        }\n      }\n    }]);\n\n    const results = await cursor.toArray();\n    return results;\n  } finally {\n    client.close();\n  }\n};\nexport { initializeDbClient, saveItemToCollection, saveItemsToCollection, fetchItemsByQuery, fetchItemsByQuery2, searchSubtitles, isVideoInCollection };","map":{"version":3,"names":["MongoClient","ServerApiVersion","config","path","uri","process","env","MONGODB_CONNECTION_STRING","initializeDbClient","client","serverApi","version","v1","strict","deprecationErrors","connect","console","log","error","collectionExists","dbName","collectionName","collections","db","listCollections","name","toArray","length","saveItemToCollection","item","collection","insertOne","saveItemsToCollection","items","insertMany","fetchItemsByQuery","query","allCollections","result","find","text","$regex","$options","project","_id","startTime","fetchItemsByQuery2","push","id","captions","isVideoInCollection","videoId","video","findOne","searchSubtitles","database","subtitlesCollection","cursor","aggregate","$match","$addFields","$filter","input","as","cond","$regexMatch","regex","options","results","close"],"sources":["C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/src/dbManager.js"],"sourcesContent":["import { MongoClient, ServerApiVersion } from 'mongodb';\r\nimport { config } from 'dotenv';\r\nconfig({ path: '../.env' });\r\nconst uri = process.env.MONGODB_CONNECTION_STRING;\r\n\r\nconst initializeDbClient = async () => {\r\n  // Create a MongoClient with a MongoClientOptions object to set the Stable API version\r\n  const client = new MongoClient(uri, {\r\n    serverApi: {\r\n      version: ServerApiVersion.v1,\r\n      strict: true,\r\n      deprecationErrors: true,\r\n    }\r\n  });\r\n  \r\n  try {\r\n    await client.connect();\r\n    console.log(\"Connected to MongoDB.\");\r\n    return client;\r\n  } catch (error) {\r\n    console.error(\"Error connecting to MongoDB:\", error);\r\n    throw error; // Re-throw the error to handle it further up the call stack\r\n  }\r\n}\r\n\r\nconst client = await initializeDbClient();\r\n\r\nconst collectionExists = async (dbName, collectionName) => {\r\n  const collections = await client.db(dbName).listCollections({ name: collectionName }).toArray();\r\n  return collections.length > 0;\r\n};\r\n\r\nasync function saveItemToCollection(collectionName, item) {\r\n  return await client.db(\"deuxPrinces\").collection(collectionName).insertOne(item);\r\n}\r\n\r\nasync function saveItemsToCollection(collectionName, items) {\r\n  if (!await collectionExists('deuxPrinces', collectionName)) {\r\n    await client.db(\"deuxPrinces\").collection(collectionName).insertMany(items);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nconst fetchItemsByQuery = async (query) => {\r\n  const allCollections = await client.db('deuxPrinces').listCollections().toArray();\r\n  const result = {};\r\n\r\n  for (const collection of allCollections) {\r\n    const collectionName = collection.name;\r\n    const items = await client.db('deuxPrinces').collection(collectionName)\r\n      .find({ text: { $regex: query, $options: 'i' } })\r\n      .project({ _id: 1, startTime: 1, text: 1 })\r\n      .toArray();\r\n\r\n    if (items.length > 0) {\r\n      result[collectionName] = items;\r\n    }\r\n  }\r\n  \r\n  return result;\r\n};\r\n\r\n\r\n\r\nconst fetchItemsByQuery2 = async (query) => {\r\n  const allCollections = await client.db('deuxPrinces').listCollections().toArray();\r\n  const result = [];\r\n\r\n  for (const collection of allCollections) {\r\n    const collectionName = collection.name;\r\n    const items = await client.db('deuxPrinces').collection(collectionName)\r\n      .find({ text: { $regex: query, $options: 'i' } })\r\n      .project({ _id: 1, startTime: 1, text: 1 })\r\n      .toArray();\r\n\r\n    result.push({\r\n      id: collectionName,\r\n      captions: items\r\n    })\r\n\r\n    if (items.length > 0) {\r\n      result.push({\r\n        id: collectionName,\r\n        captions: items\r\n      })\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n\r\n// Function to check if a video is already in the subtitles collection\r\nasync function isVideoInCollection(videoId, collection) {\r\n  const video = await client.db('deuxPrinces').collection(collection).findOne({ videoId });\r\n  return !!video; // Returns true if the video is found in the collection\r\n}\r\n\r\n\r\n\r\nconst searchSubtitles = async (query) => {\r\n  try {\r\n    await client.connect();\r\n    const database = client.db('deuxPrinces');\r\n    const subtitlesCollection = database.collection('subtitles');\r\n\r\n    const cursor = subtitlesCollection.aggregate([\r\n      {\r\n        $match: {\r\n          'captions.text': { $regex: query, $options: 'i' }, // Case-insensitive search\r\n        },\r\n      },\r\n      {\r\n        $addFields: {\r\n          captions: {\r\n            $filter: {\r\n              input: '$captions',\r\n              as: 'caption',\r\n              cond: {\r\n                $regexMatch: {\r\n                  input: '$$caption.text',\r\n                  regex: query,\r\n                  options: 'i', // Case-insensitive search\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    ]);\r\n\r\n    const results = await cursor.toArray();\r\n    return results;\r\n  } finally {\r\n    client.close();\r\n  }\r\n};\r\n\r\n\r\n\r\nexport { initializeDbClient,\r\n        saveItemToCollection,\r\n        saveItemsToCollection,\r\n      fetchItemsByQuery,\r\n    fetchItemsByQuery2,\r\n  searchSubtitles,\r\n  isVideoInCollection };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}