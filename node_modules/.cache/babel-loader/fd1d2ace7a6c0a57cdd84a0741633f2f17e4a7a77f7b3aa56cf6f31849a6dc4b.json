{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nvar error_1 = require(\"../error\");\nvar utils_1 = require(\"../utils\");\nvar command_1 = require(\"./command\");\nvar operation_1 = require(\"./operation\");\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */\nvar UpdateOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(UpdateOperation, _command_1$CommandOpe);\n  var _super = _createSuper(UpdateOperation);\n  function UpdateOperation(ns, statements, options) {\n    var _this;\n    _classCallCheck(this, UpdateOperation);\n    _this = _super.call(this, undefined, options);\n    _this.options = options;\n    _this.ns = ns;\n    _this.statements = statements;\n    return _this;\n  }\n  _createClass(UpdateOperation, [{\n    key: \"canRetryWrite\",\n    get: function get() {\n      if (_get(_getPrototypeOf(UpdateOperation.prototype), \"canRetryWrite\", this) === false) {\n        return false;\n      }\n      return this.statements.every(function (op) {\n        return op.multi == null || op.multi === false;\n      });\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(server, session) {\n        var _this$options;\n        var options, ordered, command, unacknowledgedWrite;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              options = (_this$options = this.options) !== null && _this$options !== void 0 ? _this$options : {};\n              ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n              command = {\n                update: this.ns.collection,\n                updates: this.statements,\n                ordered: ordered\n              };\n              if (typeof options.bypassDocumentValidation === 'boolean') {\n                command.bypassDocumentValidation = options.bypassDocumentValidation;\n              }\n              if (options.let) {\n                command.let = options.let;\n              }\n              // we check for undefined specifically here to allow falsy values\n              // eslint-disable-next-line no-restricted-syntax\n              if (options.comment !== undefined) {\n                command.comment = options.comment;\n              }\n              unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n              if (!unacknowledgedWrite) {\n                _context.next = 10;\n                break;\n              }\n              if (!this.statements.find(function (o) {\n                return o.hint;\n              })) {\n                _context.next = 10;\n                break;\n              }\n              throw new error_1.MongoCompatibilityError(\"hint is not supported with unacknowledged writes\");\n            case 10:\n              return _context.abrupt(\"return\", _get(_getPrototypeOf(UpdateOperation.prototype), \"executeCommand\", this).call(this, server, session, command));\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function execute(_x, _x2) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return UpdateOperation;\n}(command_1.CommandOperation);\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nvar UpdateOneOperation = /*#__PURE__*/function (_UpdateOperation) {\n  _inherits(UpdateOneOperation, _UpdateOperation);\n  var _super2 = _createSuper(UpdateOneOperation);\n  function UpdateOneOperation(collection, filter, update, options) {\n    var _this2;\n    _classCallCheck(this, UpdateOneOperation);\n    _this2 = _super2.call(this, collection.s.namespace, [makeUpdateStatement(filter, update, _objectSpread(_objectSpread({}, options), {}, {\n      multi: false\n    }))], options);\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    return _this2;\n  }\n  _createClass(UpdateOneOperation, [{\n    key: \"execute\",\n    value: function () {\n      var _execute2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(server, session) {\n        var _this$writeConcern, _res$nModified;\n        var res;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _get(_getPrototypeOf(UpdateOneOperation.prototype), \"execute\", this).call(this, server, session);\n            case 2:\n              res = _context2.sent;\n              if (!(this.explain != null)) {\n                _context2.next = 5;\n                break;\n              }\n              return _context2.abrupt(\"return\", res);\n            case 5:\n              if (!res.code) {\n                _context2.next = 7;\n                break;\n              }\n              throw new error_1.MongoServerError(res);\n            case 7:\n              if (!res.writeErrors) {\n                _context2.next = 9;\n                break;\n              }\n              throw new error_1.MongoServerError(res.writeErrors[0]);\n            case 9:\n              return _context2.abrupt(\"return\", {\n                acknowledged: ((_this$writeConcern = this.writeConcern) === null || _this$writeConcern === void 0 ? void 0 : _this$writeConcern.w) !== 0,\n                modifiedCount: (_res$nModified = res.nModified) !== null && _res$nModified !== void 0 ? _res$nModified : res.n,\n                upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n                upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n                matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n              });\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function execute(_x3, _x4) {\n        return _execute2.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return UpdateOneOperation;\n}(UpdateOperation);\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nvar UpdateManyOperation = /*#__PURE__*/function (_UpdateOperation2) {\n  _inherits(UpdateManyOperation, _UpdateOperation2);\n  var _super3 = _createSuper(UpdateManyOperation);\n  function UpdateManyOperation(collection, filter, update, options) {\n    var _this3;\n    _classCallCheck(this, UpdateManyOperation);\n    _this3 = _super3.call(this, collection.s.namespace, [makeUpdateStatement(filter, update, _objectSpread(_objectSpread({}, options), {}, {\n      multi: true\n    }))], options);\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    return _this3;\n  }\n  _createClass(UpdateManyOperation, [{\n    key: \"execute\",\n    value: function () {\n      var _execute3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(server, session) {\n        var _this$writeConcern2, _res$nModified2;\n        var res;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _get(_getPrototypeOf(UpdateManyOperation.prototype), \"execute\", this).call(this, server, session);\n            case 2:\n              res = _context3.sent;\n              if (!(this.explain != null)) {\n                _context3.next = 5;\n                break;\n              }\n              return _context3.abrupt(\"return\", res);\n            case 5:\n              if (!res.code) {\n                _context3.next = 7;\n                break;\n              }\n              throw new error_1.MongoServerError(res);\n            case 7:\n              if (!res.writeErrors) {\n                _context3.next = 9;\n                break;\n              }\n              throw new error_1.MongoServerError(res.writeErrors[0]);\n            case 9:\n              return _context3.abrupt(\"return\", {\n                acknowledged: ((_this$writeConcern2 = this.writeConcern) === null || _this$writeConcern2 === void 0 ? void 0 : _this$writeConcern2.w) !== 0,\n                modifiedCount: (_res$nModified2 = res.nModified) !== null && _res$nModified2 !== void 0 ? _res$nModified2 : res.n,\n                upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n                upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n                matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n              });\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function execute(_x5, _x6) {\n        return _execute3.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return UpdateManyOperation;\n}(UpdateOperation);\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nvar ReplaceOneOperation = /*#__PURE__*/function (_UpdateOperation3) {\n  _inherits(ReplaceOneOperation, _UpdateOperation3);\n  var _super4 = _createSuper(ReplaceOneOperation);\n  function ReplaceOneOperation(collection, filter, replacement, options) {\n    var _this4;\n    _classCallCheck(this, ReplaceOneOperation);\n    _this4 = _super4.call(this, collection.s.namespace, [makeUpdateStatement(filter, replacement, _objectSpread(_objectSpread({}, options), {}, {\n      multi: false\n    }))], options);\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n    return _this4;\n  }\n  _createClass(ReplaceOneOperation, [{\n    key: \"execute\",\n    value: function () {\n      var _execute4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(server, session) {\n        var _this$writeConcern3, _res$nModified3;\n        var res;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _get(_getPrototypeOf(ReplaceOneOperation.prototype), \"execute\", this).call(this, server, session);\n            case 2:\n              res = _context4.sent;\n              if (!(this.explain != null)) {\n                _context4.next = 5;\n                break;\n              }\n              return _context4.abrupt(\"return\", res);\n            case 5:\n              if (!res.code) {\n                _context4.next = 7;\n                break;\n              }\n              throw new error_1.MongoServerError(res);\n            case 7:\n              if (!res.writeErrors) {\n                _context4.next = 9;\n                break;\n              }\n              throw new error_1.MongoServerError(res.writeErrors[0]);\n            case 9:\n              return _context4.abrupt(\"return\", {\n                acknowledged: ((_this$writeConcern3 = this.writeConcern) === null || _this$writeConcern3 === void 0 ? void 0 : _this$writeConcern3.w) !== 0,\n                modifiedCount: (_res$nModified3 = res.nModified) !== null && _res$nModified3 !== void 0 ? _res$nModified3 : res.n,\n                upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n                upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n                matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n              });\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function execute(_x7, _x8) {\n        return _execute4.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return ReplaceOneOperation;\n}(UpdateOperation);\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n  if (filter == null || typeof filter !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n  if (update == null || typeof update !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n  var op = {\n    q: filter,\n    u: update\n  };\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n  return op;\n}\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);","map":{"version":3,"names":["error_1","require","utils_1","command_1","operation_1","UpdateOperation","_command_1$CommandOpe","_inherits","_super","_createSuper","ns","statements","options","_this","_classCallCheck","call","undefined","_createClass","key","get","_get","_getPrototypeOf","prototype","every","op","multi","value","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","server","session","_this$options","ordered","command","unacknowledgedWrite","wrap","_callee$","_context","prev","next","update","collection","updates","bypassDocumentValidation","let","comment","writeConcern","w","find","o","hint","MongoCompatibilityError","abrupt","stop","execute","_x","_x2","apply","arguments","CommandOperation","exports","UpdateOneOperation","_UpdateOperation","_super2","filter","_this2","s","namespace","makeUpdateStatement","_objectSpread","hasAtomicOperators","MongoInvalidArgumentError","_execute2","_callee2","_this$writeConcern","_res$nModified","res","_callee2$","_context2","sent","explain","code","MongoServerError","writeErrors","acknowledged","modifiedCount","nModified","n","upsertedId","Array","isArray","upserted","length","_id","upsertedCount","matchedCount","_x3","_x4","UpdateManyOperation","_UpdateOperation2","_super3","_this3","_execute3","_callee3","_this$writeConcern2","_res$nModified2","_callee3$","_context3","_x5","_x6","ReplaceOneOperation","_UpdateOperation3","_super4","replacement","_this4","_execute4","_callee4","_this$writeConcern3","_res$nModified3","_callee4$","_context4","_x7","_x8","q","u","upsert","arrayFilters","collation","defineAspects","Aspect","RETRYABLE","WRITE_OPERATION","SKIP_COLLATION","EXPLAINABLE"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\operations\\update.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoInvalidArgumentError, MongoServerError } from '../error';\nimport type { InferIdType, TODO_NODE_3286 } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { hasAtomicOperators, type MongoDBNamespace } from '../utils';\nimport { type CollationOptions, CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects, type Hint } from './operation';\n\n/** @public */\nexport interface UpdateOptions extends CommandOperationOptions {\n  /** A set of filters specifying to which array elements an update should apply */\n  arrayFilters?: Document[];\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/**\n * @public\n * `TSchema` is the schema of the collection\n */\nexport interface UpdateResult<TSchema extends Document = Document> {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The number of documents that matched the filter */\n  matchedCount: number;\n  /** The number of documents that were modified */\n  modifiedCount: number;\n  /** The number of documents that were upserted */\n  upsertedCount: number;\n  /** The identifier of the inserted document if an upsert took place */\n  upsertedId: InferIdType<TSchema> | null;\n}\n\n/** @public */\nexport interface UpdateStatement {\n  /** The query that matches documents to update. */\n  q: Document;\n  /** The modifications to apply. */\n  u: Document | Document[];\n  /**  If true, perform an insert if no documents match the query. */\n  upsert?: boolean;\n  /** If true, updates all documents that meet the query criteria. */\n  multi?: boolean;\n  /** Specifies the collation to use for the operation. */\n  collation?: CollationOptions;\n  /** An array of filter documents that determines which array elements to modify for an update operation on an array field. */\n  arrayFilters?: Document[];\n  /** A document or string that specifies the index to use to support the query predicate. */\n  hint?: Hint;\n}\n\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */\nexport class UpdateOperation extends CommandOperation<Document> {\n  override options: UpdateOptions & { ordered?: boolean };\n  statements: UpdateStatement[];\n\n  constructor(\n    ns: MongoDBNamespace,\n    statements: UpdateStatement[],\n    options: UpdateOptions & { ordered?: boolean }\n  ) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n\n    this.statements = statements;\n  }\n\n  override get canRetryWrite(): boolean {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n\n    return this.statements.every(op => op.multi == null || op.multi === false);\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<Document> {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command: Document = {\n      update: this.ns.collection,\n      updates: this.statements,\n      ordered\n    };\n\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n    if (unacknowledgedWrite) {\n      if (this.statements.find((o: Document) => o.hint)) {\n        // TODO(NODE-3541): fix error for hint with unacknowledged writes\n        throw new MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n      }\n    }\n\n    return super.executeCommand(server, session, command);\n  }\n}\n\n/** @internal */\nexport class UpdateOneOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: false })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<UpdateResult> {\n    const res = await super.execute(server, session);\n    if (this.explain != null) return res as TODO_NODE_3286;\n    if (res.code) throw new MongoServerError(res);\n    if (res.writeErrors) throw new MongoServerError(res.writeErrors[0]);\n\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      modifiedCount: res.nModified ?? res.n,\n      upsertedId:\n        Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n      upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n      matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n    };\n  }\n}\n\n/** @internal */\nexport class UpdateManyOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: true })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<UpdateResult> {\n    const res = await super.execute(server, session);\n    if (this.explain != null) return res as TODO_NODE_3286;\n    if (res.code) throw new MongoServerError(res);\n    if (res.writeErrors) throw new MongoServerError(res.writeErrors[0]);\n\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      modifiedCount: res.nModified ?? res.n,\n      upsertedId:\n        Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n      upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n      matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n    };\n  }\n}\n\n/** @public */\nexport interface ReplaceOptions extends CommandOperationOptions {\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: string | Document;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @internal */\nexport class ReplaceOneOperation extends UpdateOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    replacement: Document,\n    options: ReplaceOptions\n  ) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, replacement, { ...options, multi: false })],\n      options\n    );\n\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<UpdateResult> {\n    const res = await super.execute(server, session);\n    if (this.explain != null) return res as TODO_NODE_3286;\n    if (res.code) throw new MongoServerError(res);\n    if (res.writeErrors) throw new MongoServerError(res.writeErrors[0]);\n\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      modifiedCount: res.nModified ?? res.n,\n      upsertedId:\n        Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n      upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n      matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n    };\n  }\n}\n\nexport function makeUpdateStatement(\n  filter: Document,\n  update: Document | Document[],\n  options: UpdateOptions & { multi?: boolean }\n): UpdateStatement {\n  if (filter == null || typeof filter !== 'object') {\n    throw new MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n\n  if (update == null || typeof update !== 'object') {\n    throw new MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n\n  const op: UpdateStatement = { q: filter, u: update };\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n\n  return op;\n}\n\ndefineAspects(UpdateOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION, Aspect.SKIP_COLLATION]);\ndefineAspects(UpdateOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(UpdateManyOperation, [\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(ReplaceOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.SKIP_COLLATION\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}