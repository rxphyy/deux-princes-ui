{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _slicedToArray = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _toConsumableArray = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoLogger = exports.stringifyWithMaxLen = exports.createStdioLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nvar bson_1 = require(\"bson\");\nvar util_1 = require(\"util\");\nvar constants_1 = require(\"./constants\");\nvar utils_1 = require(\"./utils\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nvar SeverityLevelMap = /*#__PURE__*/function (_Map) {\n  _inherits(SeverityLevelMap, _Map);\n  var _super = _createSuper(SeverityLevelMap);\n  function SeverityLevelMap(entries) {\n    _classCallCheck(this, SeverityLevelMap);\n    var newEntries = [];\n    var _iterator = _createForOfIteratorHelper(entries),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n          level = _step$value[0],\n          value = _step$value[1];\n        newEntries.push([value, level]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    newEntries.push.apply(newEntries, _toConsumableArray(entries));\n    return _super.call(this, newEntries);\n  }\n  _createClass(SeverityLevelMap, [{\n    key: \"getNumericSeverityLevel\",\n    value: function getNumericSeverityLevel(severity) {\n      return this.get(severity);\n    }\n  }, {\n    key: \"getSeverityLevelName\",\n    value: function getSeverityLevelName(level) {\n      return this.get(level);\n    }\n  }]);\n  return SeverityLevelMap;\n}( /*#__PURE__*/_wrapNativeSuper(Map));\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([[exports.SeverityLevel.OFF, -Infinity], [exports.SeverityLevel.EMERGENCY, 0], [exports.SeverityLevel.ALERT, 1], [exports.SeverityLevel.CRITICAL, 2], [exports.SeverityLevel.ERROR, 3], [exports.SeverityLevel.WARNING, 4], [exports.SeverityLevel.NOTICE, 5], [exports.SeverityLevel.INFORMATIONAL, 6], [exports.SeverityLevel.DEBUG, 7], [exports.SeverityLevel.TRACE, 8]]);\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection'\n});\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n  var validSeverities = Object.values(exports.SeverityLevel);\n  var lowerSeverity = s === null || s === void 0 ? void 0 : s.toLowerCase();\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity;\n  }\n  return null;\n}\n/** @internal */\nfunction createStdioLogger(stream) {\n  return {\n    write: function write(log) {\n      stream.write((0, util_1.inspect)(log, {\n        compact: true,\n        breakLength: Infinity\n      }), 'utf-8');\n      return;\n    }\n  };\n}\nexports.createStdioLogger = createStdioLogger;\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath(_ref, _ref2) {\n  var MONGODB_LOG_PATH = _ref.MONGODB_LOG_PATH;\n  var mongodbLogPath = _ref2.mongodbLogPath;\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return createStdioLogger(process.stderr);\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return createStdioLogger(process.stdout);\n  }\n  if (typeof mongodbLogPath === 'object' && typeof (mongodbLogPath === null || mongodbLogPath === void 0 ? void 0 : mongodbLogPath.write) === 'function') {\n    return mongodbLogPath;\n  }\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return createStdioLogger(process.stderr);\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return createStdioLogger(process.stdout);\n  }\n  return createStdioLogger(process.stderr);\n}\nfunction compareSeverity(s0, s1) {\n  var s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  var s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength) {\n  var ejson = bson_1.EJSON.stringify(value);\n  return maxDocumentLength !== 0 && ejson.length > maxDocumentLength ? \"\".concat(ejson.slice(0, maxDocumentLength), \"...\") : ejson;\n}\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nfunction isLogConvertible(obj) {\n  var objAsLogConvertible = obj;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachCommandFields(log, commandEvent) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent === null || commandEvent === void 0 ? void 0 : commandEvent.connectionId;\n  var _utils_1$HostAddress$ = utils_1.HostAddress.fromString(commandEvent.address).toHostPort(),\n    host = _utils_1$HostAddress$.host,\n    port = _utils_1$HostAddress$.port;\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent !== null && commandEvent !== void 0 && commandEvent.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n  return log;\n}\nfunction attachConnectionFields(log, connectionPoolEvent) {\n  var _utils_1$HostAddress$2 = utils_1.HostAddress.fromString(connectionPoolEvent.address).toHostPort(),\n    host = _utils_1$HostAddress$2.host,\n    port = _utils_1$HostAddress$2.port;\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\nfunction defaultLogTransform(logObject) {\n  var _logObject$serviceId;\n  var maxDocumentLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.DEFAULT_MAX_DOCUMENT_LENGTH;\n  var log = Object.create(null);\n  switch (logObject.name) {\n    case constants_1.COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength);\n      log.databaseName = logObject.databaseName;\n      return log;\n    case constants_1.COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength);\n      return log;\n    case constants_1.COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure;\n      return log;\n    case constants_1.CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        var _logObject$options = logObject.options,\n          maxIdleTimeMS = _logObject$options.maxIdleTimeMS,\n          minPoolSize = _logObject$options.minPoolSize,\n          maxPoolSize = _logObject$options.maxPoolSize,\n          maxConnecting = _logObject$options.maxConnecting,\n          waitQueueTimeoutMS = _logObject$options.waitQueueTimeoutMS;\n        log = _objectSpread(_objectSpread({}, log), {}, {\n          maxIdleTimeMS: maxIdleTimeMS,\n          minPoolSize: minPoolSize,\n          maxPoolSize: maxPoolSize,\n          maxConnecting: maxConnecting,\n          waitQueueTimeoutMS: waitQueueTimeoutMS\n        });\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case constants_1.CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (((_logObject$serviceId = logObject.serviceId) === null || _logObject$serviceId === void 0 ? void 0 : _logObject$serviceId._bsontype) === 'ObjectId') {\n        log.serviceId = logObject.serviceId.toHexString();\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case constants_1.CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason = 'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = \"Unknown close reason: \".concat(logObject.reason);\n      }\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = \"Unknown close reason: \".concat(logObject.reason);\n      }\n      return log;\n    case constants_1.CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    default:\n      for (var _i = 0, _Object$entries = Object.entries(logObject); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          value = _Object$entries$_i[1];\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\n/** @internal */\nvar MongoLogger = /*#__PURE__*/function () {\n  function MongoLogger(options) {\n    _classCallCheck(this, MongoLogger);\n    /**\n     * This method should be used when logging errors that do not have a public driver API for\n     * reporting errors.\n     */\n    this.error = this.log.bind(this, 'error');\n    /**\n     * This method should be used to log situations where undesirable application behaviour might\n     * occur. For example, failing to end sessions on `MongoClient.close`.\n     */\n    this.warn = this.log.bind(this, 'warn');\n    /**\n     * This method should be used to report high-level information about normal driver behaviour.\n     * For example, the creation of a `MongoClient`.\n     */\n    this.info = this.log.bind(this, 'info');\n    /**\n     * This method should be used to report information that would be helpful when debugging an\n     * application. For example, a command starting, succeeding or failing.\n     */\n    this.debug = this.log.bind(this, 'debug');\n    /**\n     * This method should be used to report fine-grained details related to logic flow. For example,\n     * entering and exiting a function body.\n     */\n    this.trace = this.log.bind(this, 'trace');\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n  }\n  _createClass(MongoLogger, [{\n    key: \"log\",\n    value: function log(severity, component, message) {\n      if (compareSeverity(severity, this.componentSeverities[component]) > 0) return;\n      var logMessage = {\n        t: new Date(),\n        c: component,\n        s: severity\n      };\n      if (typeof message === 'string') {\n        logMessage.message = message;\n      } else if (typeof message === 'object') {\n        if (isLogConvertible(message)) {\n          logMessage = _objectSpread(_objectSpread({}, logMessage), message.toLog());\n        } else {\n          logMessage = _objectSpread(_objectSpread({}, logMessage), defaultLogTransform(message, this.maxDocumentLength));\n        }\n      }\n      this.logDestination.write(logMessage);\n    }\n    /**\n     * Merges options set through environment variables and the MongoClient, preferring environment\n     * variables when both are set, and substituting defaults for values not set. Options set in\n     * constructor take precedence over both environment variables and MongoClient options.\n     *\n     * @remarks\n     * When parsing component severity levels, invalid values are treated as unset and replaced with\n     * the default severity.\n     *\n     * @param envOptions - options set for the logger from the environment\n     * @param clientOptions - options set for the logger in the MongoClient options\n     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n     */\n  }], [{\n    key: \"resolveOptions\",\n    value: function resolveOptions(envOptions, clientOptions) {\n      var _parseSeverityFromStr, _parseSeverityFromStr2, _parseSeverityFromStr3, _parseSeverityFromStr4, _parseSeverityFromStr5, _ref3;\n      // client options take precedence over env options\n      var combinedOptions = _objectSpread(_objectSpread(_objectSpread({}, envOptions), clientOptions), {}, {\n        mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n      });\n      var defaultSeverity = (_parseSeverityFromStr = parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL)) !== null && _parseSeverityFromStr !== void 0 ? _parseSeverityFromStr : exports.SeverityLevel.OFF;\n      return {\n        componentSeverities: {\n          command: (_parseSeverityFromStr2 = parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND)) !== null && _parseSeverityFromStr2 !== void 0 ? _parseSeverityFromStr2 : defaultSeverity,\n          topology: (_parseSeverityFromStr3 = parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY)) !== null && _parseSeverityFromStr3 !== void 0 ? _parseSeverityFromStr3 : defaultSeverity,\n          serverSelection: (_parseSeverityFromStr4 = parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION)) !== null && _parseSeverityFromStr4 !== void 0 ? _parseSeverityFromStr4 : defaultSeverity,\n          connection: (_parseSeverityFromStr5 = parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION)) !== null && _parseSeverityFromStr5 !== void 0 ? _parseSeverityFromStr5 : defaultSeverity,\n          default: defaultSeverity\n        },\n        maxDocumentLength: (_ref3 = (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH)) !== null && _ref3 !== void 0 ? _ref3 : 1000,\n        logDestination: combinedOptions.mongodbLogPath\n      };\n    }\n  }]);\n  return MongoLogger;\n}();\nexports.MongoLogger = MongoLogger;","map":{"version":3,"names":["bson_1","require","util_1","constants_1","utils_1","exports","SeverityLevel","Object","freeze","EMERGENCY","ALERT","CRITICAL","ERROR","WARNING","NOTICE","INFORMATIONAL","DEBUG","TRACE","OFF","DEFAULT_MAX_DOCUMENT_LENGTH","SeverityLevelMap","_Map","_inherits","_super","_createSuper","entries","_classCallCheck","newEntries","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","value","level","push","err","e","f","apply","_toConsumableArray","call","_createClass","key","getNumericSeverityLevel","severity","get","getSeverityLevelName","_wrapNativeSuper","Map","SEVERITY_LEVEL_MAP","Infinity","MongoLoggableComponent","COMMAND","TOPOLOGY","SERVER_SELECTION","CONNECTION","parseSeverityFromString","validSeverities","values","lowerSeverity","toLowerCase","includes","createStdioLogger","stream","write","log","inspect","compact","breakLength","resolveLogPath","_ref","_ref2","MONGODB_LOG_PATH","mongodbLogPath","test","process","stderr","stdout","compareSeverity","s0","s1","s0Num","s1Num","stringifyWithMaxLen","maxDocumentLength","ejson","EJSON","stringify","length","concat","slice","isLogConvertible","obj","objAsLogConvertible","toLog","undefined","attachCommandFields","commandEvent","commandName","requestId","driverConnectionId","connectionId","_utils_1$HostAddress$","HostAddress","fromString","address","toHostPort","host","port","serverHost","serverPort","serviceId","toHexString","attachConnectionFields","connectionPoolEvent","_utils_1$HostAddress$2","defaultLogTransform","logObject","_logObject$serviceId","arguments","create","name","COMMAND_STARTED","message","command","databaseName","COMMAND_SUCCEEDED","durationMS","duration","reply","COMMAND_FAILED","failure","CONNECTION_POOL_CREATED","options","_logObject$options","maxIdleTimeMS","minPoolSize","maxPoolSize","maxConnecting","waitQueueTimeoutMS","_objectSpread","CONNECTION_POOL_READY","CONNECTION_POOL_CLEARED","_bsontype","CONNECTION_POOL_CLOSED","CONNECTION_CREATED","CONNECTION_READY","CONNECTION_CLOSED","reason","error","CONNECTION_CHECK_OUT_STARTED","CONNECTION_CHECK_OUT_FAILED","CONNECTION_CHECKED_OUT","CONNECTION_CHECKED_IN","_i","_Object$entries","_Object$entries$_i","MongoLogger","bind","warn","info","debug","trace","componentSeverities","logDestination","component","logMessage","t","Date","c","resolveOptions","envOptions","clientOptions","_parseSeverityFromStr","_parseSeverityFromStr2","_parseSeverityFromStr3","_parseSeverityFromStr4","_parseSeverityFromStr5","_ref3","combinedOptions","defaultSeverity","MONGODB_LOG_ALL","MONGODB_LOG_COMMAND","topology","MONGODB_LOG_TOPOLOGY","serverSelection","MONGODB_LOG_SERVER_SELECTION","connection","MONGODB_LOG_CONNECTION","default","parseUnsignedInteger","MONGODB_LOG_MAX_DOCUMENT_LENGTH"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\mongo_logger.ts"],"sourcesContent":["import { EJSON } from 'bson';\nimport type { Writable } from 'stream';\nimport { inspect } from 'util';\n\nimport type {\n  CommandFailedEvent,\n  CommandStartedEvent,\n  CommandSucceededEvent\n} from './cmap/command_monitoring_events';\nimport type {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolMonitoringEvent,\n  ConnectionPoolReadyEvent,\n  ConnectionReadyEvent\n} from './cmap/connection_pool_events';\nimport {\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_POOL_READY,\n  CONNECTION_READY\n} from './constants';\nimport { HostAddress, parseUnsignedInteger } from './utils';\n\n/** @internal */\nexport const SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n} as const);\n\n/** @internal */\nexport const DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nexport type SeverityLevel = (typeof SeverityLevel)[keyof typeof SeverityLevel];\n\n/** @internal */\nclass SeverityLevelMap extends Map<SeverityLevel | number, SeverityLevel | number> {\n  constructor(entries: [SeverityLevel | number, SeverityLevel | number][]) {\n    const newEntries: [number | SeverityLevel, SeverityLevel | number][] = [];\n    for (const [level, value] of entries) {\n      newEntries.push([value, level]);\n    }\n\n    newEntries.push(...entries);\n    super(newEntries);\n  }\n\n  getNumericSeverityLevel(severity: SeverityLevel): number {\n    return this.get(severity) as number;\n  }\n\n  getSeverityLevelName(level: number): SeverityLevel | undefined {\n    return this.get(level) as SeverityLevel | undefined;\n  }\n}\n\n/** @internal */\nexport const SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n  [SeverityLevel.OFF, -Infinity],\n  [SeverityLevel.EMERGENCY, 0],\n  [SeverityLevel.ALERT, 1],\n  [SeverityLevel.CRITICAL, 2],\n  [SeverityLevel.ERROR, 3],\n  [SeverityLevel.WARNING, 4],\n  [SeverityLevel.NOTICE, 5],\n  [SeverityLevel.INFORMATIONAL, 6],\n  [SeverityLevel.DEBUG, 7],\n  [SeverityLevel.TRACE, 8]\n]);\n\n/** @internal */\nexport const MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection'\n} as const);\n\n/** @internal */\nexport type MongoLoggableComponent =\n  (typeof MongoLoggableComponent)[keyof typeof MongoLoggableComponent];\n\n/** @internal */\nexport interface MongoLoggerEnvOptions {\n  /** Severity level for command component */\n  MONGODB_LOG_COMMAND?: string;\n  /** Severity level for topology component */\n  MONGODB_LOG_TOPOLOGY?: string;\n  /** Severity level for server selection component */\n  MONGODB_LOG_SERVER_SELECTION?: string;\n  /** Severity level for CMAP */\n  MONGODB_LOG_CONNECTION?: string;\n  /** Default severity level to be if any of the above are unset */\n  MONGODB_LOG_ALL?: string;\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  MONGODB_LOG_MAX_DOCUMENT_LENGTH?: string;\n  /** Destination for log messages. Must be 'stderr', 'stdout'. Defaults to 'stderr'. */\n  MONGODB_LOG_PATH?: string;\n}\n\n/** @internal */\nexport interface MongoLoggerMongoClientOptions {\n  /** Destination for log messages */\n  mongodbLogPath?: 'stdout' | 'stderr' | MongoDBLogWritable;\n}\n\n/** @internal */\nexport interface MongoLoggerOptions {\n  componentSeverities: {\n    /** Severity level for command component */\n    command: SeverityLevel;\n    /** Severity level for topology component */\n    topology: SeverityLevel;\n    /** Severity level for server selection component */\n    serverSelection: SeverityLevel;\n    /** Severity level for connection component */\n    connection: SeverityLevel;\n    /** Default severity level to be used if any of the above are unset */\n    default: SeverityLevel;\n  };\n\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  maxDocumentLength: number;\n  /** Destination for log messages. */\n  logDestination: Writable | MongoDBLogWritable;\n}\n\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s?: string): SeverityLevel | null {\n  const validSeverities: string[] = Object.values(SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity as SeverityLevel;\n  }\n\n  return null;\n}\n\n/** @internal */\nexport function createStdioLogger(stream: {\n  write: NodeJS.WriteStream['write'];\n}): MongoDBLogWritable {\n  return {\n    write: (log: Log): unknown => {\n      stream.write(inspect(log, { compact: true, breakLength: Infinity }), 'utf-8');\n      return;\n    }\n  };\n}\n\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath(\n  { MONGODB_LOG_PATH }: MongoLoggerEnvOptions,\n  { mongodbLogPath }: { mongodbLogPath?: string | Writable | MongoDBLogWritable }\n): MongoDBLogWritable {\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return createStdioLogger(process.stderr);\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return createStdioLogger(process.stdout);\n  }\n\n  if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n    return mongodbLogPath;\n  }\n\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return createStdioLogger(process.stderr);\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return createStdioLogger(process.stdout);\n  }\n\n  return createStdioLogger(process.stderr);\n}\n\n/** @internal */\nexport interface Log extends Record<string, any> {\n  t: Date;\n  c: MongoLoggableComponent;\n  s: SeverityLevel;\n  message?: string;\n}\n\n/** @internal */\nexport interface MongoDBLogWritable {\n  write(log: Log): void;\n}\n\nfunction compareSeverity(s0: SeverityLevel, s1: SeverityLevel): 1 | 0 | -1 {\n  const s0Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  const s1Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n\n/** @internal */\nexport type LoggableEvent =\n  | CommandStartedEvent\n  | CommandSucceededEvent\n  | CommandFailedEvent\n  | ConnectionPoolCreatedEvent\n  | ConnectionPoolReadyEvent\n  | ConnectionPoolClosedEvent\n  | ConnectionPoolClearedEvent\n  | ConnectionCreatedEvent\n  | ConnectionReadyEvent\n  | ConnectionClosedEvent\n  | ConnectionCheckedInEvent\n  | ConnectionCheckedOutEvent\n  | ConnectionCheckOutStartedEvent\n  | ConnectionCheckOutFailedEvent;\n\n/** @internal */\nexport interface LogConvertible extends Record<string, any> {\n  toLog(): Record<string, any>;\n}\n\n/** @internal */\nexport function stringifyWithMaxLen(value: any, maxDocumentLength: number): string {\n  const ejson = EJSON.stringify(value);\n\n  return maxDocumentLength !== 0 && ejson.length > maxDocumentLength\n    ? `${ejson.slice(0, maxDocumentLength)}...`\n    : ejson;\n}\n\n/** @internal */\nexport type Loggable = LoggableEvent | LogConvertible;\n\nfunction isLogConvertible(obj: Loggable): obj is LogConvertible {\n  const objAsLogConvertible = obj as LogConvertible;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\n\nfunction attachCommandFields(\n  log: Record<string, any>,\n  commandEvent: CommandStartedEvent | CommandSucceededEvent | CommandFailedEvent\n) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent?.connectionId;\n  const { host, port } = HostAddress.fromString(commandEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent?.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n\n  return log;\n}\n\nfunction attachConnectionFields(\n  log: Record<string, any>,\n  connectionPoolEvent: ConnectionPoolMonitoringEvent\n) {\n  const { host, port } = HostAddress.fromString(connectionPoolEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n\n  return log;\n}\n\nfunction defaultLogTransform(\n  logObject: LoggableEvent | Record<string, any>,\n  maxDocumentLength: number = DEFAULT_MAX_DOCUMENT_LENGTH\n): Omit<Log, 's' | 't' | 'c'> {\n  let log: Omit<Log, 's' | 't' | 'c'> = Object.create(null);\n\n  switch (logObject.name) {\n    case COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength);\n      log.databaseName = logObject.databaseName;\n      return log;\n    case COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength);\n      return log;\n    case COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure;\n      return log;\n    case CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } =\n          logObject.options;\n        log = {\n          ...log,\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        };\n      }\n      return log;\n    case CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (logObject.serviceId?._bsontype === 'ObjectId') {\n        log.serviceId = logObject.serviceId.toHexString();\n      }\n      return log;\n    case CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason =\n            'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    default:\n      for (const [key, value] of Object.entries(logObject)) {\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\n\n/** @internal */\nexport class MongoLogger {\n  componentSeverities: Record<MongoLoggableComponent, SeverityLevel>;\n  maxDocumentLength: number;\n  logDestination: MongoDBLogWritable | Writable;\n\n  /**\n   * This method should be used when logging errors that do not have a public driver API for\n   * reporting errors.\n   */\n  error = this.log.bind(this, 'error');\n  /**\n   * This method should be used to log situations where undesirable application behaviour might\n   * occur. For example, failing to end sessions on `MongoClient.close`.\n   */\n  warn = this.log.bind(this, 'warn');\n  /**\n   * This method should be used to report high-level information about normal driver behaviour.\n   * For example, the creation of a `MongoClient`.\n   */\n  info = this.log.bind(this, 'info');\n  /**\n   * This method should be used to report information that would be helpful when debugging an\n   * application. For example, a command starting, succeeding or failing.\n   */\n  debug = this.log.bind(this, 'debug');\n  /**\n   * This method should be used to report fine-grained details related to logic flow. For example,\n   * entering and exiting a function body.\n   */\n  trace = this.log.bind(this, 'trace');\n\n  constructor(options: MongoLoggerOptions) {\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n  }\n\n  private log(\n    severity: SeverityLevel,\n    component: MongoLoggableComponent,\n    message: Loggable | string\n  ): void {\n    if (compareSeverity(severity, this.componentSeverities[component]) > 0) return;\n\n    let logMessage: Log = { t: new Date(), c: component, s: severity };\n    if (typeof message === 'string') {\n      logMessage.message = message;\n    } else if (typeof message === 'object') {\n      if (isLogConvertible(message)) {\n        logMessage = { ...logMessage, ...message.toLog() };\n      } else {\n        logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n      }\n    }\n    this.logDestination.write(logMessage);\n  }\n\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(\n    envOptions: MongoLoggerEnvOptions,\n    clientOptions: MongoLoggerMongoClientOptions\n  ): MongoLoggerOptions {\n    // client options take precedence over env options\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n    };\n    const defaultSeverity =\n      parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL) ?? SeverityLevel.OFF;\n\n    return {\n      componentSeverities: {\n        command: parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND) ?? defaultSeverity,\n        topology: parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY) ?? defaultSeverity,\n        serverSelection:\n          parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION) ?? defaultSeverity,\n        connection:\n          parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION) ?? defaultSeverity,\n        default: defaultSeverity\n      },\n      maxDocumentLength:\n        parseUnsignedInteger(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n      logDestination: combinedOptions.mongodbLogPath\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}