{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageStream = void 0;\nconst stream_1 = require(\"stream\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst commands_1 = require(\"./commands\");\nconst compression_1 = require(\"./wire_protocol/compression\");\nconst constants_1 = require(\"./wire_protocol/constants\");\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\n/** @internal */\nconst kBuffer = Symbol('buffer');\n/**\n * A duplex stream that is capable of reading and writing raw wire protocol messages, with\n * support for optional compression\n * @internal\n */\nclass MessageStream extends stream_1.Duplex {\n  constructor(options = {}) {\n    super(options);\n    /** @internal */\n    this.isMonitoringConnection = false;\n    this.maxBsonMessageSize = options.maxBsonMessageSize || kDefaultMaxBsonMessageSize;\n    this[kBuffer] = new utils_1.BufferPool();\n  }\n  get buffer() {\n    return this[kBuffer];\n  }\n  _write(chunk, _, callback) {\n    this[kBuffer].append(chunk);\n    processIncomingData(this, callback);\n  }\n  _read( /* size */\n  ) {\n    // NOTE: This implementation is empty because we explicitly push data to be read\n    //       when `writeMessage` is called.\n    return;\n  }\n  writeCommand(command, operationDescription) {\n    const agreedCompressor = operationDescription.agreedCompressor ?? 'none';\n    if (agreedCompressor === 'none' || !canCompress(command)) {\n      const data = command.toBin();\n      this.push(Array.isArray(data) ? Buffer.concat(data) : data);\n      return;\n    }\n    // otherwise, compress the message\n    const concatenatedOriginalCommandBuffer = Buffer.concat(command.toBin());\n    const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n    // Extract information needed for OP_COMPRESSED from the uncompressed message\n    const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n    const options = {\n      agreedCompressor,\n      zlibCompressionLevel: operationDescription.zlibCompressionLevel ?? 0\n    };\n    // Compress the message body\n    (0, compression_1.compress)(options, messageToBeCompressed).then(compressedMessage => {\n      // Create the msgHeader of OP_COMPRESSED\n      const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n      msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n      msgHeader.writeInt32LE(command.requestId, 4); // requestID\n      msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n      msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n      // Create the compression details of OP_COMPRESSED\n      const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n      compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n      compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n      compressionDetails.writeUInt8(compression_1.Compressor[agreedCompressor], 8); // compressorID\n      this.push(Buffer.concat([msgHeader, compressionDetails, compressedMessage]));\n    }, error => {\n      operationDescription.cb(error);\n    });\n  }\n}\nexports.MessageStream = MessageStream;\n// Return whether a command contains an uncompressible command term\n// Will return true if command contains no uncompressible command terms\nfunction canCompress(command) {\n  const commandDoc = command instanceof commands_1.Msg ? command.command : command.query;\n  const commandName = Object.keys(commandDoc)[0];\n  return !compression_1.uncompressibleCommands.has(commandName);\n}\nfunction processIncomingData(stream, callback) {\n  const buffer = stream[kBuffer];\n  const sizeOfMessage = buffer.getInt32();\n  if (sizeOfMessage == null) {\n    return callback();\n  }\n  if (sizeOfMessage < 0) {\n    return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}`));\n  }\n  if (sizeOfMessage > stream.maxBsonMessageSize) {\n    return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, max allowed: ${stream.maxBsonMessageSize}`));\n  }\n  if (sizeOfMessage > buffer.length) {\n    return callback();\n  }\n  const message = buffer.read(sizeOfMessage);\n  const messageHeader = {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n  const monitorHasAnotherHello = () => {\n    if (stream.isMonitoringConnection) {\n      // Can we read the next message size?\n      const sizeOfMessage = buffer.getInt32();\n      if (sizeOfMessage != null && sizeOfMessage <= buffer.length) {\n        return true;\n      }\n    }\n    return false;\n  };\n  let ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.BinMsg : commands_1.Response;\n  if (messageHeader.opCode !== constants_1.OP_COMPRESSED) {\n    const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n    // If we are a monitoring connection message stream and\n    // there is more in the buffer that can be read, skip processing since we\n    // want the last hello command response that is in the buffer.\n    if (monitorHasAnotherHello()) {\n      return processIncomingData(stream, callback);\n    }\n    stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n    if (buffer.length >= 4) {\n      return processIncomingData(stream, callback);\n    }\n    return callback();\n  }\n  messageHeader.fromCompressed = true;\n  messageHeader.opCode = message.readInt32LE(MESSAGE_HEADER_SIZE);\n  messageHeader.length = message.readInt32LE(MESSAGE_HEADER_SIZE + 4);\n  const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n  const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n  // recalculate based on wrapped opcode\n  ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.BinMsg : commands_1.Response;\n  (0, compression_1.decompress)(compressorID, compressedBuffer).then(messageBody => {\n    if (messageBody.length !== messageHeader.length) {\n      return callback(new error_1.MongoDecompressionError('Message body and message header must be the same length'));\n    }\n    // If we are a monitoring connection message stream and\n    // there is more in the buffer that can be read, skip processing since we\n    // want the last hello command response that is in the buffer.\n    if (monitorHasAnotherHello()) {\n      return processIncomingData(stream, callback);\n    }\n    stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n    if (buffer.length >= 4) {\n      return processIncomingData(stream, callback);\n    }\n    return callback();\n  }, error => {\n    return callback(error);\n  });\n}","map":{"version":3,"names":["stream_1","require","error_1","utils_1","commands_1","compression_1","constants_1","MESSAGE_HEADER_SIZE","COMPRESSION_DETAILS_SIZE","kDefaultMaxBsonMessageSize","kBuffer","Symbol","MessageStream","Duplex","constructor","options","isMonitoringConnection","maxBsonMessageSize","BufferPool","buffer","_write","chunk","_","callback","append","processIncomingData","_read","writeCommand","command","operationDescription","agreedCompressor","canCompress","data","toBin","push","Array","isArray","Buffer","concat","concatenatedOriginalCommandBuffer","messageToBeCompressed","slice","originalCommandOpCode","readInt32LE","zlibCompressionLevel","compress","then","compressedMessage","msgHeader","alloc","writeInt32LE","length","requestId","OP_COMPRESSED","compressionDetails","writeUInt8","Compressor","error","cb","exports","commandDoc","Msg","query","commandName","Object","keys","uncompressibleCommands","has","stream","sizeOfMessage","getInt32","MongoParseError","message","read","messageHeader","responseTo","opCode","monitorHasAnotherHello","ResponseType","OP_MSG","BinMsg","Response","messageBody","subarray","emit","fromCompressed","compressorID","compressedBuffer","decompress","MongoDecompressionError"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cmap\\message_stream.ts"],"sourcesContent":["import { Duplex, type DuplexOptions } from 'stream';\n\nimport type { BSONSerializeOptions, Document } from '../bson';\nimport { MongoDecompressionError, MongoParseError } from '../error';\nimport type { ClientSession } from '../sessions';\nimport { BufferPool, type Callback } from '../utils';\nimport {\n  BinMsg,\n  type MessageHeader,\n  Msg,\n  Response,\n  type WriteProtocolMessageType\n} from './commands';\nimport {\n  compress,\n  Compressor,\n  type CompressorName,\n  decompress,\n  uncompressibleCommands\n} from './wire_protocol/compression';\nimport { OP_COMPRESSED, OP_MSG } from './wire_protocol/constants';\n\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\n/** @internal */\nconst kBuffer = Symbol('buffer');\n\n/** @internal */\nexport interface MessageStreamOptions extends DuplexOptions {\n  maxBsonMessageSize?: number;\n}\n\n/** @internal */\nexport interface OperationDescription extends BSONSerializeOptions {\n  started: number;\n  cb: Callback<Document>;\n  documentsReturnedIn?: string;\n  noResponse: boolean;\n  raw: boolean;\n  requestId: number;\n  session?: ClientSession;\n  agreedCompressor?: CompressorName;\n  zlibCompressionLevel?: number;\n  $clusterTime?: Document;\n}\n\n/**\n * A duplex stream that is capable of reading and writing raw wire protocol messages, with\n * support for optional compression\n * @internal\n */\nexport class MessageStream extends Duplex {\n  /** @internal */\n  maxBsonMessageSize: number;\n  /** @internal */\n  [kBuffer]: BufferPool;\n  /** @internal */\n  isMonitoringConnection = false;\n\n  constructor(options: MessageStreamOptions = {}) {\n    super(options);\n    this.maxBsonMessageSize = options.maxBsonMessageSize || kDefaultMaxBsonMessageSize;\n    this[kBuffer] = new BufferPool();\n  }\n\n  get buffer(): BufferPool {\n    return this[kBuffer];\n  }\n\n  override _write(chunk: Buffer, _: unknown, callback: Callback<Buffer>): void {\n    this[kBuffer].append(chunk);\n    processIncomingData(this, callback);\n  }\n\n  override _read(/* size */): void {\n    // NOTE: This implementation is empty because we explicitly push data to be read\n    //       when `writeMessage` is called.\n    return;\n  }\n\n  writeCommand(\n    command: WriteProtocolMessageType,\n    operationDescription: OperationDescription\n  ): void {\n    const agreedCompressor = operationDescription.agreedCompressor ?? 'none';\n    if (agreedCompressor === 'none' || !canCompress(command)) {\n      const data = command.toBin();\n      this.push(Array.isArray(data) ? Buffer.concat(data) : data);\n      return;\n    }\n    // otherwise, compress the message\n    const concatenatedOriginalCommandBuffer = Buffer.concat(command.toBin());\n    const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n\n    // Extract information needed for OP_COMPRESSED from the uncompressed message\n    const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n\n    const options = {\n      agreedCompressor,\n      zlibCompressionLevel: operationDescription.zlibCompressionLevel ?? 0\n    };\n    // Compress the message body\n    compress(options, messageToBeCompressed).then(\n      compressedMessage => {\n        // Create the msgHeader of OP_COMPRESSED\n        const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n        msgHeader.writeInt32LE(\n          MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length,\n          0\n        ); // messageLength\n        msgHeader.writeInt32LE(command.requestId, 4); // requestID\n        msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n        msgHeader.writeInt32LE(OP_COMPRESSED, 12); // opCode\n\n        // Create the compression details of OP_COMPRESSED\n        const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n        compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n        compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n        compressionDetails.writeUInt8(Compressor[agreedCompressor], 8); // compressorID\n        this.push(Buffer.concat([msgHeader, compressionDetails, compressedMessage]));\n      },\n      error => {\n        operationDescription.cb(error);\n      }\n    );\n  }\n}\n\n// Return whether a command contains an uncompressible command term\n// Will return true if command contains no uncompressible command terms\nfunction canCompress(command: WriteProtocolMessageType) {\n  const commandDoc = command instanceof Msg ? command.command : command.query;\n  const commandName = Object.keys(commandDoc)[0];\n  return !uncompressibleCommands.has(commandName);\n}\n\nfunction processIncomingData(stream: MessageStream, callback: Callback<Buffer>): void {\n  const buffer = stream[kBuffer];\n  const sizeOfMessage = buffer.getInt32();\n\n  if (sizeOfMessage == null) {\n    return callback();\n  }\n\n  if (sizeOfMessage < 0) {\n    return callback(new MongoParseError(`Invalid message size: ${sizeOfMessage}`));\n  }\n\n  if (sizeOfMessage > stream.maxBsonMessageSize) {\n    return callback(\n      new MongoParseError(\n        `Invalid message size: ${sizeOfMessage}, max allowed: ${stream.maxBsonMessageSize}`\n      )\n    );\n  }\n\n  if (sizeOfMessage > buffer.length) {\n    return callback();\n  }\n\n  const message = buffer.read(sizeOfMessage);\n  const messageHeader: MessageHeader = {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n\n  const monitorHasAnotherHello = () => {\n    if (stream.isMonitoringConnection) {\n      // Can we read the next message size?\n      const sizeOfMessage = buffer.getInt32();\n      if (sizeOfMessage != null && sizeOfMessage <= buffer.length) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  let ResponseType = messageHeader.opCode === OP_MSG ? BinMsg : Response;\n  if (messageHeader.opCode !== OP_COMPRESSED) {\n    const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n\n    // If we are a monitoring connection message stream and\n    // there is more in the buffer that can be read, skip processing since we\n    // want the last hello command response that is in the buffer.\n    if (monitorHasAnotherHello()) {\n      return processIncomingData(stream, callback);\n    }\n\n    stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n\n    if (buffer.length >= 4) {\n      return processIncomingData(stream, callback);\n    }\n    return callback();\n  }\n\n  messageHeader.fromCompressed = true;\n  messageHeader.opCode = message.readInt32LE(MESSAGE_HEADER_SIZE);\n  messageHeader.length = message.readInt32LE(MESSAGE_HEADER_SIZE + 4);\n  const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n  const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n\n  // recalculate based on wrapped opcode\n  ResponseType = messageHeader.opCode === OP_MSG ? BinMsg : Response;\n  decompress(compressorID, compressedBuffer).then(\n    messageBody => {\n      if (messageBody.length !== messageHeader.length) {\n        return callback(\n          new MongoDecompressionError('Message body and message header must be the same length')\n        );\n      }\n\n      // If we are a monitoring connection message stream and\n      // there is more in the buffer that can be read, skip processing since we\n      // want the last hello command response that is in the buffer.\n      if (monitorHasAnotherHello()) {\n        return processIncomingData(stream, callback);\n      }\n      stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n\n      if (buffer.length >= 4) {\n        return processIncomingData(stream, callback);\n      }\n      return callback();\n    },\n    error => {\n      return callback(error);\n    }\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}