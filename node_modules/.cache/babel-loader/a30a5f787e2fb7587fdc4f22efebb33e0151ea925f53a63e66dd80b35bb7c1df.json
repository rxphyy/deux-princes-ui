{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nvar dns = require(\"dns\");\nvar deps_1 = require(\"../../deps\");\nvar error_1 = require(\"../../error\");\nvar utils_1 = require(\"../../utils\");\nvar auth_provider_1 = require(\"./auth_provider\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n  on: true,\n  off: false,\n  none: 'none',\n  forward: 'forward',\n  forwardAndReverse: 'forwardAndReverse'\n});\nfunction externalCommand(_x, _x2) {\n  return _externalCommand.apply(this, arguments);\n}\nfunction _externalCommand() {\n  _externalCommand = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(connection, command) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", connection.commandAsync((0, utils_1.ns)('$external.$cmd'), command, undefined));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _externalCommand.apply(this, arguments);\n}\nvar krb;\nvar GSSAPI = /*#__PURE__*/function (_auth_provider_1$Auth) {\n  _inherits(GSSAPI, _auth_provider_1$Auth);\n  var _super = _createSuper(GSSAPI);\n  function GSSAPI() {\n    _classCallCheck(this, GSSAPI);\n    return _super.apply(this, arguments);\n  }\n  _createClass(GSSAPI, [{\n    key: \"auth\",\n    value: function () {\n      var _auth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authContext) {\n        var connection, credentials, username, client, payload, saslStartResponse, negotiatedPayload, saslContinueResponse, finalizePayload;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              connection = authContext.connection, credentials = authContext.credentials;\n              if (!(credentials == null)) {\n                _context.next = 3;\n                break;\n              }\n              throw new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication');\n            case 3:\n              username = credentials.username;\n              _context.next = 6;\n              return makeKerberosClient(authContext);\n            case 6:\n              client = _context.sent;\n              _context.next = 9;\n              return client.step('');\n            case 9:\n              payload = _context.sent;\n              _context.next = 12;\n              return externalCommand(connection, saslStart(payload));\n            case 12:\n              saslStartResponse = _context.sent;\n              _context.next = 15;\n              return negotiate(client, 10, saslStartResponse.payload);\n            case 15:\n              negotiatedPayload = _context.sent;\n              _context.next = 18;\n              return externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));\n            case 18:\n              saslContinueResponse = _context.sent;\n              _context.next = 21;\n              return finalize(client, username, saslContinueResponse.payload);\n            case 21:\n              finalizePayload = _context.sent;\n              _context.next = 24;\n              return externalCommand(connection, {\n                saslContinue: 1,\n                conversationId: saslContinueResponse.conversationId,\n                payload: finalizePayload\n              });\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function auth(_x3) {\n        return _auth.apply(this, arguments);\n      }\n      return auth;\n    }()\n  }]);\n  return GSSAPI;\n}(auth_provider_1.AuthProvider);\nexports.GSSAPI = GSSAPI;\nfunction makeKerberosClient(_x4) {\n  return _makeKerberosClient.apply(this, arguments);\n}\nfunction _makeKerberosClient() {\n  _makeKerberosClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(authContext) {\n    var _mechanismProperties$, _mechanismProperties$2;\n    var hostAddress, credentials, _krb, initializeClient, username, password, mechanismProperties, serviceName, host, initOptions, spnHost, spn;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          hostAddress = authContext.options.hostAddress;\n          credentials = authContext.credentials;\n          if (!(!hostAddress || typeof hostAddress.host !== 'string' || !credentials)) {\n            _context3.next = 4;\n            break;\n          }\n          throw new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.');\n        case 4:\n          loadKrb();\n          if (!('kModuleError' in krb)) {\n            _context3.next = 7;\n            break;\n          }\n          throw krb['kModuleError'];\n        case 7:\n          _krb = krb, initializeClient = _krb.initializeClient;\n          username = credentials.username, password = credentials.password;\n          mechanismProperties = credentials.mechanismProperties;\n          serviceName = (_mechanismProperties$ = mechanismProperties.SERVICE_NAME) !== null && _mechanismProperties$ !== void 0 ? _mechanismProperties$ : 'mongodb';\n          _context3.next = 13;\n          return performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n        case 13:\n          host = _context3.sent;\n          initOptions = {};\n          if (password != null) {\n            // TODO(NODE-5139): These do not match the typescript options in initializeClient\n            Object.assign(initOptions, {\n              user: username,\n              password: password\n            });\n          }\n          spnHost = (_mechanismProperties$2 = mechanismProperties.SERVICE_HOST) !== null && _mechanismProperties$2 !== void 0 ? _mechanismProperties$2 : host;\n          spn = \"\".concat(serviceName).concat(process.platform === 'win32' ? '/' : '@').concat(spnHost);\n          if ('SERVICE_REALM' in mechanismProperties) {\n            spn = \"\".concat(spn, \"@\").concat(mechanismProperties.SERVICE_REALM);\n          }\n          return _context3.abrupt(\"return\", initializeClient(spn, initOptions));\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _makeKerberosClient.apply(this, arguments);\n}\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload: payload,\n    autoAuthorize: 1\n  };\n}\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId: conversationId,\n    payload: payload\n  };\n}\nfunction negotiate(_x5, _x6, _x7) {\n  return _negotiate.apply(this, arguments);\n}\nfunction _negotiate() {\n  _negotiate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(client, retries, payload) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return client.step(payload);\n        case 3:\n          response = _context4.sent;\n          return _context4.abrupt(\"return\", response || '');\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          if (!(retries === 0)) {\n            _context4.next = 11;\n            break;\n          }\n          throw _context4.t0;\n        case 11:\n          return _context4.abrupt(\"return\", negotiate(client, retries - 1, payload));\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[0, 7]]);\n  }));\n  return _negotiate.apply(this, arguments);\n}\nfunction finalize(_x8, _x9, _x10) {\n  return _finalize.apply(this, arguments);\n}\nfunction _finalize() {\n  _finalize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(client, user, payload) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return client.unwrap(payload);\n        case 2:\n          response = _context5.sent;\n          return _context5.abrupt(\"return\", client.wrap(response || '', {\n            user: user\n          }));\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _finalize.apply(this, arguments);\n}\nfunction performGSSAPICanonicalizeHostName(_x11, _x12) {\n  return _performGSSAPICanonicalizeHostName.apply(this, arguments);\n}\nfunction _performGSSAPICanonicalizeHostName() {\n  _performGSSAPICanonicalizeHostName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(host, mechanismProperties) {\n    var mode, _yield$dns$promises$l, address, results;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n          if (!(!mode || mode === exports.GSSAPICanonicalizationValue.none)) {\n            _context6.next = 3;\n            break;\n          }\n          return _context6.abrupt(\"return\", host);\n        case 3:\n          if (!(mode === exports.GSSAPICanonicalizationValue.on || mode === exports.GSSAPICanonicalizationValue.forwardAndReverse)) {\n            _context6.next = 20;\n            break;\n          }\n          _context6.next = 6;\n          return dns.promises.lookup(host);\n        case 6:\n          _yield$dns$promises$l = _context6.sent;\n          address = _yield$dns$promises$l.address;\n          _context6.prev = 8;\n          _context6.next = 11;\n          return dns.promises.resolvePtr(address);\n        case 11:\n          results = _context6.sent;\n          return _context6.abrupt(\"return\", results.length > 0 ? results[0] : host);\n        case 15:\n          _context6.prev = 15;\n          _context6.t0 = _context6[\"catch\"](8);\n          return _context6.abrupt(\"return\", resolveCname(host));\n        case 18:\n          _context6.next = 21;\n          break;\n        case 20:\n          return _context6.abrupt(\"return\", resolveCname(host));\n        case 21:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[8, 15]]);\n  }));\n  return _performGSSAPICanonicalizeHostName.apply(this, arguments);\n}\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nfunction resolveCname(_x13) {\n  return _resolveCname.apply(this, arguments);\n}\nfunction _resolveCname() {\n  _resolveCname = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(host) {\n    var results;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return dns.promises.resolveCname(host);\n        case 3:\n          results = _context7.sent;\n          return _context7.abrupt(\"return\", results.length > 0 ? results[0] : host);\n        case 7:\n          _context7.prev = 7;\n          _context7.t0 = _context7[\"catch\"](0);\n          return _context7.abrupt(\"return\", host);\n        case 10:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[0, 7]]);\n  }));\n  return _resolveCname.apply(this, arguments);\n}\nexports.resolveCname = resolveCname;\n/**\n * Load the Kerberos library.\n */\nfunction loadKrb() {\n  if (!krb) {\n    krb = (0, deps_1.getKerberos)();\n  }\n}","map":{"version":3,"names":["dns","require","deps_1","error_1","utils_1","auth_provider_1","exports","GSSAPICanonicalizationValue","Object","freeze","on","off","none","forward","forwardAndReverse","externalCommand","_x","_x2","_externalCommand","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","connection","command","wrap","_callee2$","_context2","prev","next","abrupt","commandAsync","ns","undefined","stop","krb","GSSAPI","_auth_provider_1$Auth","_inherits","_super","_createSuper","_classCallCheck","_createClass","key","value","_auth","_callee","authContext","credentials","username","client","payload","saslStartResponse","negotiatedPayload","saslContinueResponse","finalizePayload","_callee$","_context","MongoMissingCredentialsError","makeKerberosClient","sent","step","saslStart","negotiate","saslContinue","conversationId","finalize","auth","_x3","AuthProvider","_x4","_makeKerberosClient","_callee3","_mechanismProperties$","_mechanismProperties$2","hostAddress","_krb","initializeClient","password","mechanismProperties","serviceName","host","initOptions","spnHost","spn","_callee3$","_context3","options","MongoInvalidArgumentError","loadKrb","SERVICE_NAME","performGSSAPICanonicalizeHostName","assign","user","SERVICE_HOST","concat","process","platform","SERVICE_REALM","mechanism","autoAuthorize","_x5","_x6","_x7","_negotiate","_callee4","retries","response","_callee4$","_context4","t0","_x8","_x9","_x10","_finalize","_callee5","_callee5$","_context5","unwrap","_x11","_x12","_performGSSAPICanonicalizeHostName","_callee6","mode","_yield$dns$promises$l","address","results","_callee6$","_context6","CANONICALIZE_HOST_NAME","promises","lookup","resolvePtr","length","resolveCname","_x13","_resolveCname","_callee7","_callee7$","_context7","getKerberos"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cmap\\auth\\gssapi.ts"],"sourcesContent":["import * as dns from 'dns';\n\nimport { getKerberos, type Kerberos, type KerberosClient } from '../../deps';\nimport { MongoInvalidArgumentError, MongoMissingCredentialsError } from '../../error';\nimport { ns } from '../../utils';\nimport type { Connection } from '../connection';\nimport { type AuthContext, AuthProvider } from './auth_provider';\n\n/** @public */\nexport const GSSAPICanonicalizationValue = Object.freeze({\n  on: true,\n  off: false,\n  none: 'none',\n  forward: 'forward',\n  forwardAndReverse: 'forwardAndReverse'\n} as const);\n\n/** @public */\nexport type GSSAPICanonicalizationValue =\n  (typeof GSSAPICanonicalizationValue)[keyof typeof GSSAPICanonicalizationValue];\n\ntype MechanismProperties = {\n  CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue;\n  SERVICE_HOST?: string;\n  SERVICE_NAME?: string;\n  SERVICE_REALM?: string;\n};\n\nasync function externalCommand(\n  connection: Connection,\n  command: ReturnType<typeof saslStart> | ReturnType<typeof saslContinue>\n): Promise<{ payload: string; conversationId: any }> {\n  return connection.commandAsync(ns('$external.$cmd'), command, undefined) as Promise<{\n    payload: string;\n    conversationId: any;\n  }>;\n}\n\nlet krb: typeof Kerberos;\n\nexport class GSSAPI extends AuthProvider {\n  override async auth(authContext: AuthContext): Promise<void> {\n    const { connection, credentials } = authContext;\n    if (credentials == null) {\n      throw new MongoMissingCredentialsError('Credentials required for GSSAPI authentication');\n    }\n\n    const { username } = credentials;\n\n    const client = await makeKerberosClient(authContext);\n\n    const payload = await client.step('');\n\n    const saslStartResponse = await externalCommand(connection, saslStart(payload));\n\n    const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n\n    const saslContinueResponse = await externalCommand(\n      connection,\n      saslContinue(negotiatedPayload, saslStartResponse.conversationId)\n    );\n\n    const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n\n    await externalCommand(connection, {\n      saslContinue: 1,\n      conversationId: saslContinueResponse.conversationId,\n      payload: finalizePayload\n    });\n  }\n}\n\nasync function makeKerberosClient(authContext: AuthContext): Promise<KerberosClient> {\n  const { hostAddress } = authContext.options;\n  const { credentials } = authContext;\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    throw new MongoInvalidArgumentError(\n      'Connection must have host and port and credentials defined.'\n    );\n  }\n\n  loadKrb();\n  if ('kModuleError' in krb) {\n    throw krb['kModuleError'];\n  }\n  const { initializeClient } = krb;\n\n  const { username, password } = credentials;\n  const mechanismProperties = credentials.mechanismProperties as MechanismProperties;\n\n  const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n\n  const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n\n  const initOptions = {};\n  if (password != null) {\n    // TODO(NODE-5139): These do not match the typescript options in initializeClient\n    Object.assign(initOptions, { user: username, password: password });\n  }\n\n  const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n  let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n  if ('SERVICE_REALM' in mechanismProperties) {\n    spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n  }\n\n  return initializeClient(spn, initOptions);\n}\n\nfunction saslStart(payload: string) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  } as const;\n}\n\nfunction saslContinue(payload: string, conversationId: number) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  } as const;\n}\n\nasync function negotiate(\n  client: KerberosClient,\n  retries: number,\n  payload: string\n): Promise<string> {\n  try {\n    const response = await client.step(payload);\n    return response || '';\n  } catch (error) {\n    if (retries === 0) {\n      // Retries exhausted, raise error\n      throw error;\n    }\n    // Adjust number of retries and call step again\n    return negotiate(client, retries - 1, payload);\n  }\n}\n\nasync function finalize(client: KerberosClient, user: string, payload: string): Promise<string> {\n  // GSS Client Unwrap\n  const response = await client.unwrap(payload);\n  return client.wrap(response || '', { user });\n}\n\nexport async function performGSSAPICanonicalizeHostName(\n  host: string,\n  mechanismProperties: MechanismProperties\n): Promise<string> {\n  const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n  if (!mode || mode === GSSAPICanonicalizationValue.none) {\n    return host;\n  }\n\n  // If forward and reverse or true\n  if (\n    mode === GSSAPICanonicalizationValue.on ||\n    mode === GSSAPICanonicalizationValue.forwardAndReverse\n  ) {\n    // Perform the lookup of the ip address.\n    const { address } = await dns.promises.lookup(host);\n\n    try {\n      // Perform a reverse ptr lookup on the ip address.\n      const results = await dns.promises.resolvePtr(address);\n      // If the ptr did not error but had no results, return the host.\n      return results.length > 0 ? results[0] : host;\n    } catch (error) {\n      // This can error as ptr records may not exist for all ips. In this case\n      // fallback to a cname lookup as dns.lookup() does not return the\n      // cname.\n      return resolveCname(host);\n    }\n  } else {\n    // The case for forward is just to resolve the cname as dns.lookup()\n    // will not return it.\n    return resolveCname(host);\n  }\n}\n\nexport async function resolveCname(host: string): Promise<string> {\n  // Attempt to resolve the host name\n  try {\n    const results = await dns.promises.resolveCname(host);\n    // Get the first resolved host id\n    return results.length > 0 ? results[0] : host;\n  } catch {\n    return host;\n  }\n}\n\n/**\n * Load the Kerberos library.\n */\nfunction loadKrb() {\n  if (!krb) {\n    krb = getKerberos();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}