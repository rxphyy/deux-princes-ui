{"ast":null,"code":"'use strict';\n\nconst path = require('path');\nconst pathKey = require('path-key');\nconst npmRunPath = options => {\n  options = {\n    cwd: process.cwd(),\n    path: process.env[pathKey()],\n    execPath: process.execPath,\n    ...options\n  };\n  let previous;\n  let cwdPath = path.resolve(options.cwd);\n  const result = [];\n  while (previous !== cwdPath) {\n    result.push(path.join(cwdPath, 'node_modules/.bin'));\n    previous = cwdPath;\n    cwdPath = path.resolve(cwdPath, '..');\n  }\n\n  // Ensure the running `node` binary is used\n  const execPathDir = path.resolve(options.cwd, options.execPath, '..');\n  result.push(execPathDir);\n  return result.concat(options.path).join(path.delimiter);\n};\nmodule.exports = npmRunPath;\n// TODO: Remove this for the next major release\nmodule.exports.default = npmRunPath;\nmodule.exports.env = options => {\n  options = {\n    env: process.env,\n    ...options\n  };\n  const env = {\n    ...options.env\n  };\n  const path = pathKey({\n    env\n  });\n  options.path = env[path];\n  env[path] = module.exports(options);\n  return env;\n};","map":{"version":3,"names":["path","require","pathKey","npmRunPath","options","cwd","process","env","execPath","previous","cwdPath","resolve","result","push","join","execPathDir","concat","delimiter","module","exports","default"],"sources":["C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/npm-run-path/index.js"],"sourcesContent":["'use strict';\nconst path = require('path');\nconst pathKey = require('path-key');\n\nconst npmRunPath = options => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\tpath: process.env[pathKey()],\n\t\texecPath: process.execPath,\n\t\t...options\n\t};\n\n\tlet previous;\n\tlet cwdPath = path.resolve(options.cwd);\n\tconst result = [];\n\n\twhile (previous !== cwdPath) {\n\t\tresult.push(path.join(cwdPath, 'node_modules/.bin'));\n\t\tprevious = cwdPath;\n\t\tcwdPath = path.resolve(cwdPath, '..');\n\t}\n\n\t// Ensure the running `node` binary is used\n\tconst execPathDir = path.resolve(options.cwd, options.execPath, '..');\n\tresult.push(execPathDir);\n\n\treturn result.concat(options.path).join(path.delimiter);\n};\n\nmodule.exports = npmRunPath;\n// TODO: Remove this for the next major release\nmodule.exports.default = npmRunPath;\n\nmodule.exports.env = options => {\n\toptions = {\n\t\tenv: process.env,\n\t\t...options\n\t};\n\n\tconst env = {...options.env};\n\tconst path = pathKey({env});\n\n\toptions.path = env[path];\n\tenv[path] = module.exports(options);\n\n\treturn env;\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;AAEnC,MAAME,UAAU,GAAGC,OAAO,IAAI;EAC7BA,OAAO,GAAG;IACTC,GAAG,EAAEC,OAAO,CAACD,GAAG,CAAC,CAAC;IAClBL,IAAI,EAAEM,OAAO,CAACC,GAAG,CAACL,OAAO,CAAC,CAAC,CAAC;IAC5BM,QAAQ,EAAEF,OAAO,CAACE,QAAQ;IAC1B,GAAGJ;EACJ,CAAC;EAED,IAAIK,QAAQ;EACZ,IAAIC,OAAO,GAAGV,IAAI,CAACW,OAAO,CAACP,OAAO,CAACC,GAAG,CAAC;EACvC,MAAMO,MAAM,GAAG,EAAE;EAEjB,OAAOH,QAAQ,KAAKC,OAAO,EAAE;IAC5BE,MAAM,CAACC,IAAI,CAACb,IAAI,CAACc,IAAI,CAACJ,OAAO,EAAE,mBAAmB,CAAC,CAAC;IACpDD,QAAQ,GAAGC,OAAO;IAClBA,OAAO,GAAGV,IAAI,CAACW,OAAO,CAACD,OAAO,EAAE,IAAI,CAAC;EACtC;;EAEA;EACA,MAAMK,WAAW,GAAGf,IAAI,CAACW,OAAO,CAACP,OAAO,CAACC,GAAG,EAAED,OAAO,CAACI,QAAQ,EAAE,IAAI,CAAC;EACrEI,MAAM,CAACC,IAAI,CAACE,WAAW,CAAC;EAExB,OAAOH,MAAM,CAACI,MAAM,CAACZ,OAAO,CAACJ,IAAI,CAAC,CAACc,IAAI,CAACd,IAAI,CAACiB,SAAS,CAAC;AACxD,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGhB,UAAU;AAC3B;AACAe,MAAM,CAACC,OAAO,CAACC,OAAO,GAAGjB,UAAU;AAEnCe,MAAM,CAACC,OAAO,CAACZ,GAAG,GAAGH,OAAO,IAAI;EAC/BA,OAAO,GAAG;IACTG,GAAG,EAAED,OAAO,CAACC,GAAG;IAChB,GAAGH;EACJ,CAAC;EAED,MAAMG,GAAG,GAAG;IAAC,GAAGH,OAAO,CAACG;EAAG,CAAC;EAC5B,MAAMP,IAAI,GAAGE,OAAO,CAAC;IAACK;EAAG,CAAC,CAAC;EAE3BH,OAAO,CAACJ,IAAI,GAAGO,GAAG,CAACP,IAAI,CAAC;EACxBO,GAAG,CAACP,IAAI,CAAC,GAAGkB,MAAM,CAACC,OAAO,CAACf,OAAO,CAAC;EAEnC,OAAOG,GAAG;AACX,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}