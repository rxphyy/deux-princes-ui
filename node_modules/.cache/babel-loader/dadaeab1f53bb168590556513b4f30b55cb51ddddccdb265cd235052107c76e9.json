{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasSessionSupport = exports.CryptoConnection = exports.Connection = void 0;\nconst timers_1 = require(\"timers\");\nconst util_1 = require(\"util\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst sessions_1 = require(\"../sessions\");\nconst utils_1 = require(\"../utils\");\nconst command_monitoring_events_1 = require(\"./command_monitoring_events\");\nconst commands_1 = require(\"./commands\");\nconst message_stream_1 = require(\"./message_stream\");\nconst stream_description_1 = require(\"./stream_description\");\nconst shared_1 = require(\"./wire_protocol/shared\");\n/** @internal */\nconst kStream = Symbol('stream');\n/** @internal */\nconst kQueue = Symbol('queue');\n/** @internal */\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\nconst kDescription = Symbol('description');\n/** @internal */\nconst kHello = Symbol('hello');\n/** @internal */\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\nconst INVALID_QUEUE_SIZE = 'Connection internal queue contains more than 1 operation description';\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n  constructor(stream, options) {\n    super();\n    this.commandAsync = (0, util_1.promisify)((ns, cmd, options, callback) => this.command(ns, cmd, options, callback));\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.closed = false;\n    this[kHello] = null;\n    this[kClusterTime] = null;\n    this[kDescription] = new stream_description_1.StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = (0, utils_1.now)();\n    // setup parser stream and message handling\n    this[kQueue] = new Map();\n    this[kMessageStream] = new message_stream_1.MessageStream({\n      ...options,\n      maxBsonMessageSize: this.hello?.maxBsonMessageSize\n    });\n    this[kStream] = stream;\n    this[kDelayedTimeoutId] = null;\n    this[kMessageStream].on('message', message => this.onMessage(message));\n    this[kMessageStream].on('error', error => this.onError(error));\n    this[kStream].on('close', () => this.onClose());\n    this[kStream].on('timeout', () => this.onTimeout());\n    this[kStream].on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    });\n    // hook the message stream up to the passed in stream\n    this[kStream].pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(this[kStream]);\n  }\n  get description() {\n    return this[kDescription];\n  }\n  get hello() {\n    return this[kHello];\n  }\n  // the `connect` method stores the result of the handshake hello on the connection\n  set hello(response) {\n    this[kDescription].receiveResponse(response);\n    this[kDescription] = Object.freeze(this[kDescription]);\n    // TODO: remove this, and only use the `StreamDescription` in the future\n    this[kHello] = response;\n  }\n  // Set the whether the message stream is for a monitoring connection.\n  set isMonitoringConnection(value) {\n    this[kMessageStream].isMonitoringConnection = value;\n  }\n  get isMonitoringConnection() {\n    return this[kMessageStream].isMonitoringConnection;\n  }\n  get serviceId() {\n    return this.hello?.serviceId;\n  }\n  get loadBalanced() {\n    return this.description.loadBalanced;\n  }\n  get generation() {\n    return this[kGeneration] || 0;\n  }\n  set generation(generation) {\n    this[kGeneration] = generation;\n  }\n  get idleTime() {\n    return (0, utils_1.calculateDurationInMs)(this[kLastUseTime]);\n  }\n  get clusterTime() {\n    return this[kClusterTime];\n  }\n  get stream() {\n    return this[kStream];\n  }\n  markAvailable() {\n    this[kLastUseTime] = (0, utils_1.now)();\n  }\n  onError(error) {\n    this.cleanup(true, error);\n  }\n  onClose() {\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(true, new error_1.MongoNetworkError(message));\n  }\n  onTimeout() {\n    this[kDelayedTimeoutId] = (0, timers_1.setTimeout)(() => {\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      this.cleanup(true, new error_1.MongoNetworkTimeoutError(message, {\n        beforeHandshake\n      }));\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  onMessage(message) {\n    const delayedTimeoutId = this[kDelayedTimeoutId];\n    if (delayedTimeoutId != null) {\n      (0, timers_1.clearTimeout)(delayedTimeoutId);\n      this[kDelayedTimeoutId] = null;\n    }\n    const socketTimeoutMS = this[kStream].timeout ?? 0;\n    this[kStream].setTimeout(0);\n    // always emit the message, in case we are streaming\n    this.emit('message', message);\n    let operationDescription = this[kQueue].get(message.responseTo);\n    if (!operationDescription && this.isMonitoringConnection) {\n      // This is how we recover when the initial hello's requestId is not\n      // the responseTo when hello responses have been skipped:\n      // First check if the map is of invalid size\n      if (this[kQueue].size > 1) {\n        this.cleanup(true, new error_1.MongoRuntimeError(INVALID_QUEUE_SIZE));\n      } else {\n        // Get the first orphaned operation description.\n        const entry = this[kQueue].entries().next();\n        if (entry.value != null) {\n          const [requestId, orphaned] = entry.value;\n          // If the orphaned operation description exists then set it.\n          operationDescription = orphaned;\n          // Remove the entry with the bad request id from the queue.\n          this[kQueue].delete(requestId);\n        }\n      }\n    }\n    if (!operationDescription) {\n      return;\n    }\n    const callback = operationDescription.cb;\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n    this[kQueue].delete(message.responseTo);\n    if ('moreToCome' in message && message.moreToCome) {\n      // If the operation description check above does find an orphaned\n      // description and sets the operationDescription then this line will put one\n      // back in the queue with the correct requestId and will resolve not being able\n      // to find the next one via the responseTo of the next streaming hello.\n      this[kQueue].set(message.requestId, operationDescription);\n      this[kStream].setTimeout(socketTimeoutMS);\n    }\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      // If this error is generated by our own code, it will already have the correct class applied\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n      // in either case, it should not be wrapped\n      callback(err);\n      return;\n    }\n    if (message.documents[0]) {\n      const document = message.documents[0];\n      const session = operationDescription.session;\n      if (session) {\n        (0, sessions_1.updateSessionFromResponse)(session, document);\n      }\n      if (document.$clusterTime) {\n        this[kClusterTime] = document.$clusterTime;\n        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n      }\n      if (document.writeConcernError) {\n        callback(new error_1.MongoWriteConcernError(document.writeConcernError, document), document);\n        return;\n      }\n      if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n        callback(new error_1.MongoServerError(document));\n        return;\n      }\n    }\n    callback(undefined, message.documents[0]);\n  }\n  destroy(options, callback) {\n    if (this.closed) {\n      process.nextTick(() => callback?.());\n      return;\n    }\n    if (typeof callback === 'function') {\n      this.once('close', () => process.nextTick(() => callback()));\n    }\n    // load balanced mode requires that these listeners remain on the connection\n    // after cleanup on timeouts, errors or close so we remove them before calling\n    // cleanup.\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(options.force, new error_1.MongoNetworkError(message));\n  }\n  /**\n   * A method that cleans up the connection.  When `force` is true, this method\n   * forcibly destroys the socket.\n   *\n   * If an error is provided, any in-flight operations will be closed with the error.\n   *\n   * This method does nothing if the connection is already closed.\n   */\n  cleanup(force, error) {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n    const completeCleanup = () => {\n      for (const op of this[kQueue].values()) {\n        op.cb(error);\n      }\n      this[kQueue].clear();\n      this.emit(Connection.CLOSE);\n    };\n    this[kStream].removeAllListeners();\n    this[kMessageStream].removeAllListeners();\n    this[kMessageStream].destroy();\n    if (force) {\n      this[kStream].destroy();\n      completeCleanup();\n      return;\n    }\n    if (!this[kStream].writableEnded) {\n      this[kStream].end(() => {\n        this[kStream].destroy();\n        completeCleanup();\n      });\n    } else {\n      completeCleanup();\n    }\n  }\n  command(ns, command, options, callback) {\n    let cmd = {\n      ...command\n    };\n    const readPreference = (0, shared_1.getReadPreference)(options);\n    const shouldUseOpMsg = supportsOpMsg(this);\n    const session = options?.session;\n    let clusterTime = this.clusterTime;\n    if (this.serverApi) {\n      const {\n        version,\n        strict,\n        deprecationErrors\n      } = this.serverApi;\n      cmd.apiVersion = version;\n      if (strict != null) cmd.apiStrict = strict;\n      if (deprecationErrors != null) cmd.apiDeprecationErrors = deprecationErrors;\n    }\n    if (hasSessionSupport(this) && session) {\n      if (session.clusterTime && clusterTime && session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n        clusterTime = session.clusterTime;\n      }\n      const err = (0, sessions_1.applySession)(session, cmd, options);\n      if (err) {\n        return callback(err);\n      }\n    } else if (session?.explicit) {\n      return callback(new error_1.MongoCompatibilityError('Current topology does not support sessions'));\n    }\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      cmd.$clusterTime = clusterTime;\n    }\n    if ((0, shared_1.isSharded)(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n      cmd = {\n        $query: cmd,\n        $readPreference: readPreference.toJSON()\n      };\n    }\n    const commandOptions = Object.assign({\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false,\n      // This value is not overridable\n      secondaryOk: readPreference.secondaryOk()\n    }, options);\n    const cmdNs = `${ns.db}.$cmd`;\n    const message = shouldUseOpMsg ? new commands_1.Msg(cmdNs, cmd, commandOptions) : new commands_1.Query(cmdNs, cmd, commandOptions);\n    try {\n      write(this, message, commandOptions, callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.MESSAGE = constants_1.MESSAGE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\nexports.Connection = Connection;\n/** @internal */\nclass CryptoConnection extends Connection {\n  constructor(stream, options) {\n    super(stream, options);\n    this[kAutoEncrypter] = options.autoEncrypter;\n  }\n  /** @internal @override */\n  command(ns, cmd, options, callback) {\n    const autoEncrypter = this[kAutoEncrypter];\n    if (!autoEncrypter) {\n      return callback(new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n    }\n    const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options, callback);\n    }\n    if (serverWireVersion < 8) {\n      callback(new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2'));\n      return;\n    }\n    // Save sort or indexKeys based on the command being run\n    // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n    // and then deserializes the encrypted result, the protocol level components\n    // of the command (ex. sort) are then converted to JS objects potentially losing\n    // import key order information. These fields are never encrypted so we can save the values\n    // from before the encryption and replace them after encryption has been performed\n    const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n    const indexKeys = cmd.createIndexes ? cmd.indexes.map(index => index.key) : null;\n    autoEncrypter.encrypt(ns.toString(), cmd, options).then(encrypted => {\n      // Replace the saved values\n      if (sort != null && (cmd.find || cmd.findAndModify)) {\n        encrypted.sort = sort;\n      }\n      if (indexKeys != null && cmd.createIndexes) {\n        for (const [offset, index] of indexKeys.entries()) {\n          // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n          encrypted.indexes[offset].key = index;\n        }\n      }\n      super.command(ns, encrypted, options, (err, response) => {\n        if (err || response == null) {\n          callback(err, response);\n          return;\n        }\n        autoEncrypter.decrypt(response, options).then(res => callback(undefined, res), err => callback(err));\n      });\n    }, err => {\n      if (err) {\n        callback(err, null);\n      }\n    });\n  }\n}\nexports.CryptoConnection = CryptoConnection;\n/** @internal */\nfunction hasSessionSupport(conn) {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null;\n}\nexports.hasSessionSupport = hasSessionSupport;\nfunction supportsOpMsg(conn) {\n  const description = conn.description;\n  if (description == null) {\n    return false;\n  }\n  return (0, utils_1.maxWireVersion)(conn) >= 6 && !description.__nodejs_mock_server__;\n}\nfunction streamIdentifier(stream, options) {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n  const {\n    remoteAddress,\n    remotePort\n  } = stream;\n  if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n    return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n  }\n  return (0, utils_1.uuidV4)().toString('hex');\n}\nfunction write(conn, command, options, callback) {\n  options = options ?? {};\n  const operationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    // for BSON parsing\n    useBigInt64: typeof options.useBigInt64 === 'boolean' ? options.useBigInt64 : false,\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    enableUtf8Validation: typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    started: 0\n  };\n  if (conn[kDescription] && conn[kDescription].compressor) {\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\n    if (conn[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n    }\n  }\n  if (typeof options.socketTimeoutMS === 'number') {\n    conn[kStream].setTimeout(options.socketTimeoutMS);\n  } else if (conn.socketTimeoutMS !== 0) {\n    conn[kStream].setTimeout(conn.socketTimeoutMS);\n  }\n  // if command monitoring is enabled we need to modify the callback here\n  if (conn.monitorCommands) {\n    conn.emit(Connection.COMMAND_STARTED, new command_monitoring_events_1.CommandStartedEvent(conn, command));\n    operationDescription.started = (0, utils_1.now)();\n    operationDescription.cb = (err, reply) => {\n      // Command monitoring spec states that if ok is 1, then we must always emit\n      // a command succeeded event, even if there's an error. Write concern errors\n      // will have an ok: 1 in their reply.\n      if (err && reply?.ok !== 1) {\n        conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, err, operationDescription.started));\n      } else {\n        if (reply && (reply.ok === 0 || reply.$err)) {\n          conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, reply, operationDescription.started));\n        } else {\n          conn.emit(Connection.COMMAND_SUCCEEDED, new command_monitoring_events_1.CommandSucceededEvent(conn, command, reply, operationDescription.started));\n        }\n      }\n      if (typeof callback === 'function') {\n        // Since we're passing through the reply with the write concern error now, we\n        // need it not to be provided to the original callback in this case so\n        // retryability does not get tricked into thinking the command actually\n        // succeeded.\n        callback(err, err instanceof error_1.MongoWriteConcernError ? undefined : reply);\n      }\n    };\n  }\n  if (!operationDescription.noResponse) {\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n  try {\n    conn[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      conn[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}","map":{"version":3,"names":["timers_1","require","util_1","constants_1","error_1","mongo_types_1","sessions_1","utils_1","command_monitoring_events_1","commands_1","message_stream_1","stream_description_1","shared_1","kStream","Symbol","kQueue","kMessageStream","kGeneration","kLastUseTime","kClusterTime","kDescription","kHello","kAutoEncrypter","kDelayedTimeoutId","INVALID_QUEUE_SIZE","Connection","TypedEventEmitter","constructor","stream","options","commandAsync","promisify","ns","cmd","callback","command","id","address","streamIdentifier","socketTimeoutMS","monitorCommands","serverApi","closed","StreamDescription","generation","now","Map","MessageStream","maxBsonMessageSize","hello","on","message","onMessage","error","onError","onClose","onTimeout","pipe","description","response","receiveResponse","Object","freeze","isMonitoringConnection","value","serviceId","loadBalanced","idleTime","calculateDurationInMs","clusterTime","markAvailable","cleanup","MongoNetworkError","setTimeout","beforeHandshake","MongoNetworkTimeoutError","unref","delayedTimeoutId","clearTimeout","timeout","emit","operationDescription","get","responseTo","size","MongoRuntimeError","entry","entries","next","requestId","orphaned","delete","cb","moreToCome","set","parse","err","documents","document","session","updateSessionFromResponse","$clusterTime","CLUSTER_TIME_RECEIVED","writeConcernError","MongoWriteConcernError","ok","$err","errmsg","code","MongoServerError","undefined","destroy","process","nextTick","once","removeAllListeners","PINNED","UNPINNED","force","completeCleanup","op","values","clear","CLOSE","writableEnded","end","readPreference","getReadPreference","shouldUseOpMsg","supportsOpMsg","version","strict","deprecationErrors","apiVersion","apiStrict","apiDeprecationErrors","hasSessionSupport","greaterThan","applySession","explicit","MongoCompatibilityError","isSharded","mode","$query","$readPreference","toJSON","commandOptions","assign","numberToSkip","numberToReturn","checkKeys","secondaryOk","cmdNs","db","Msg","Query","write","COMMAND_STARTED","COMMAND_SUCCEEDED","COMMAND_FAILED","MESSAGE","exports","CryptoConnection","autoEncrypter","MongoMissingDependencyError","serverWireVersion","maxWireVersion","sort","find","findAndModify","indexKeys","createIndexes","indexes","map","index","key","encrypt","toString","then","encrypted","offset","decrypt","res","conn","logicalSessionTimeoutMinutes","__nodejs_mock_server__","proxyHost","hostAddress","remoteAddress","remotePort","HostAddress","fromHostPort","uuidV4","noResponse","documentsReturnedIn","useBigInt64","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","enableUtf8Validation","raw","started","compressor","agreedCompressor","zlibCompressionLevel","CommandStartedEvent","reply","CommandFailedEvent","CommandSucceededEvent","writeCommand","e"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cmap\\connection.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\nimport { promisify } from 'util';\n\nimport type { BSONSerializeOptions, Document, ObjectId } from '../bson';\nimport type { AutoEncrypter } from '../client-side-encryption/auto_encrypter';\nimport {\n  CLOSE,\n  CLUSTER_TIME_RECEIVED,\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  MESSAGE,\n  PINNED,\n  UNPINNED\n} from '../constants';\nimport {\n  MongoCompatibilityError,\n  MongoMissingDependencyError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoWriteConcernError\n} from '../error';\nimport type { ServerApi, SupportedNodeConnectionOptions } from '../mongo_client';\nimport { type CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { ReadPreferenceLike } from '../read_preference';\nimport { applySession, type ClientSession, updateSessionFromResponse } from '../sessions';\nimport {\n  calculateDurationInMs,\n  type Callback,\n  HostAddress,\n  maxWireVersion,\n  type MongoDBNamespace,\n  now,\n  uuidV4\n} from '../utils';\nimport type { WriteConcern } from '../write_concern';\nimport type { AuthContext } from './auth/auth_provider';\nimport type { MongoCredentials } from './auth/mongo_credentials';\nimport {\n  CommandFailedEvent,\n  CommandStartedEvent,\n  CommandSucceededEvent\n} from './command_monitoring_events';\nimport { type BinMsg, Msg, Query, type Response, type WriteProtocolMessageType } from './commands';\nimport type { Stream } from './connect';\nimport type { ClientMetadata } from './handshake/client_metadata';\nimport { MessageStream, type OperationDescription } from './message_stream';\nimport { StreamDescription, type StreamDescriptionOptions } from './stream_description';\nimport { getReadPreference, isSharded } from './wire_protocol/shared';\n\n/** @internal */\nconst kStream = Symbol('stream');\n/** @internal */\nconst kQueue = Symbol('queue');\n/** @internal */\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\nconst kDescription = Symbol('description');\n/** @internal */\nconst kHello = Symbol('hello');\n/** @internal */\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\n\nconst INVALID_QUEUE_SIZE = 'Connection internal queue contains more than 1 operation description';\n\n/** @internal */\nexport interface CommandOptions extends BSONSerializeOptions {\n  secondaryOk?: boolean;\n  /** Specify read preference if command supports it */\n  readPreference?: ReadPreferenceLike;\n  monitoring?: boolean;\n  socketTimeoutMS?: number;\n  /** Session to use for the operation */\n  session?: ClientSession;\n  documentsReturnedIn?: string;\n  noResponse?: boolean;\n  omitReadPreference?: boolean;\n\n  // TODO(NODE-2802): Currently the CommandOptions take a property willRetryWrite which is a hint\n  // from executeOperation that the txnNum should be applied to this command.\n  // Applying a session to a command should happen as part of command construction,\n  // most likely in the CommandOperation#executeCommand method, where we have access to\n  // the details we need to determine if a txnNum should also be applied.\n  willRetryWrite?: boolean;\n\n  writeConcern?: WriteConcern;\n}\n\n/** @public */\nexport interface ProxyOptions {\n  proxyHost?: string;\n  proxyPort?: number;\n  proxyUsername?: string;\n  proxyPassword?: string;\n}\n\n/** @public */\nexport interface ConnectionOptions\n  extends SupportedNodeConnectionOptions,\n    StreamDescriptionOptions,\n    ProxyOptions {\n  // Internal creation info\n  id: number | '<monitor>';\n  generation: number;\n  hostAddress: HostAddress;\n  /** @internal */\n  autoEncrypter?: AutoEncrypter;\n  serverApi?: ServerApi;\n  monitorCommands: boolean;\n  /** @internal */\n  connectionType?: typeof Connection;\n  credentials?: MongoCredentials;\n  connectTimeoutMS?: number;\n  tls: boolean;\n  noDelay?: boolean;\n  socketTimeoutMS?: number;\n  cancellationToken?: CancellationToken;\n  metadata: ClientMetadata;\n}\n\n/** @internal */\nexport interface DestroyOptions {\n  /** Force the destruction. */\n  force: boolean;\n}\n\n/** @public */\nexport type ConnectionEvents = {\n  commandStarted(event: CommandStartedEvent): void;\n  commandSucceeded(event: CommandSucceededEvent): void;\n  commandFailed(event: CommandFailedEvent): void;\n  clusterTimeReceived(clusterTime: Document): void;\n  close(): void;\n  message(message: any): void;\n  pinned(pinType: string): void;\n  unpinned(pinType: string): void;\n};\n\n/** @internal */\nexport class Connection extends TypedEventEmitter<ConnectionEvents> {\n  id: number | '<monitor>';\n  address: string;\n  socketTimeoutMS: number;\n  monitorCommands: boolean;\n  /** Indicates that the connection (including underlying TCP socket) has been closed. */\n  closed: boolean;\n  lastHelloMS?: number;\n  serverApi?: ServerApi;\n  helloOk?: boolean;\n  commandAsync: (\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions | undefined\n  ) => Promise<Document>;\n  /** @internal */\n  authContext?: AuthContext;\n\n  /**@internal */\n  [kDelayedTimeoutId]: NodeJS.Timeout | null;\n  /** @internal */\n  [kDescription]: StreamDescription;\n  /** @internal */\n  [kGeneration]: number;\n  /** @internal */\n  [kLastUseTime]: number;\n  /** @internal */\n  [kQueue]: Map<number, OperationDescription>;\n  /** @internal */\n  [kMessageStream]: MessageStream;\n  /** @internal */\n  [kStream]: Stream;\n  /** @internal */\n  [kHello]: Document | null;\n  /** @internal */\n  [kClusterTime]: Document | null;\n\n  /** @event */\n  static readonly COMMAND_STARTED = COMMAND_STARTED;\n  /** @event */\n  static readonly COMMAND_SUCCEEDED = COMMAND_SUCCEEDED;\n  /** @event */\n  static readonly COMMAND_FAILED = COMMAND_FAILED;\n  /** @event */\n  static readonly CLUSTER_TIME_RECEIVED = CLUSTER_TIME_RECEIVED;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly MESSAGE = MESSAGE;\n  /** @event */\n  static readonly PINNED = PINNED;\n  /** @event */\n  static readonly UNPINNED = UNPINNED;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super();\n\n    this.commandAsync = promisify(\n      (\n        ns: MongoDBNamespace,\n        cmd: Document,\n        options: CommandOptions | undefined,\n        callback: Callback\n      ) => this.command(ns, cmd, options, callback as any)\n    );\n\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.closed = false;\n    this[kHello] = null;\n    this[kClusterTime] = null;\n\n    this[kDescription] = new StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = now();\n\n    // setup parser stream and message handling\n    this[kQueue] = new Map();\n    this[kMessageStream] = new MessageStream({\n      ...options,\n      maxBsonMessageSize: this.hello?.maxBsonMessageSize\n    });\n    this[kStream] = stream;\n\n    this[kDelayedTimeoutId] = null;\n\n    this[kMessageStream].on('message', message => this.onMessage(message));\n    this[kMessageStream].on('error', error => this.onError(error));\n    this[kStream].on('close', () => this.onClose());\n    this[kStream].on('timeout', () => this.onTimeout());\n    this[kStream].on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    });\n\n    // hook the message stream up to the passed in stream\n    this[kStream].pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(this[kStream]);\n  }\n\n  get description(): StreamDescription {\n    return this[kDescription];\n  }\n\n  get hello(): Document | null {\n    return this[kHello];\n  }\n\n  // the `connect` method stores the result of the handshake hello on the connection\n  set hello(response: Document | null) {\n    this[kDescription].receiveResponse(response);\n    this[kDescription] = Object.freeze(this[kDescription]);\n\n    // TODO: remove this, and only use the `StreamDescription` in the future\n    this[kHello] = response;\n  }\n\n  // Set the whether the message stream is for a monitoring connection.\n  set isMonitoringConnection(value: boolean) {\n    this[kMessageStream].isMonitoringConnection = value;\n  }\n\n  get isMonitoringConnection(): boolean {\n    return this[kMessageStream].isMonitoringConnection;\n  }\n\n  get serviceId(): ObjectId | undefined {\n    return this.hello?.serviceId;\n  }\n\n  get loadBalanced(): boolean {\n    return this.description.loadBalanced;\n  }\n\n  get generation(): number {\n    return this[kGeneration] || 0;\n  }\n\n  set generation(generation: number) {\n    this[kGeneration] = generation;\n  }\n\n  get idleTime(): number {\n    return calculateDurationInMs(this[kLastUseTime]);\n  }\n\n  get clusterTime(): Document | null {\n    return this[kClusterTime];\n  }\n\n  get stream(): Stream {\n    return this[kStream];\n  }\n\n  markAvailable(): void {\n    this[kLastUseTime] = now();\n  }\n\n  onError(error: Error) {\n    this.cleanup(true, error);\n  }\n\n  onClose() {\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(true, new MongoNetworkError(message));\n  }\n\n  onTimeout() {\n    this[kDelayedTimeoutId] = setTimeout(() => {\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      this.cleanup(true, new MongoNetworkTimeoutError(message, { beforeHandshake }));\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  onMessage(message: BinMsg | Response) {\n    const delayedTimeoutId = this[kDelayedTimeoutId];\n    if (delayedTimeoutId != null) {\n      clearTimeout(delayedTimeoutId);\n      this[kDelayedTimeoutId] = null;\n    }\n\n    const socketTimeoutMS = this[kStream].timeout ?? 0;\n    this[kStream].setTimeout(0);\n\n    // always emit the message, in case we are streaming\n    this.emit('message', message);\n    let operationDescription = this[kQueue].get(message.responseTo);\n\n    if (!operationDescription && this.isMonitoringConnection) {\n      // This is how we recover when the initial hello's requestId is not\n      // the responseTo when hello responses have been skipped:\n\n      // First check if the map is of invalid size\n      if (this[kQueue].size > 1) {\n        this.cleanup(true, new MongoRuntimeError(INVALID_QUEUE_SIZE));\n      } else {\n        // Get the first orphaned operation description.\n        const entry = this[kQueue].entries().next();\n        if (entry.value != null) {\n          const [requestId, orphaned]: [number, OperationDescription] = entry.value;\n          // If the orphaned operation description exists then set it.\n          operationDescription = orphaned;\n          // Remove the entry with the bad request id from the queue.\n          this[kQueue].delete(requestId);\n        }\n      }\n    }\n\n    if (!operationDescription) {\n      return;\n    }\n\n    const callback = operationDescription.cb;\n\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n    this[kQueue].delete(message.responseTo);\n    if ('moreToCome' in message && message.moreToCome) {\n      // If the operation description check above does find an orphaned\n      // description and sets the operationDescription then this line will put one\n      // back in the queue with the correct requestId and will resolve not being able\n      // to find the next one via the responseTo of the next streaming hello.\n      this[kQueue].set(message.requestId, operationDescription);\n      this[kStream].setTimeout(socketTimeoutMS);\n    }\n\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      // If this error is generated by our own code, it will already have the correct class applied\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n      // in either case, it should not be wrapped\n      callback(err);\n      return;\n    }\n\n    if (message.documents[0]) {\n      const document: Document = message.documents[0];\n      const session = operationDescription.session;\n      if (session) {\n        updateSessionFromResponse(session, document);\n      }\n\n      if (document.$clusterTime) {\n        this[kClusterTime] = document.$clusterTime;\n        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n      }\n\n      if (document.writeConcernError) {\n        callback(new MongoWriteConcernError(document.writeConcernError, document), document);\n        return;\n      }\n\n      if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n        callback(new MongoServerError(document));\n        return;\n      }\n    }\n\n    callback(undefined, message.documents[0]);\n  }\n\n  destroy(options: DestroyOptions, callback?: Callback): void {\n    if (this.closed) {\n      process.nextTick(() => callback?.());\n      return;\n    }\n    if (typeof callback === 'function') {\n      this.once('close', () => process.nextTick(() => callback()));\n    }\n\n    // load balanced mode requires that these listeners remain on the connection\n    // after cleanup on timeouts, errors or close so we remove them before calling\n    // cleanup.\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(options.force, new MongoNetworkError(message));\n  }\n\n  /**\n   * A method that cleans up the connection.  When `force` is true, this method\n   * forcibly destroys the socket.\n   *\n   * If an error is provided, any in-flight operations will be closed with the error.\n   *\n   * This method does nothing if the connection is already closed.\n   */\n  private cleanup(force: boolean, error?: Error): void {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const completeCleanup = () => {\n      for (const op of this[kQueue].values()) {\n        op.cb(error);\n      }\n\n      this[kQueue].clear();\n\n      this.emit(Connection.CLOSE);\n    };\n\n    this[kStream].removeAllListeners();\n    this[kMessageStream].removeAllListeners();\n\n    this[kMessageStream].destroy();\n\n    if (force) {\n      this[kStream].destroy();\n      completeCleanup();\n      return;\n    }\n\n    if (!this[kStream].writableEnded) {\n      this[kStream].end(() => {\n        this[kStream].destroy();\n        completeCleanup();\n      });\n    } else {\n      completeCleanup();\n    }\n  }\n\n  command(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions | undefined,\n    callback: Callback\n  ): void {\n    let cmd = { ...command };\n\n    const readPreference = getReadPreference(options);\n    const shouldUseOpMsg = supportsOpMsg(this);\n    const session = options?.session;\n\n    let clusterTime = this.clusterTime;\n\n    if (this.serverApi) {\n      const { version, strict, deprecationErrors } = this.serverApi;\n      cmd.apiVersion = version;\n      if (strict != null) cmd.apiStrict = strict;\n      if (deprecationErrors != null) cmd.apiDeprecationErrors = deprecationErrors;\n    }\n\n    if (hasSessionSupport(this) && session) {\n      if (\n        session.clusterTime &&\n        clusterTime &&\n        session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)\n      ) {\n        clusterTime = session.clusterTime;\n      }\n\n      const err = applySession(session, cmd, options);\n      if (err) {\n        return callback(err);\n      }\n    } else if (session?.explicit) {\n      return callback(new MongoCompatibilityError('Current topology does not support sessions'));\n    }\n\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      cmd.$clusterTime = clusterTime;\n    }\n\n    if (isSharded(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n      cmd = {\n        $query: cmd,\n        $readPreference: readPreference.toJSON()\n      };\n    }\n\n    const commandOptions: Document = Object.assign(\n      {\n        numberToSkip: 0,\n        numberToReturn: -1,\n        checkKeys: false,\n        // This value is not overridable\n        secondaryOk: readPreference.secondaryOk()\n      },\n      options\n    );\n\n    const cmdNs = `${ns.db}.$cmd`;\n    const message = shouldUseOpMsg\n      ? new Msg(cmdNs, cmd, commandOptions)\n      : new Query(cmdNs, cmd, commandOptions);\n\n    try {\n      write(this, message, commandOptions, callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n\n/** @internal */\nexport class CryptoConnection extends Connection {\n  /** @internal */\n  [kAutoEncrypter]?: AutoEncrypter;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super(stream, options);\n    this[kAutoEncrypter] = options.autoEncrypter;\n  }\n\n  /** @internal @override */\n  override command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions,\n    callback: Callback\n  ): void {\n    const autoEncrypter = this[kAutoEncrypter];\n    if (!autoEncrypter) {\n      return callback(new MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n    }\n\n    const serverWireVersion = maxWireVersion(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options, callback);\n    }\n\n    if (serverWireVersion < 8) {\n      callback(\n        new MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2')\n      );\n      return;\n    }\n\n    // Save sort or indexKeys based on the command being run\n    // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n    // and then deserializes the encrypted result, the protocol level components\n    // of the command (ex. sort) are then converted to JS objects potentially losing\n    // import key order information. These fields are never encrypted so we can save the values\n    // from before the encryption and replace them after encryption has been performed\n    const sort: Map<string, number> | null = cmd.find || cmd.findAndModify ? cmd.sort : null;\n    const indexKeys: Map<string, number>[] | null = cmd.createIndexes\n      ? cmd.indexes.map((index: { key: Map<string, number> }) => index.key)\n      : null;\n\n    autoEncrypter.encrypt(ns.toString(), cmd, options).then(\n      encrypted => {\n        // Replace the saved values\n        if (sort != null && (cmd.find || cmd.findAndModify)) {\n          encrypted.sort = sort;\n        }\n        if (indexKeys != null && cmd.createIndexes) {\n          for (const [offset, index] of indexKeys.entries()) {\n            // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n            encrypted.indexes[offset].key = index;\n          }\n        }\n\n        super.command(ns, encrypted, options, (err, response) => {\n          if (err || response == null) {\n            callback(err, response);\n            return;\n          }\n\n          autoEncrypter.decrypt(response, options).then(\n            res => callback(undefined, res),\n            err => callback(err)\n          );\n        });\n      },\n      err => {\n        if (err) {\n          callback(err, null);\n        }\n      }\n    );\n  }\n}\n\n/** @internal */\nexport function hasSessionSupport(conn: Connection): boolean {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null;\n}\n\nfunction supportsOpMsg(conn: Connection) {\n  const description = conn.description;\n  if (description == null) {\n    return false;\n  }\n\n  return maxWireVersion(conn) >= 6 && !description.__nodejs_mock_server__;\n}\n\nfunction streamIdentifier(stream: Stream, options: ConnectionOptions): string {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n\n  const { remoteAddress, remotePort } = stream;\n  if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n    return HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n  }\n\n  return uuidV4().toString('hex');\n}\n\nfunction write(\n  conn: Connection,\n  command: WriteProtocolMessageType,\n  options: CommandOptions,\n  callback: Callback\n) {\n  options = options ?? {};\n  const operationDescription: OperationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n\n    // for BSON parsing\n    useBigInt64: typeof options.useBigInt64 === 'boolean' ? options.useBigInt64 : false,\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    enableUtf8Validation:\n      typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    started: 0\n  };\n\n  if (conn[kDescription] && conn[kDescription].compressor) {\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\n\n    if (conn[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n    }\n  }\n\n  if (typeof options.socketTimeoutMS === 'number') {\n    conn[kStream].setTimeout(options.socketTimeoutMS);\n  } else if (conn.socketTimeoutMS !== 0) {\n    conn[kStream].setTimeout(conn.socketTimeoutMS);\n  }\n\n  // if command monitoring is enabled we need to modify the callback here\n  if (conn.monitorCommands) {\n    conn.emit(Connection.COMMAND_STARTED, new CommandStartedEvent(conn, command));\n\n    operationDescription.started = now();\n    operationDescription.cb = (err, reply) => {\n      // Command monitoring spec states that if ok is 1, then we must always emit\n      // a command succeeded event, even if there's an error. Write concern errors\n      // will have an ok: 1 in their reply.\n      if (err && reply?.ok !== 1) {\n        conn.emit(\n          Connection.COMMAND_FAILED,\n          new CommandFailedEvent(conn, command, err, operationDescription.started)\n        );\n      } else {\n        if (reply && (reply.ok === 0 || reply.$err)) {\n          conn.emit(\n            Connection.COMMAND_FAILED,\n            new CommandFailedEvent(conn, command, reply, operationDescription.started)\n          );\n        } else {\n          conn.emit(\n            Connection.COMMAND_SUCCEEDED,\n            new CommandSucceededEvent(conn, command, reply, operationDescription.started)\n          );\n        }\n      }\n\n      if (typeof callback === 'function') {\n        // Since we're passing through the reply with the write concern error now, we\n        // need it not to be provided to the original callback in this case so\n        // retryability does not get tricked into thinking the command actually\n        // succeeded.\n        callback(err, err instanceof MongoWriteConcernError ? undefined : reply);\n      }\n    };\n  }\n\n  if (!operationDescription.noResponse) {\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n\n  try {\n    conn[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      conn[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}