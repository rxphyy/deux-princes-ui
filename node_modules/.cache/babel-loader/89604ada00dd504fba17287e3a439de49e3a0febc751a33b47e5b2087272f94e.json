{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _toConsumableArray = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _slicedToArray = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _templateObject;\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(entriesFromString);\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nvar dns = require(\"dns\");\nvar mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nvar url_1 = require(\"url\");\nvar mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nvar providers_1 = require(\"./cmap/auth/providers\");\nvar client_metadata_1 = require(\"./cmap/handshake/client_metadata\");\nvar compression_1 = require(\"./cmap/wire_protocol/compression\");\nvar encrypter_1 = require(\"./encrypter\");\nvar error_1 = require(\"./error\");\nvar mongo_client_1 = require(\"./mongo_client\");\nvar mongo_logger_1 = require(\"./mongo_logger\");\nvar read_concern_1 = require(\"./read_concern\");\nvar read_preference_1 = require(\"./read_preference\");\nvar utils_1 = require(\"./utils\");\nvar write_concern_1 = require(\"./write_concern\");\nvar VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nvar LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nvar LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nvar LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nfunction resolveSRVRecord(_x) {\n  return _resolveSRVRecord.apply(this, arguments);\n}\nfunction _resolveSRVRecord() {\n  _resolveSRVRecord = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n    var _txtRecordOptions$get, _txtRecordOptions$get2, _txtRecordOptions$get3;\n    var lookupAddress, addresses, _iterator12, _step12, name, hostAddresses, record, txtRecordOptions, txtRecordOptionKeys, source, replicaSet, loadBalanced;\n    return _regeneratorRuntime().wrap(function _callee$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(typeof options.srvHost !== 'string')) {\n            _context2.next = 2;\n            break;\n          }\n          throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n        case 2:\n          if (!(options.srvHost.split('.').length < 3)) {\n            _context2.next = 4;\n            break;\n          }\n          throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n        case 4:\n          // Resolve the SRV record and use the result as the list of hosts to connect to.\n          lookupAddress = options.srvHost;\n          _context2.next = 7;\n          return dns.promises.resolveSrv(\"_\".concat(options.srvServiceName, \"._tcp.\").concat(lookupAddress));\n        case 7:\n          addresses = _context2.sent;\n          if (!(addresses.length === 0)) {\n            _context2.next = 10;\n            break;\n          }\n          throw new error_1.MongoAPIError('No addresses found at host');\n        case 10:\n          _iterator12 = _createForOfIteratorHelper(addresses);\n          _context2.prev = 11;\n          _iterator12.s();\n        case 13:\n          if ((_step12 = _iterator12.n()).done) {\n            _context2.next = 19;\n            break;\n          }\n          name = _step12.value.name;\n          if ((0, utils_1.matchesParentDomain)(name, lookupAddress)) {\n            _context2.next = 17;\n            break;\n          }\n          throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n        case 17:\n          _context2.next = 13;\n          break;\n        case 19:\n          _context2.next = 24;\n          break;\n        case 21:\n          _context2.prev = 21;\n          _context2.t0 = _context2[\"catch\"](11);\n          _iterator12.e(_context2.t0);\n        case 24:\n          _context2.prev = 24;\n          _iterator12.f();\n          return _context2.finish(24);\n        case 27:\n          hostAddresses = addresses.map(function (r) {\n            var _r$port;\n            return utils_1.HostAddress.fromString(\"\".concat(r.name, \":\").concat((_r$port = r.port) !== null && _r$port !== void 0 ? _r$port : 27017));\n          });\n          validateLoadBalancedOptions(hostAddresses, options, true);\n          // Resolve TXT record and add options from there if they exist.\n          _context2.prev = 29;\n          _context2.next = 32;\n          return dns.promises.resolveTxt(lookupAddress);\n        case 32:\n          record = _context2.sent;\n          _context2.next = 40;\n          break;\n        case 35:\n          _context2.prev = 35;\n          _context2.t1 = _context2[\"catch\"](29);\n          if (!(_context2.t1.code !== 'ENODATA' && _context2.t1.code !== 'ENOTFOUND')) {\n            _context2.next = 39;\n            break;\n          }\n          throw _context2.t1;\n        case 39:\n          return _context2.abrupt(\"return\", hostAddresses);\n        case 40:\n          if (!(record.length > 1)) {\n            _context2.next = 42;\n            break;\n          }\n          throw new error_1.MongoParseError('Multiple text records not allowed');\n        case 42:\n          txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n          txtRecordOptionKeys = _toConsumableArray(txtRecordOptions.keys());\n          if (!txtRecordOptionKeys.some(function (key) {\n            return !VALID_TXT_RECORDS.includes(key);\n          })) {\n            _context2.next = 46;\n            break;\n          }\n          throw new error_1.MongoParseError(\"Text record may only set any of: \".concat(VALID_TXT_RECORDS.join(', ')));\n        case 46:\n          if (!VALID_TXT_RECORDS.some(function (option) {\n            return txtRecordOptions.get(option) === '';\n          })) {\n            _context2.next = 48;\n            break;\n          }\n          throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n        case 48:\n          source = (_txtRecordOptions$get = txtRecordOptions.get('authSource')) !== null && _txtRecordOptions$get !== void 0 ? _txtRecordOptions$get : undefined;\n          replicaSet = (_txtRecordOptions$get2 = txtRecordOptions.get('replicaSet')) !== null && _txtRecordOptions$get2 !== void 0 ? _txtRecordOptions$get2 : undefined;\n          loadBalanced = (_txtRecordOptions$get3 = txtRecordOptions.get('loadBalanced')) !== null && _txtRecordOptions$get3 !== void 0 ? _txtRecordOptions$get3 : undefined;\n          if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n            options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n              source: source\n            });\n          }\n          if (!options.userSpecifiedReplicaSet && replicaSet) {\n            options.replicaSet = replicaSet;\n          }\n          if (loadBalanced === 'true') {\n            options.loadBalanced = true;\n          }\n          if (!(options.replicaSet && options.srvMaxHosts > 0)) {\n            _context2.next = 56;\n            break;\n          }\n          throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n        case 56:\n          validateLoadBalancedOptions(hostAddresses, options, true);\n          return _context2.abrupt(\"return\", hostAddresses);\n        case 58:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee, null, [[11, 21, 24, 27], [29, 35]]);\n  }));\n  return _resolveSRVRecord.apply(this, arguments);\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n  if (!allOptions) return;\n  var check = function check(a, b) {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new error_1.MongoAPIError(\"The '\".concat(a, \"' option cannot be used with the '\").concat(b, \"' option\"));\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  switch (value) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      throw new error_1.MongoParseError(\"\".concat(name, \" must be either \\\"true\\\" or \\\"false\\\"\"));\n  }\n}\nfunction getIntFromOptions(name, value) {\n  var parsedInt = (0, utils_1.parseInteger)(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new error_1.MongoParseError(\"Expected \".concat(name, \" to be stringified int value, got: \").concat(value));\n}\nfunction getUIntFromOptions(name, value) {\n  var parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(\"\".concat(name, \" can only be a positive int value, got: \").concat(value));\n  }\n  return parsedValue;\n}\nfunction entriesFromString(value) {\n  var keyValuePairs, _iterator, _step, keyValue, _keyValue$split, _keyValue$split2, key, _value;\n  return _regeneratorRuntime().wrap(function entriesFromString$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (!(value === '')) {\n          _context.next = 2;\n          break;\n        }\n        return _context.abrupt(\"return\");\n      case 2:\n        keyValuePairs = value.split(',');\n        _iterator = _createForOfIteratorHelper(keyValuePairs);\n        _context.prev = 4;\n        _iterator.s();\n      case 6:\n        if ((_step = _iterator.n()).done) {\n          _context.next = 15;\n          break;\n        }\n        keyValue = _step.value;\n        _keyValue$split = keyValue.split(/:(.*)/), _keyValue$split2 = _slicedToArray(_keyValue$split, 2), key = _keyValue$split2[0], _value = _keyValue$split2[1];\n        if (!(_value == null)) {\n          _context.next = 11;\n          break;\n        }\n        throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n      case 11:\n        _context.next = 13;\n        return [key, _value];\n      case 13:\n        _context.next = 6;\n        break;\n      case 15:\n        _context.next = 20;\n        break;\n      case 17:\n        _context.prev = 17;\n        _context.t0 = _context[\"catch\"](4);\n        _iterator.e(_context.t0);\n      case 20:\n        _context.prev = 20;\n        _iterator.f();\n        return _context.finish(20);\n      case 23:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[4, 17, 20, 23]]);\n}\nvar CaseInsensitiveMap = /*#__PURE__*/function (_Map) {\n  _inherits(CaseInsensitiveMap, _Map);\n  var _super = _createSuper(CaseInsensitiveMap);\n  function CaseInsensitiveMap() {\n    var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    _classCallCheck(this, CaseInsensitiveMap);\n    return _super.call(this, entries.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n      return [k.toLowerCase(), v];\n    }));\n  }\n  _createClass(CaseInsensitiveMap, [{\n    key: \"has\",\n    value: function has(k) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"has\", this).call(this, k.toLowerCase());\n    }\n  }, {\n    key: \"get\",\n    value: function get(k) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"get\", this).call(this, k.toLowerCase());\n    }\n  }, {\n    key: \"set\",\n    value: function set(k, v) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"set\", this).call(this, k.toLowerCase(), v);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(k) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"delete\", this).call(this, k.toLowerCase());\n    }\n  }]);\n  return CaseInsensitiveMap;\n}( /*#__PURE__*/_wrapNativeSuper(Map));\nfunction parseOptions(uri) {\n  var _mongoOptions$loggerF;\n  var mongoClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n  // validate BSONOptions\n  if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n  if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n  var url = new mongodb_connection_string_url_1.default(uri);\n  var hosts = url.hosts,\n    isSRV = url.isSRV;\n  var mongoOptions = Object.create(null);\n  // Feature flags\n  var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertySymbols(options)),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var flag = _step2.value;\n      if (exports.FEATURE_FLAGS.has(flag)) {\n        mongoOptions[flag] = options[flag];\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  var urlOptions = new CaseInsensitiveMap();\n  if (url.pathname !== '/' && url.pathname !== '') {\n    var dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n  if (url.username !== '') {\n    var auth = {\n      username: decodeURIComponent(url.username)\n    };\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n    urlOptions.set('auth', [auth]);\n  }\n  var _iterator3 = _createForOfIteratorHelper(url.searchParams.keys()),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _key = _step3.value;\n      var _values = url.searchParams.getAll(_key);\n      var isReadPreferenceTags = /readPreferenceTags/i.test(_key);\n      if (!isReadPreferenceTags && _values.length > 1) {\n        throw new error_1.MongoInvalidArgumentError(\"URI option \\\"\".concat(_key, \"\\\" cannot appear more than once in the connection string\"));\n      }\n      if (!isReadPreferenceTags && _values.includes('')) {\n        throw new error_1.MongoAPIError(\"URI option \\\"\".concat(_key, \"\\\" cannot be specified with no value\"));\n      }\n      if (!urlOptions.has(_key)) {\n        urlOptions.set(_key, _values);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  var objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      v = _ref4[1];\n    return v != null;\n  }));\n  // Validate options that can only be provided by one of uri or object\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n  var uriMechanismProperties = urlOptions.get('authMechanismProperties');\n  if (uriMechanismProperties) {\n    var _iterator4 = _createForOfIteratorHelper(uriMechanismProperties),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var property = _step4.value;\n        if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n          throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n  // All option collection\n  var allProvidedOptions = new CaseInsensitiveMap();\n  var allProvidedKeys = new Set([].concat(_toConsumableArray(urlOptions.keys()), _toConsumableArray(objectOptions.keys())));\n  var _iterator5 = _createForOfIteratorHelper(allProvidedKeys),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _urlOptions$get2;\n      var _key2 = _step5.value;\n      var _values2 = [];\n      var objectOptionValue = objectOptions.get(_key2);\n      if (objectOptionValue != null) {\n        _values2.push(objectOptionValue);\n      }\n      var urlValues = (_urlOptions$get2 = urlOptions.get(_key2)) !== null && _urlOptions$get2 !== void 0 ? _urlOptions$get2 : [];\n      _values2.push.apply(_values2, _toConsumableArray(urlValues));\n      allProvidedOptions.set(_key2, _values2);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n    var tlsAndSslOpts = (allProvidedOptions.get('tls') || []).concat(allProvidedOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n  checkTLSOptions(allProvidedOptions);\n  var unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(function (s) {\n    return s.toLowerCase();\n  }));\n  if (unsupportedOptions.size !== 0) {\n    var optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    var isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(\"\".concat(optionWord, \" \").concat(Array.from(unsupportedOptions).join(', '), \" \").concat(isOrAre, \" not supported\"));\n  }\n  // Option parsing and setting\n  for (var _i = 0, _Object$entries = Object.entries(exports.OPTIONS); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      descriptor = _Object$entries$_i[1];\n    var values = allProvidedOptions.get(key);\n    if (!values || values.length === 0) {\n      if (exports.DEFAULT_OPTIONS.has(key)) {\n        setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n      }\n    } else {\n      var deprecated = descriptor.deprecated;\n      if (deprecated) {\n        var deprecatedMsg = typeof deprecated === 'string' ? \": \".concat(deprecated) : '';\n        (0, utils_1.emitWarning)(\"\".concat(key, \" is a deprecated option\").concat(deprecatedMsg));\n      }\n      setOption(mongoOptions, key, descriptor, values);\n    }\n  }\n  if (mongoOptions.credentials) {\n    var isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    var isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    var isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n    var isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n    if ((isGssapi || isX509) && allProvidedOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(\"authMechanism \".concat(mongoOptions.credentials.mechanism, \" requires an authSource of '$external'\"));\n    }\n    if (!(isGssapi || isX509 || isAws || isOidc) && mongoOptions.dbName && !allProvidedOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new error_1.MongoMissingCredentialsError(\"When using \".concat(mongoOptions.credentials.mechanism, \" password must be set when a username is specified\"));\n    }\n    mongoOptions.credentials.validate();\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n  // Potential SRV Overrides and SRV connection string validations\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n    // SRV turns on TLS by default, but users can override and turn it off\n    var noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    var noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    var userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n  var proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(function (key) {\n    var _urlOptions$get;\n    return (_urlOptions$get = urlOptions.get(key)) !== null && _urlOptions$get !== void 0 ? _urlOptions$get : [];\n  });\n  if (proxyOptions.some(function (options) {\n    return options.length > 1;\n  })) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n  var loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = (_mongoOptions$loggerF = mongoOptions[loggerFeatureFlag]) !== null && _mongoOptions$loggerF !== void 0 ? _mongoOptions$loggerF : false;\n  var loggerEnvOptions = {};\n  var loggerClientOptions = {};\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = _objectSpread({\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH\n    }, mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]);\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath\n    };\n  }\n  mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n  mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n  return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n  var target = descriptor.target,\n    type = descriptor.type,\n    transform = descriptor.transform;\n  var name = target !== null && target !== void 0 ? target : key;\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(\"\".concat(name, \" must be an object\"));\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n        var transformValue = transform({\n          name: name,\n          options: mongoOptions,\n          values: values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\nexports.OPTIONS = {\n  appName: {\n    type: 'string'\n  },\n  auth: {\n    target: 'credentials',\n    transform: function transform(_ref5) {\n      var name = _ref5.name,\n        options = _ref5.options,\n        _ref5$values = _slicedToArray(_ref5.values, 1),\n        value = _ref5$values[0];\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(\"\".concat(name, \" must be an object with 'username' and 'password' properties\"));\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform: function transform(_ref6) {\n      var _options$credentials, _options$credentials2;\n      var options = _ref6.options,\n        _ref6$values = _slicedToArray(_ref6.values, 1),\n        value = _ref6$values[0];\n      var mechanisms = Object.values(providers_1.AuthMechanism);\n      var _mechanisms$filter = mechanisms.filter(function (m) {\n          return m.match(RegExp(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\b\", \"\\b\"], [\"\\\\b\", \"\\\\b\"])), value), 'i'));\n        }),\n        _mechanisms$filter2 = _slicedToArray(_mechanisms$filter, 1),\n        mechanism = _mechanisms$filter2[0];\n      if (!mechanism) {\n        throw new error_1.MongoParseError(\"authMechanism one of \".concat(mechanisms, \", got \").concat(value));\n      }\n      var source = (_options$credentials = options.credentials) === null || _options$credentials === void 0 ? void 0 : _options$credentials.source;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n      var password = (_options$credentials2 = options.credentials) === null || _options$credentials2 === void 0 ? void 0 : _options$credentials2.password;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism: mechanism,\n        source: source,\n        password: password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform: function transform(_ref7) {\n      var options = _ref7.options,\n        values = _ref7.values;\n      // We can have a combination of options passed in the URI and options passed\n      // as an object to the MongoClient. So we must transform the string options\n      // as well as merge them together with a potentially provided object.\n      var mechanismProperties = Object.create(null);\n      var _iterator6 = _createForOfIteratorHelper(values),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var optionValue = _step6.value;\n          if (typeof optionValue === 'string') {\n            var _iterator7 = _createForOfIteratorHelper(entriesFromString(optionValue)),\n              _step7;\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var _step7$value = _slicedToArray(_step7.value, 2),\n                  key = _step7$value[0],\n                  value = _step7$value[1];\n                try {\n                  mechanismProperties[key] = getBoolean(key, value);\n                } catch (_unused) {\n                  mechanismProperties[key] = value;\n                }\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          } else {\n            if (!(0, utils_1.isRecord)(optionValue)) {\n              throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n            }\n            mechanismProperties = _objectSpread({}, optionValue);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: mechanismProperties\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform: function transform(_ref8) {\n      var options = _ref8.options,\n        _ref8$values = _slicedToArray(_ref8.values, 1),\n        value = _ref8$values[0];\n      var source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source: source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform: function transform(_ref9) {\n      var _ref9$values = _slicedToArray(_ref9.values, 1),\n        version = _ref9$values[0];\n      var serverApiToValidate = typeof version === 'string' ? {\n        version: version\n      } : version;\n      var versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(\"Invalid `serverApi` property; must specify a version from the following enum: [\\\"\".concat(Object.values(mongo_client_1.ServerApiVersion).join('\", \"'), \"\\\"]\"));\n      }\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(function (v) {\n        return v === versionToValidate;\n      })) {\n        throw new error_1.MongoParseError(\"Invalid server API version=\".concat(versionToValidate, \"; must be in the following enum: [\\\"\").concat(Object.values(mongo_client_1.ServerApiVersion).join('\", \"'), \"\\\"]\"));\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform: function transform(_ref10) {\n      var values = _ref10.values;\n      var compressionList = new Set();\n      var _iterator8 = _createForOfIteratorHelper(values),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var compVal = _step8.value;\n          var compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n          if (!Array.isArray(compValArray)) {\n            throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n          }\n          var _iterator9 = _createForOfIteratorHelper(compValArray),\n            _step9;\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var c = _step9.value;\n              if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                compressionList.add(String(c));\n              } else {\n                throw new error_1.MongoInvalidArgumentError(\"\".concat(c, \" is not a valid compression mechanism. Must be one of: \").concat(Object.keys(compression_1.Compressor), \".\"));\n              }\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      return _toConsumableArray(compressionList);\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    default: {},\n    type: 'record'\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform: function transform(_ref11) {\n      var name = _ref11.name,\n        _ref11$values = _slicedToArray(_ref11.values, 1),\n        value = _ref11$values[0];\n      var transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new error_1.MongoParseError(\"Option 'family' must be 4 or 6 got \".concat(transformValue, \".\"));\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform: function transform(_ref12) {\n      var name = _ref12.name,\n        options = _ref12.options,\n        _ref12$values = _slicedToArray(_ref12.values, 1),\n        value = _ref12$values[0];\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread(_objectSpread({}, options.writeConcern), {}, {\n          fsync: getBoolean(name, value)\n        })\n      });\n      if (!wc) throw new error_1.MongoParseError(\"Unable to make a writeConcern from fsync=\".concat(value));\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform: function transform(_ref13) {\n      var name = _ref13.name,\n        options = _ref13.options,\n        _ref13$values = _slicedToArray(_ref13.values, 1),\n        value = _ref13$values[0];\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread(_objectSpread({}, options.writeConcern), {}, {\n          journal: getBoolean(name, value)\n        })\n      });\n      if (!wc) throw new error_1.MongoParseError(\"Unable to make a writeConcern from journal=\".concat(value));\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform: function transform(_ref14) {\n      var name = _ref14.name,\n        options = _ref14.options,\n        _ref14$values = _slicedToArray(_ref14.values, 1),\n        value = _ref14$values[0];\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread(_objectSpread({}, options.writeConcern), {}, {\n          journal: getBoolean(name, value)\n        })\n      });\n      if (!wc) throw new error_1.MongoParseError(\"Unable to make a writeConcern from journal=\".concat(value));\n      return wc;\n    }\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n    transform: function transform(_ref15) {\n      var name = _ref15.name,\n        _ref15$values = _slicedToArray(_ref15.values, 1),\n        value = _ref15$values[0];\n      var maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform: function transform(_ref16) {\n      var name = _ref16.name,\n        options = _ref16.options,\n        _ref16$values = _slicedToArray(_ref16.values, 1),\n        value = _ref16$values[0];\n      var maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: _objectSpread(_objectSpread({}, options.readPreference), {}, {\n            maxStalenessSeconds: maxStalenessSeconds\n          })\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds: maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform: function transform(_ref17) {\n      var _ref17$values = _slicedToArray(_ref17.values, 1),\n        value = _ref17$values[0],\n        options = _ref17.options;\n      return _objectSpread(_objectSpread({}, options.driverInfo), {}, {\n        name: String(value)\n      });\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform: function transform(_ref18) {\n      var _ref18$values = _slicedToArray(_ref18.values, 1),\n        value = _ref18$values[0];\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n      throw new error_1.MongoParseError(\"Option pkFactory must be an object with a createPk function, got \".concat(value));\n    }\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  useBigInt64: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform: function transform(_ref19) {\n      var _ref19$values = _slicedToArray(_ref19.values, 1),\n        value = _ref19$values[0],\n        options = _ref19.options;\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions(_objectSpread(_objectSpread({}, options.readConcern), value));\n      }\n      throw new error_1.MongoParseError(\"ReadConcern must be an object, got \".concat(JSON.stringify(value)));\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform: function transform(_ref20) {\n      var _ref20$values = _slicedToArray(_ref20.values, 1),\n        level = _ref20$values[0],\n        options = _ref20.options;\n      return read_concern_1.ReadConcern.fromOptions(_objectSpread(_objectSpread({}, options.readConcern), {}, {\n        level: level\n      }));\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform: function transform(_ref21) {\n      var _ref21$values = _slicedToArray(_ref21.values, 1),\n        value = _ref21$values[0],\n        options = _ref21.options;\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions(_objectSpread({\n          readPreference: _objectSpread(_objectSpread({}, options.readPreference), value)\n        }, value));\n      }\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        var rp = read_preference_1.ReadPreference.fromOptions(_objectSpread({\n          readPreference: _objectSpread(_objectSpread({}, options.readPreference), value)\n        }, value));\n        if (rp) return rp;else throw new error_1.MongoParseError(\"Cannot make read preference from \".concat(JSON.stringify(value)));\n      }\n      if (typeof value === 'string') {\n        var _options$readPreferen, _options$readPreferen2, _options$readPreferen3;\n        var rpOpts = {\n          hedge: (_options$readPreferen = options.readPreference) === null || _options$readPreferen === void 0 ? void 0 : _options$readPreferen.hedge,\n          maxStalenessSeconds: (_options$readPreferen2 = options.readPreference) === null || _options$readPreferen2 === void 0 ? void 0 : _options$readPreferen2.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_options$readPreferen3 = options.readPreference) === null || _options$readPreferen3 === void 0 ? void 0 : _options$readPreferen3.tags, rpOpts);\n      }\n      throw new error_1.MongoParseError(\"Unknown ReadPreference value: \".concat(value));\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform: function transform(_ref22) {\n      var values = _ref22.values,\n        options = _ref22.options;\n      var tags = Array.isArray(values[0]) ? values[0] : values;\n      var readPreferenceTags = [];\n      var _iterator10 = _createForOfIteratorHelper(tags),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var tag = _step10.value;\n          var readPreferenceTag = Object.create(null);\n          if (typeof tag === 'string') {\n            var _iterator11 = _createForOfIteratorHelper(entriesFromString(tag)),\n              _step11;\n            try {\n              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                var _step11$value = _slicedToArray(_step11.value, 2),\n                  k = _step11$value[0],\n                  v = _step11$value[1];\n                readPreferenceTag[k] = v;\n              }\n            } catch (err) {\n              _iterator11.e(err);\n            } finally {\n              _iterator11.f();\n            }\n          }\n          if ((0, utils_1.isRecord)(tag)) {\n            for (var _i2 = 0, _Object$entries2 = Object.entries(tag); _i2 < _Object$entries2.length; _i2++) {\n              var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n                _k = _Object$entries2$_i[0],\n                _v = _Object$entries2$_i[1];\n              readPreferenceTag[_k] = _v;\n            }\n          }\n          readPreferenceTags.push(readPreferenceTag);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags: readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform: function transform(_ref23) {\n      var name = _ref23.name,\n        _ref23$values = _slicedToArray(_ref23.values, 1),\n        value = _ref23$values[0];\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform: function transform(_ref24) {\n      var name = _ref24.name,\n        _ref24$values = _slicedToArray(_ref24.values, 1),\n        value = _ref24$values[0];\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? function () {\n        return undefined;\n      } : undefined;\n    }\n  },\n  tlsCAFile: {\n    type: 'string'\n  },\n  tlsCRLFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform: function transform(_ref25) {\n      var name = _ref25.name,\n        options = _ref25.options,\n        _ref25$values = _slicedToArray(_ref25.values, 1),\n        value = _ref25$values[0];\n      var tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = function () {\n          return undefined;\n        };\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? function () {\n          return undefined;\n        } : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform: function transform(_ref26) {\n      var _ref26$values = _slicedToArray(_ref26.values, 1),\n        value = _ref26$values[0],\n        options = _ref26.options;\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread(_objectSpread({}, options.writeConcern), {}, {\n          w: value\n        })\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform: function transform(_ref27) {\n      var _ref27$values = _slicedToArray(_ref27.values, 1),\n        value = _ref27$values[0],\n        options = _ref27.options;\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: _objectSpread(_objectSpread({}, options.writeConcern), value)\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: _objectSpread(_objectSpread({}, options.writeConcern), {}, {\n            w: value\n          })\n        });\n      }\n      throw new error_1.MongoParseError(\"Invalid WriteConcern cannot parse: \".concat(JSON.stringify(value)));\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform: function transform(_ref28) {\n      var _ref28$values = _slicedToArray(_ref28.values, 1),\n        value = _ref28$values[0],\n        options = _ref28.options;\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread(_objectSpread({}, options.writeConcern), {}, {\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        })\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(\"Cannot make WriteConcern from wtimeout\");\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform: function transform(_ref29) {\n      var _ref29$values = _slicedToArray(_ref29.values, 1),\n        value = _ref29$values[0],\n        options = _ref29.options;\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread(_objectSpread({}, options.writeConcern), {}, {\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        })\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(\"Cannot make WriteConcern from wtimeout\");\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy options from v3 era\n  useNewUrlParser: {\n    type: 'boolean',\n    deprecated: 'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  },\n  useUnifiedTopology: {\n    type: 'boolean',\n    deprecated: 'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  },\n  // MongoLogger\n  // TODO(NODE-4849): Tighten the type of mongodbLogPath\n  mongodbLogPath: {\n    type: 'any'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(function (_ref30) {\n  var _ref31 = _slicedToArray(_ref30, 2),\n    descriptor = _ref31[1];\n  return descriptor.default != null;\n}).map(function (_ref32) {\n  var _ref33 = _slicedToArray(_ref32, 2),\n    k = _ref33[0],\n    d = _ref33[1];\n  return [k, d.default];\n}));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect'), Symbol.for('@@mdb.enableMongoLogger'), Symbol.for('@@mdb.internalLoggerConfig')]);","map":{"version":3,"names":["entriesFromString","dns","require","mongodb_connection_string_url_1","url_1","mongo_credentials_1","providers_1","client_metadata_1","compression_1","encrypter_1","error_1","mongo_client_1","mongo_logger_1","read_concern_1","read_preference_1","utils_1","write_concern_1","VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","resolveSRVRecord","_x","_resolveSRVRecord","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","_txtRecordOptions$get","_txtRecordOptions$get2","_txtRecordOptions$get3","lookupAddress","addresses","_iterator12","_step12","name","hostAddresses","record","txtRecordOptions","txtRecordOptionKeys","source","replicaSet","loadBalanced","wrap","_callee$","_context2","prev","next","srvHost","MongoAPIError","split","length","promises","resolveSrv","concat","srvServiceName","sent","_createForOfIteratorHelper","s","n","done","value","matchesParentDomain","t0","e","f","finish","map","r","_r$port","HostAddress","fromString","port","validateLoadBalancedOptions","resolveTxt","t1","code","abrupt","MongoParseError","URLSearchParams","join","_toConsumableArray","keys","some","key","includes","option","get","undefined","userSpecifiedAuthSource","credentials","AUTH_MECHS_AUTH_SRC_EXTERNAL","has","mechanism","MongoCredentials","merge","userSpecifiedReplicaSet","srvMaxHosts","stop","exports","checkTLSOptions","allOptions","check","a","b","getBoolean","getIntFromOptions","parsedInt","parseInteger","getUIntFromOptions","parsedValue","keyValuePairs","_iterator","_step","keyValue","_keyValue$split","_keyValue$split2","_value","entriesFromString$","_context","_slicedToArray","_marked","CaseInsensitiveMap","_Map","_inherits","_super","_createSuper","entries","_classCallCheck","call","_ref","_ref2","k","v","toLowerCase","_createClass","_get","_getPrototypeOf","prototype","set","_delete","_wrapNativeSuper","Map","parseOptions","uri","_mongoOptions$loggerF","mongoClient","MongoClient","useBigInt64","promoteLongs","promoteValues","url","default","hosts","isSRV","mongoOptions","Object","create","_iterator2","getOwnPropertySymbols","_step2","flag","FEATURE_FLAGS","err","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","_iterator3","searchParams","_step3","values","getAll","isReadPreferenceTags","test","MongoInvalidArgumentError","objectOptions","filter","_ref3","_ref4","uriMechanismProperties","_iterator4","_step4","property","allProvidedOptions","allProvidedKeys","Set","_iterator5","_step5","_urlOptions$get2","objectOptionValue","push","urlValues","tlsAndSslOpts","bind","size","unsupportedOptions","setDifference","Array","from","OPTIONS","optionWord","isOrAre","_i","_Object$entries","_Object$entries$_i","descriptor","DEFAULT_OPTIONS","setOption","deprecated","deprecatedMsg","emitWarning","isGssapi","AuthMechanism","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","isOidc","MONGODB_OIDC","MongoMissingCredentialsError","validate","MONGODB_DEFAULT","mechanismProperties","autoEncryption","Encrypter","checkForMongoCrypt","encrypter","autoEncrypter","directConnection","noUserSpecifiedTLS","noUserSpecifiedSSL","tls","userSpecifiedSrvOptions","proxyHost","proxyPort","proxyUsername","proxyPassword","proxyOptions","_urlOptions$get","loggerFeatureFlag","Symbol","for","loggerEnvOptions","loggerClientOptions","_objectSpread","MONGODB_LOG_COMMAND","process","env","MONGODB_LOG_TOPOLOGY","MONGODB_LOG_SERVER_SELECTION","MONGODB_LOG_CONNECTION","MONGODB_LOG_ALL","MONGODB_LOG_MAX_DOCUMENT_LENGTH","MONGODB_LOG_PATH","mongodbLogPath","mongoLoggerOptions","MongoLogger","resolveOptions","metadata","makeClientMetadata","isSrv","target","type","transform","String","isRecord","transformValue","appName","_ref5","_ref5$values","authMechanism","_ref6","_options$credentials","_options$credentials2","_ref6$values","mechanisms","_mechanisms$filter","m","match","RegExp","raw","_templateObject","_taggedTemplateLiteral","_mechanisms$filter2","MONGODB_PLAIN","authMechanismProperties","_ref7","_iterator6","_step6","optionValue","_iterator7","_step7","_step7$value","_unused","authSource","_ref8","_ref8$values","bsonRegExp","serverApi","_ref9","_ref9$values","version","serverApiToValidate","versionToValidate","ServerApiVersion","checkKeys","compressors","_ref10","compressionList","_iterator8","_step8","compVal","compValArray","isArray","_iterator9","_step9","c","Compressor","add","connectTimeoutMS","driverInfo","enableUtf8Validation","family","_ref11","_ref11$values","fieldsAsRaw","forceServerObjectId","fsync","_ref12","_ref12$values","wc","WriteConcern","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","_ref13","_ref13$values","journal","_ref14","_ref14$values","localThresholdMS","maxConnecting","_ref15","_ref15$values","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","_ref16","_ref16$values","readPreference","ReadPreference","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","_ref17","_ref17$values","noDelay","pkFactory","DEFAULT_PK_FACTORY","_ref18","_ref18$values","createPk","promoteBuffers","readConcern","_ref19","_ref19$values","ReadConcern","JSON","stringify","readConcernLevel","_ref20","_ref20$values","level","primary","_ref21","_ref21$values","rp","_options$readPreferen","_options$readPreferen2","_options$readPreferen3","rpOpts","hedge","tags","readPreferenceTags","_ref22","_iterator10","_step10","tag","readPreferenceTag","_iterator11","_step11","_step11$value","_i2","_Object$entries2","_Object$entries2$_i","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","tlsAllowInvalidCertificates","_ref23","_ref23$values","tlsAllowInvalidHostnames","_ref24","_ref24$values","tlsCAFile","tlsCRLFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","_ref25","_ref25$values","checkServerIdentity","rejectUnauthorized","w","_ref26","_ref26$values","waitQueueTimeoutMS","_ref27","_ref27$values","wtimeout","_ref28","_ref28$values","wtimeoutMS","_ref29","_ref29$values","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","_ref30","_ref31","_ref32","_ref33","d"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\nimport ConnectionString from 'mongodb-connection-string-url';\nimport { URLSearchParams } from 'url';\n\nimport type { Document } from './bson';\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './cmap/auth/providers';\nimport { makeClientMetadata } from './cmap/handshake/client_metadata';\nimport { Compressor, type CompressorName } from './cmap/wire_protocol/compression';\nimport { Encrypter } from './encrypter';\nimport {\n  MongoAPIError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError,\n  MongoParseError\n} from './error';\nimport {\n  MongoClient,\n  type MongoClientOptions,\n  type MongoOptions,\n  type PkFactory,\n  type ServerApi,\n  ServerApiVersion\n} from './mongo_client';\nimport {\n  MongoLogger,\n  type MongoLoggerEnvOptions,\n  type MongoLoggerMongoClientOptions\n} from './mongo_logger';\nimport { ReadConcern, type ReadConcernLevel } from './read_concern';\nimport { ReadPreference, type ReadPreferenceMode } from './read_preference';\nimport type { TagSet } from './sdam/server_description';\nimport {\n  DEFAULT_PK_FACTORY,\n  emitWarning,\n  HostAddress,\n  isRecord,\n  matchesParentDomain,\n  parseInteger,\n  setDifference\n} from './utils';\nimport { type W, WriteConcern } from './write_concern';\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\n\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR =\n  'loadBalanced option not supported when directConnection is provided';\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nexport async function resolveSRVRecord(options: MongoOptions): Promise<HostAddress[]> {\n  if (typeof options.srvHost !== 'string') {\n    throw new MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    throw new MongoAPIError('URI must include hostname, domain name, and tld');\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  const addresses = await dns.promises.resolveSrv(\n    `_${options.srvServiceName}._tcp.${lookupAddress}`\n  );\n\n  if (addresses.length === 0) {\n    throw new MongoAPIError('No addresses found at host');\n  }\n\n  for (const { name } of addresses) {\n    if (!matchesParentDomain(name, lookupAddress)) {\n      throw new MongoAPIError('Server record does not share hostname with parent URI');\n    }\n  }\n\n  const hostAddresses = addresses.map(r => HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  // Resolve TXT record and add options from there if they exist.\n  let record;\n  try {\n    record = await dns.promises.resolveTxt(lookupAddress);\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n    return hostAddresses;\n  }\n\n  if (record.length > 1) {\n    throw new MongoParseError('Multiple text records not allowed');\n  }\n\n  const txtRecordOptions = new URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n\n  const source = txtRecordOptions.get('authSource') ?? undefined;\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n\n  if (\n    !options.userSpecifiedAuthSource &&\n    source &&\n    options.credentials &&\n    !AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)\n  ) {\n    options.credentials = MongoCredentials.merge(options.credentials, { source });\n  }\n\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  return hostAddresses;\n}\n\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions: CaseInsensitiveMap): void {\n  if (!allOptions) return;\n  const check = (a: string, b: string) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name: string, value: unknown): boolean {\n  if (typeof value === 'boolean') return value;\n  switch (value) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      throw new MongoParseError(`${name} must be either \"true\" or \"false\"`);\n  }\n}\n\nfunction getIntFromOptions(name: string, value: unknown): number {\n  const parsedInt = parseInteger(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUIntFromOptions(name: string, value: unknown): number {\n  const parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\n\nfunction* entriesFromString(value: string): Generator<[string, string]> {\n  if (value === '') {\n    return;\n  }\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(/:(.*)/);\n    if (value == null) {\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap<Value = any> extends Map<string, Value> {\n  constructor(entries: Array<[string, any]> = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  override has(k: string) {\n    return super.has(k.toLowerCase());\n  }\n  override get(k: string) {\n    return super.get(k.toLowerCase());\n  }\n  override set(k: string, v: any) {\n    return super.set(k.toLowerCase(), v);\n  }\n  override delete(k: string): boolean {\n    return super.delete(k.toLowerCase());\n  }\n}\n\nexport function parseOptions(\n  uri: string,\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\n  options: MongoClientOptions = {}\n): MongoOptions {\n  if (mongoClient != null && !(mongoClient instanceof MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  // validate BSONOptions\n  if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n    throw new MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n\n  if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n    throw new MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n\n  const url = new ConnectionString(uri);\n  const { hosts, isSRV } = url;\n\n  const mongoOptions = Object.create(null);\n\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\n\n  const urlOptions = new CaseInsensitiveMap<unknown[]>();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\n    );\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth: Document = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = url.searchParams.getAll(key);\n\n    const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n\n    if (!isReadPreferenceTags && values.length > 1) {\n      throw new MongoInvalidArgumentError(\n        `URI option \"${key}\" cannot appear more than once in the connection string`\n      );\n    }\n\n    if (!isReadPreferenceTags && values.includes('')) {\n      throw new MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap<unknown>(\n    Object.entries(options).filter(([, v]) => v != null)\n  );\n\n  // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new MongoParseError(\n      'URI cannot contain `serverApi`, it can only be passed to the client'\n    );\n  }\n\n  const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n  if (uriMechanismProperties) {\n    for (const property of uriMechanismProperties) {\n      if (/(^|,)ALLOWED_HOSTS:/.test(property as string)) {\n        throw new MongoParseError(\n          'Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.'\n        );\n      }\n    }\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  // All option collection\n\n  const allProvidedOptions = new CaseInsensitiveMap<unknown[]>();\n\n  const allProvidedKeys = new Set<string>([...urlOptions.keys(), ...objectOptions.keys()]);\n\n  for (const key of allProvidedKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n\n    const urlValues = urlOptions.get(key) ?? [];\n    values.push(...urlValues);\n    allProvidedOptions.set(key, values);\n  }\n\n  if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n    const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\n      .concat(allProvidedOptions.get('ssl') || [])\n      .map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  checkTLSOptions(allProvidedOptions);\n\n  const unsupportedOptions = setDifference(\n    allProvidedKeys,\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\n  );\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new MongoParseError(\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\n    );\n  }\n\n  // Option parsing and setting\n\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\n    const values = allProvidedOptions.get(key);\n    if (!values || values.length === 0) {\n      if (DEFAULT_OPTIONS.has(key)) {\n        setOption(mongoOptions, key, descriptor, [DEFAULT_OPTIONS.get(key)]);\n      }\n    } else {\n      const { deprecated } = descriptor;\n      if (deprecated) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n      }\n\n      setOption(mongoOptions, key, descriptor, values);\n    }\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\n    const isOidc = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_OIDC;\n    if (\n      (isGssapi || isX509) &&\n      allProvidedOptions.has('authSource') &&\n      mongoOptions.credentials.source !== '$external'\n    ) {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new MongoParseError(\n        `authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`\n      );\n    }\n\n    if (\n      !(isGssapi || isX509 || isAws || isOidc) &&\n      mongoOptions.dbName &&\n      !allProvidedOptions.has('authSource')\n    ) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new MongoMissingCredentialsError(\n        `When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`\n      );\n    }\n\n    mongoOptions.credentials.validate();\n\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (\n      mongoOptions.credentials.password === '' &&\n      mongoOptions.credentials.username === '' &&\n      mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_DEFAULT &&\n      Object.keys(mongoOptions.credentials.mechanismProperties).length === 0\n    ) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  // Potential SRV Overrides and SRV connection string validations\n\n  mongoOptions.userSpecifiedAuthSource =\n    objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet =\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions =\n      urlOptions.has('srvMaxHosts') ||\n      objectOptions.has('srvMaxHosts') ||\n      urlOptions.has('srvServiceName') ||\n      objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new MongoParseError(\n        'Cannot use srvMaxHosts or srvServiceName with a non-srv connection string'\n      );\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (\n    !mongoOptions.proxyHost &&\n    (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (\n    (mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n    (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(\n    key => urlOptions.get(key) ?? []\n  );\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new MongoParseError(\n      'Proxy options cannot be specified multiple times in the connection string'\n    );\n  }\n\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n\n  let loggerEnvOptions: MongoLoggerEnvOptions = {};\n  let loggerClientOptions: MongoLoggerMongoClientOptions = {};\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n      ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n    };\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath\n    };\n  }\n  mongoOptions.mongoLoggerOptions = MongoLogger.resolveOptions(\n    loggerEnvOptions,\n    loggerClientOptions\n  );\n\n  mongoOptions.metadata = makeClientMetadata(mongoOptions);\n\n  return mongoOptions;\n}\n\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(\n  hosts: HostAddress[] | string[],\n  mongoOptions: MongoOptions,\n  isSrv: boolean\n): void {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\n\nfunction setOption(\n  mongoOptions: any,\n  key: string,\n  descriptor: OptionDescriptor,\n  values: unknown[]\n) {\n  const { target, type, transform } = descriptor;\n  const name = target ?? key;\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!isRecord(values[0])) {\n        throw new MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default: {\n      if (!transform) {\n        throw new MongoParseError('Descriptors missing a type must define a transform');\n      }\n      const transformValue = transform({ name, options: mongoOptions, values });\n      mongoOptions[name] = transformValue;\n      break;\n    }\n  }\n}\n\ninterface OptionDescriptor {\n  target?: string;\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\n  default?: any;\n\n  deprecated?: boolean | string;\n  /**\n   * @param name - the original option name\n   * @param options - the options so far for resolution\n   * @param values - the possible values in precedence order\n   */\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\n}\n\nexport const OPTIONS = {\n  appName: {\n    type: 'string'\n  },\n  auth: {\n    target: 'credentials',\n    transform({ name, options, values: [value] }): MongoCredentials {\n      if (!isRecord(value, ['username', 'password'] as const)) {\n        throw new MongoParseError(\n          `${name} must be an object with 'username' and 'password' properties`\n        );\n      }\n      return MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const mechanisms = Object.values(AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\n        AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)\n      ) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({ options, values }): MongoCredentials {\n      // We can have a combination of options passed in the URI and options passed\n      // as an object to the MongoClient. So we must transform the string options\n      // as well as merge them together with a potentially provided object.\n      let mechanismProperties = Object.create(null);\n\n      for (const optionValue of values) {\n        if (typeof optionValue === 'string') {\n          for (const [key, value] of entriesFromString(optionValue)) {\n            try {\n              mechanismProperties[key] = getBoolean(key, value);\n            } catch {\n              mechanismProperties[key] = value;\n            }\n          }\n        } else {\n          if (!isRecord(optionValue)) {\n            throw new MongoParseError('AuthMechanismProperties must be an object');\n          }\n          mechanismProperties = { ...optionValue };\n        }\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanismProperties\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const source = String(value);\n      return MongoCredentials.merge(options.credentials, { source });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({ values: [version] }): ServerApi {\n      const serverApiToValidate =\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new MongoParseError(\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new MongoParseError(\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({ values }) {\n      const compressionList = new Set();\n      for (const compVal of values as (CompressorName[] | string)[]) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new MongoInvalidArgumentError(\n            'compressors must be an array or a comma-delimited list of strings'\n          );\n        }\n        for (const c of compValArray) {\n          if (Object.keys(Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new MongoInvalidArgumentError(\n              `${c} is not a valid compression mechanism. Must be one of: ${Object.keys(\n                Compressor\n              )}.`\n            );\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    default: {},\n    type: 'record'\n  },\n  enableUtf8Validation: { type: 'boolean', default: true },\n  family: {\n    transform({ name, values: [value] }): 4 | 6 {\n      const transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  journal: {\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n    transform({ name, values: [value] }): number {\n      const maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({ name, options, values: [value] }) {\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\n        });\n      } else {\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({ values: [value], options }) {\n      return { ...options.driverInfo, name: String(value) };\n    }\n  } as OptionDescriptor,\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: DEFAULT_PK_FACTORY,\n    transform({ values: [value] }): PkFactory {\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\n        return value as PkFactory;\n      }\n      throw new MongoParseError(\n        `Option pkFactory must be an object with a createPk function, got ${value}`\n      );\n    }\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  useBigInt64: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({ values: [value], options }) {\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\n      }\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({ values: [level], options }) {\n      return ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level as ReadConcernLevel\n      });\n    }\n  },\n  readPreference: {\n    default: ReadPreference.primary,\n    transform({ values: [value], options }) {\n      if (value instanceof ReadPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n      }\n      if (isRecord(value, ['mode'] as const)) {\n        const rp = ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n        if (rp) return rp;\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new ReadPreference(\n          value as ReadPreferenceMode,\n          options.readPreference?.tags,\n          rpOpts\n        );\n      }\n      throw new MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }: {\n      values: Array<string | Record<string, string>[]>;\n      options: MongoClientOptions;\n    }) {\n      const tags: Array<string | Record<string, string>> = Array.isArray(values[0])\n        ? values[0]\n        : (values as Array<string>);\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag: TagSet = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({ name, values: [value] }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({ name, values: [value] }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    type: 'string'\n  },\n  tlsCRLFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({ name, options, values: [value] }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\n          ? () => undefined\n          : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      if (isRecord(value) || value instanceof WriteConcern) {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  } as OptionDescriptor,\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: { type: 'any' },\n  srvPoller: { type: 'any' },\n  // Accepted NodeJS Options\n  minDHSize: { type: 'any' },\n  pskCallback: { type: 'any' },\n  secureContext: { type: 'any' },\n  enableTrace: { type: 'any' },\n  requestCert: { type: 'any' },\n  rejectUnauthorized: { type: 'any' },\n  checkServerIdentity: { type: 'any' },\n  ALPNProtocols: { type: 'any' },\n  SNICallback: { type: 'any' },\n  session: { type: 'any' },\n  requestOCSP: { type: 'any' },\n  localAddress: { type: 'any' },\n  localPort: { type: 'any' },\n  hints: { type: 'any' },\n  lookup: { type: 'any' },\n  ca: { type: 'any' },\n  cert: { type: 'any' },\n  ciphers: { type: 'any' },\n  crl: { type: 'any' },\n  ecdhCurve: { type: 'any' },\n  key: { type: 'any' },\n  passphrase: { type: 'any' },\n  pfx: { type: 'any' },\n  secureProtocol: { type: 'any' },\n  index: { type: 'any' },\n  // Legacy options from v3 era\n  useNewUrlParser: {\n    type: 'boolean',\n    deprecated:\n      'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  } as OptionDescriptor,\n  useUnifiedTopology: {\n    type: 'boolean',\n    deprecated:\n      'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  } as OptionDescriptor,\n  // MongoLogger\n  // TODO(NODE-4849): Tighten the type of mongodbLogPath\n  mongodbLogPath: { type: 'any' }\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\n\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\n  Object.entries(OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default])\n);\n\n/**\n * Set of permitted feature flags\n * @internal\n */\nexport const FEATURE_FLAGS = new Set([\n  Symbol.for('@@mdb.skipPingOnConnect'),\n  Symbol.for('@@mdb.enableMongoLogger'),\n  Symbol.for('@@mdb.internalLoggerConfig')\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}