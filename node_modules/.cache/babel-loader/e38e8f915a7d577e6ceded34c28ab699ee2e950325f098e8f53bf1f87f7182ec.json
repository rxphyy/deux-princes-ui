{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\nvar error_1 = require(\"../error\");\nvar read_preference_1 = require(\"../read_preference\");\nvar sort_1 = require(\"../sort\");\nvar utils_1 = require(\"../utils\");\nvar command_1 = require(\"./command\");\nvar operation_1 = require(\"./operation\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n  cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n  return cmdBase;\n}\n/** @internal */\nvar FindAndModifyOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(FindAndModifyOperation, _command_1$CommandOpe);\n  var _super = _createSuper(FindAndModifyOperation);\n  function FindAndModifyOperation(collection, query, options) {\n    var _options$includeResul;\n    var _this;\n    _classCallCheck(this, FindAndModifyOperation);\n    _this = _super.call(this, collection, options);\n    _this.options = options !== null && options !== void 0 ? options : {};\n    _this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n    (_options$includeResul = options.includeResultMetadata) !== null && _options$includeResul !== void 0 ? _options$includeResul : options.includeResultMetadata = false;\n    var sort = (0, sort_1.formatSort)(options.sort);\n    if (sort) {\n      _this.cmdBase.sort = sort;\n    }\n    if (options.projection) {\n      _this.cmdBase.fields = options.projection;\n    }\n    if (options.maxTimeMS) {\n      _this.cmdBase.maxTimeMS = options.maxTimeMS;\n    }\n    // Decorate the findAndModify command with the write Concern\n    if (options.writeConcern) {\n      _this.cmdBase.writeConcern = options.writeConcern;\n    }\n    if (options.let) {\n      _this.cmdBase.let = options.let;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      _this.cmdBase.comment = options.comment;\n    }\n    // force primary read preference\n    _this.readPreference = read_preference_1.ReadPreference.primary;\n    _this.collection = collection;\n    _this.query = query;\n    return _this;\n  }\n  _createClass(FindAndModifyOperation, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(server, session) {\n        var _result$value;\n        var coll, query, options, cmd, _this$writeConcern, unacknowledgedWrite, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              coll = this.collection;\n              query = this.query;\n              options = _objectSpread(_objectSpread({}, this.options), this.bsonOptions); // Create findAndModify command object\n              cmd = _objectSpread({\n                findAndModify: coll.collectionName,\n                query: query\n              }, this.cmdBase); // Have we specified collation\n              _context.prev = 4;\n              (0, utils_1.decorateWithCollation)(cmd, coll, options);\n              _context.next = 11;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](4);\n              return _context.abrupt(\"return\", _context.t0);\n            case 11:\n              if (!options.hint) {\n                _context.next = 16;\n                break;\n              }\n              // TODO: once this method becomes a CommandOperation we will have the server\n              // in place to check.\n              unacknowledgedWrite = ((_this$writeConcern = this.writeConcern) === null || _this$writeConcern === void 0 ? void 0 : _this$writeConcern.w) === 0;\n              if (!(unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8)) {\n                _context.next = 15;\n                break;\n              }\n              throw new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands');\n            case 15:\n              cmd.hint = options.hint;\n            case 16:\n              _context.next = 18;\n              return _get(_getPrototypeOf(FindAndModifyOperation.prototype), \"executeCommand\", this).call(this, server, session, cmd);\n            case 18:\n              result = _context.sent;\n              return _context.abrupt(\"return\", options.includeResultMetadata ? result : (_result$value = result.value) !== null && _result$value !== void 0 ? _result$value : null);\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[4, 8]]);\n      }));\n      function execute(_x, _x2) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return FindAndModifyOperation;\n}(command_1.CommandOperation);\n/** @internal */\nvar FindOneAndDeleteOperation = /*#__PURE__*/function (_FindAndModifyOperati) {\n  _inherits(FindOneAndDeleteOperation, _FindAndModifyOperati);\n  var _super2 = _createSuper(FindOneAndDeleteOperation);\n  function FindOneAndDeleteOperation(collection, filter, options) {\n    var _this2;\n    _classCallCheck(this, FindOneAndDeleteOperation);\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    _this2 = _super2.call(this, collection, filter, options);\n    _this2.cmdBase.remove = true;\n    return _this2;\n  }\n  return _createClass(FindOneAndDeleteOperation);\n}(FindAndModifyOperation);\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nvar FindOneAndReplaceOperation = /*#__PURE__*/function (_FindAndModifyOperati2) {\n  _inherits(FindOneAndReplaceOperation, _FindAndModifyOperati2);\n  var _super3 = _createSuper(FindOneAndReplaceOperation);\n  function FindOneAndReplaceOperation(collection, filter, replacement, options) {\n    var _this3;\n    _classCallCheck(this, FindOneAndReplaceOperation);\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n    }\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n    _this3 = _super3.call(this, collection, filter, options);\n    _this3.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(_this3.cmdBase, options);\n    return _this3;\n  }\n  return _createClass(FindOneAndReplaceOperation);\n}(FindAndModifyOperation);\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nvar FindOneAndUpdateOperation = /*#__PURE__*/function (_FindAndModifyOperati3) {\n  _inherits(FindOneAndUpdateOperation, _FindAndModifyOperati3);\n  var _super4 = _createSuper(FindOneAndUpdateOperation);\n  function FindOneAndUpdateOperation(collection, filter, update, options) {\n    var _this4;\n    _classCallCheck(this, FindOneAndUpdateOperation);\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    if (update == null || typeof update !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n    }\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    _this4 = _super4.call(this, collection, filter, options);\n    _this4.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(_this4.cmdBase, options);\n    if (options.arrayFilters) {\n      _this4.cmdBase.arrayFilters = options.arrayFilters;\n    }\n    return _this4;\n  }\n  return _createClass(FindOneAndUpdateOperation);\n}(FindAndModifyOperation);\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"names":["error_1","require","read_preference_1","sort_1","utils_1","command_1","operation_1","exports","ReturnDocument","Object","freeze","BEFORE","AFTER","configureFindAndModifyCmdBaseUpdateOpts","cmdBase","options","new","returnDocument","upsert","bypassDocumentValidation","FindAndModifyOperation","_command_1$CommandOpe","_inherits","_super","_createSuper","collection","query","_options$includeResul","_this","_classCallCheck","call","remove","includeResultMetadata","sort","formatSort","projection","fields","maxTimeMS","writeConcern","let","comment","undefined","readPreference","ReadPreference","primary","_createClass","key","value","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","server","session","_result$value","coll","cmd","_this$writeConcern","unacknowledgedWrite","result","wrap","_callee$","_context","prev","next","_objectSpread","bsonOptions","findAndModify","collectionName","decorateWithCollation","t0","abrupt","hint","w","maxWireVersion","MongoCompatibilityError","_get","_getPrototypeOf","prototype","sent","stop","execute","_x","_x2","apply","arguments","CommandOperation","FindOneAndDeleteOperation","_FindAndModifyOperati","_super2","filter","_this2","MongoInvalidArgumentError","FindOneAndReplaceOperation","_FindAndModifyOperati2","_super3","replacement","_this3","hasAtomicOperators","update","FindOneAndUpdateOperation","_FindAndModifyOperati3","_super4","_this4","arrayFilters","defineAspects","Aspect","WRITE_OPERATION","RETRYABLE","EXPLAINABLE"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\operations\\find_and_modify.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoInvalidArgumentError } from '../error';\nimport { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, type Sort, type SortForCmd } from '../sort';\nimport { decorateWithCollation, hasAtomicOperators, maxWireVersion } from '../utils';\nimport type { WriteConcern, WriteConcernSettings } from '../write_concern';\nimport { CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport const ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n} as const);\n\n/** @public */\nexport type ReturnDocument = (typeof ReturnDocument)[keyof typeof ReturnDocument];\n\n/** @public */\nexport interface FindOneAndDeleteOptions extends CommandOperationOptions {\n  /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n  /**\n   * Return the ModifyResult instead of the modified document. Defaults to false\n   */\n  includeResultMetadata?: boolean;\n}\n\n/** @public */\nexport interface FindOneAndReplaceOptions extends CommandOperationOptions {\n  /** Allow driver to bypass schema validation. */\n  bypassDocumentValidation?: boolean;\n  /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n  returnDocument?: ReturnDocument;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Upsert the document if it does not exist. */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n  /**\n   * Return the ModifyResult instead of the modified document. Defaults to true\n   * but will default to false in the next major version.\n   */\n  includeResultMetadata?: boolean;\n}\n\n/** @public */\nexport interface FindOneAndUpdateOptions extends CommandOperationOptions {\n  /** Optional list of array filters referenced in filtered positional operators */\n  arrayFilters?: Document[];\n  /** Allow driver to bypass schema validation. */\n  bypassDocumentValidation?: boolean;\n  /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n  returnDocument?: ReturnDocument;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Upsert the document if it does not exist. */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n  /**\n   * Return the ModifyResult instead of the modified document. Defaults to true\n   * but will default to false in the next major version.\n   */\n  includeResultMetadata?: boolean;\n}\n\n/** @internal */\ninterface FindAndModifyCmdBase {\n  remove: boolean;\n  new: boolean;\n  upsert: boolean;\n  update?: Document;\n  sort?: SortForCmd;\n  fields?: Document;\n  bypassDocumentValidation?: boolean;\n  arrayFilters?: Document[];\n  maxTimeMS?: number;\n  let?: Document;\n  writeConcern?: WriteConcern | WriteConcernSettings;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n}\n\nfunction configureFindAndModifyCmdBaseUpdateOpts(\n  cmdBase: FindAndModifyCmdBase,\n  options: FindOneAndReplaceOptions | FindOneAndUpdateOptions\n): FindAndModifyCmdBase {\n  cmdBase.new = options.returnDocument === ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n  return cmdBase;\n}\n\n/** @internal */\nclass FindAndModifyOperation extends CommandOperation<Document> {\n  override options: FindOneAndReplaceOptions | FindOneAndUpdateOptions | FindOneAndDeleteOptions;\n  cmdBase: FindAndModifyCmdBase;\n  collection: Collection;\n  query: Document;\n  doc?: Document;\n\n  constructor(\n    collection: Collection,\n    query: Document,\n    options: FindOneAndReplaceOptions | FindOneAndUpdateOptions | FindOneAndDeleteOptions\n  ) {\n    super(collection, options);\n    this.options = options ?? {};\n    this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n\n    options.includeResultMetadata ??= false;\n\n    const sort = formatSort(options.sort);\n    if (sort) {\n      this.cmdBase.sort = sort;\n    }\n\n    if (options.projection) {\n      this.cmdBase.fields = options.projection;\n    }\n\n    if (options.maxTimeMS) {\n      this.cmdBase.maxTimeMS = options.maxTimeMS;\n    }\n\n    // Decorate the findAndModify command with the write Concern\n    if (options.writeConcern) {\n      this.cmdBase.writeConcern = options.writeConcern;\n    }\n\n    if (options.let) {\n      this.cmdBase.let = options.let;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      this.cmdBase.comment = options.comment;\n    }\n\n    // force primary read preference\n    this.readPreference = ReadPreference.primary;\n\n    this.collection = collection;\n    this.query = query;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<Document> {\n    const coll = this.collection;\n    const query = this.query;\n    const options = { ...this.options, ...this.bsonOptions };\n\n    // Create findAndModify command object\n    const cmd: Document = {\n      findAndModify: coll.collectionName,\n      query: query,\n      ...this.cmdBase\n    };\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return err;\n    }\n\n    if (options.hint) {\n      // TODO: once this method becomes a CommandOperation we will have the server\n      // in place to check.\n      const unacknowledgedWrite = this.writeConcern?.w === 0;\n      if (unacknowledgedWrite || maxWireVersion(server) < 8) {\n        throw new MongoCompatibilityError(\n          'The current topology does not support a hint on findAndModify commands'\n        );\n      }\n\n      cmd.hint = options.hint;\n    }\n\n    // Execute the command\n    const result = await super.executeCommand(server, session, cmd);\n    return options.includeResultMetadata ? result : result.value ?? null;\n  }\n}\n\n/** @internal */\nexport class FindOneAndDeleteOperation extends FindAndModifyOperation {\n  constructor(collection: Collection, filter: Document, options: FindOneAndDeleteOptions) {\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.remove = true;\n  }\n}\n\n/** @internal */\nexport class FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    replacement: Document,\n    options: FindOneAndReplaceOptions\n  ) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n    }\n\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n  }\n}\n\n/** @internal */\nexport class FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    update: Document,\n    options: FindOneAndUpdateOptions\n  ) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (update == null || typeof update !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"update\" must be an object');\n    }\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n\n    if (options.arrayFilters) {\n      this.cmdBase.arrayFilters = options.arrayFilters;\n    }\n  }\n}\n\ndefineAspects(FindAndModifyOperation, [\n  Aspect.WRITE_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXPLAINABLE\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}