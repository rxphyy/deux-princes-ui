{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AzureTokenCache = exports.AzureTokenEntry = void 0;\nconst cache_1 = require(\"./cache\");\n/** @internal */\nclass AzureTokenEntry extends cache_1.ExpiringCacheEntry {\n  /**\n   * Instantiate the entry.\n   */\n  constructor(token, expiration) {\n    super(expiration);\n    this.token = token;\n  }\n}\nexports.AzureTokenEntry = AzureTokenEntry;\n/**\n * A cache of access tokens from Azure.\n * @internal\n */\nclass AzureTokenCache extends cache_1.Cache {\n  /**\n   * Add an entry to the cache.\n   */\n  addEntry(tokenAudience, token) {\n    const entry = new AzureTokenEntry(token.access_token, token.expires_in);\n    this.entries.set(tokenAudience, entry);\n    return entry;\n  }\n  /**\n   * Create a cache key.\n   */\n  cacheKey(tokenAudience) {\n    return tokenAudience;\n  }\n  /**\n   * Delete an entry from the cache.\n   */\n  deleteEntry(tokenAudience) {\n    this.entries.delete(tokenAudience);\n  }\n  /**\n   * Get an Azure token entry from the cache.\n   */\n  getEntry(tokenAudience) {\n    return this.entries.get(tokenAudience);\n  }\n}\nexports.AzureTokenCache = AzureTokenCache;","map":{"version":3,"names":["cache_1","require","AzureTokenEntry","ExpiringCacheEntry","constructor","token","expiration","exports","AzureTokenCache","Cache","addEntry","tokenAudience","entry","access_token","expires_in","entries","set","cacheKey","deleteEntry","delete","getEntry","get"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_oidc\\azure_token_cache.ts"],"sourcesContent":["import type { AzureAccessToken } from './azure_service_workflow';\nimport { Cache, ExpiringCacheEntry } from './cache';\n\n/** @internal */\nexport class AzureTokenEntry extends ExpiringCacheEntry {\n  token: string;\n\n  /**\n   * Instantiate the entry.\n   */\n  constructor(token: string, expiration: number) {\n    super(expiration);\n    this.token = token;\n  }\n}\n\n/**\n * A cache of access tokens from Azure.\n * @internal\n */\nexport class AzureTokenCache extends Cache<AzureTokenEntry> {\n  /**\n   * Add an entry to the cache.\n   */\n  addEntry(tokenAudience: string, token: AzureAccessToken): AzureTokenEntry {\n    const entry = new AzureTokenEntry(token.access_token, token.expires_in);\n    this.entries.set(tokenAudience, entry);\n    return entry;\n  }\n\n  /**\n   * Create a cache key.\n   */\n  cacheKey(tokenAudience: string): string {\n    return tokenAudience;\n  }\n\n  /**\n   * Delete an entry from the cache.\n   */\n  deleteEntry(tokenAudience: string): void {\n    this.entries.delete(tokenAudience);\n  }\n\n  /**\n   * Get an Azure token entry from the cache.\n   */\n  getEntry(tokenAudience: string): AzureTokenEntry | undefined {\n    return this.entries.get(tokenAudience);\n  }\n}\n"],"mappings":";;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA;AACA,MAAaC,eAAgB,SAAQF,OAAA,CAAAG,kBAAkB;EAGrD;;;EAGAC,YAAYC,KAAa,EAAEC,UAAkB;IAC3C,KAAK,CAACA,UAAU,CAAC;IACjB,IAAI,CAACD,KAAK,GAAGA,KAAK;EACpB;;AATFE,OAAA,CAAAL,eAAA,GAAAA,eAAA;AAYA;;;;AAIA,MAAaM,eAAgB,SAAQR,OAAA,CAAAS,KAAsB;EACzD;;;EAGAC,QAAQA,CAACC,aAAqB,EAAEN,KAAuB;IACrD,MAAMO,KAAK,GAAG,IAAIV,eAAe,CAACG,KAAK,CAACQ,YAAY,EAAER,KAAK,CAACS,UAAU,CAAC;IACvE,IAAI,CAACC,OAAO,CAACC,GAAG,CAACL,aAAa,EAAEC,KAAK,CAAC;IACtC,OAAOA,KAAK;EACd;EAEA;;;EAGAK,QAAQA,CAACN,aAAqB;IAC5B,OAAOA,aAAa;EACtB;EAEA;;;EAGAO,WAAWA,CAACP,aAAqB;IAC/B,IAAI,CAACI,OAAO,CAACI,MAAM,CAACR,aAAa,CAAC;EACpC;EAEA;;;EAGAS,QAAQA,CAACT,aAAqB;IAC5B,OAAO,IAAI,CAACI,OAAO,CAACM,GAAG,CAACV,aAAa,CAAC;EACxC;;AA7BFJ,OAAA,CAAAC,eAAA,GAAAA,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}