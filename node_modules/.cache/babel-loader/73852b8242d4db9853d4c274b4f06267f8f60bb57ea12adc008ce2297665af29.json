{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nclass ServerDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, address, previousDescription, newDescription) {\n    this.topologyId = topologyId;\n    this.address = address;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nclass ServerOpeningEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nclass ServerClosedEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nclass TopologyDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, previousDescription, newDescription) {\n    this.topologyId = topologyId;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nclass TopologyOpeningEvent {\n  /** @internal */\n  constructor(topologyId) {\n    this.topologyId = topologyId;\n  }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nclass TopologyClosedEvent {\n  /** @internal */\n  constructor(topologyId) {\n    this.topologyId = topologyId;\n  }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nclass ServerHeartbeatStartedEvent {\n  /** @internal */\n  constructor(connectionId) {\n    this.connectionId = connectionId;\n  }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nclass ServerHeartbeatSucceededEvent {\n  /** @internal */\n  constructor(connectionId, duration, reply) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.reply = reply ?? {};\n  }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nclass ServerHeartbeatFailedEvent {\n  /** @internal */\n  constructor(connectionId, duration, failure) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.failure = failure;\n  }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;","map":{"version":3,"names":["ServerDescriptionChangedEvent","constructor","topologyId","address","previousDescription","newDescription","exports","ServerOpeningEvent","ServerClosedEvent","TopologyDescriptionChangedEvent","TopologyOpeningEvent","TopologyClosedEvent","ServerHeartbeatStartedEvent","connectionId","ServerHeartbeatSucceededEvent","duration","reply","ServerHeartbeatFailedEvent","failure"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\sdam\\events.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { ServerDescription } from './server_description';\nimport type { TopologyDescription } from './topology_description';\n\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nexport class ServerDescriptionChangedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n  /** The previous server description */\n  previousDescription: ServerDescription;\n  /** The new server description */\n  newDescription: ServerDescription;\n\n  /** @internal */\n  constructor(\n    topologyId: number,\n    address: string,\n    previousDescription: ServerDescription,\n    newDescription: ServerDescription\n  ) {\n    this.topologyId = topologyId;\n    this.address = address;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\n\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nexport class ServerOpeningEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n\n  /** @internal */\n  constructor(topologyId: number, address: string) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\n\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nexport class ServerClosedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n\n  /** @internal */\n  constructor(topologyId: number, address: string) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\n\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nexport class TopologyDescriptionChangedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The old topology description */\n  previousDescription: TopologyDescription;\n  /** The new topology description */\n  newDescription: TopologyDescription;\n\n  /** @internal */\n  constructor(\n    topologyId: number,\n    previousDescription: TopologyDescription,\n    newDescription: TopologyDescription\n  ) {\n    this.topologyId = topologyId;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\n\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nexport class TopologyOpeningEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n\n  /** @internal */\n  constructor(topologyId: number) {\n    this.topologyId = topologyId;\n  }\n}\n\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nexport class TopologyClosedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n\n  /** @internal */\n  constructor(topologyId: number) {\n    this.topologyId = topologyId;\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nexport class ServerHeartbeatStartedEvent {\n  /** The connection id for the command */\n  connectionId: string;\n\n  /** @internal */\n  constructor(connectionId: string) {\n    this.connectionId = connectionId;\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nexport class ServerHeartbeatSucceededEvent {\n  /** The connection id for the command */\n  connectionId: string;\n  /** The execution time of the event in ms */\n  duration: number;\n  /** The command reply */\n  reply: Document;\n\n  /** @internal */\n  constructor(connectionId: string, duration: number, reply: Document | null) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.reply = reply ?? {};\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nexport class ServerHeartbeatFailedEvent {\n  /** The connection id for the command */\n  connectionId: string;\n  /** The execution time of the event in ms */\n  duration: number;\n  /** The command failure */\n  failure: Error;\n\n  /** @internal */\n  constructor(connectionId: string, duration: number, failure: Error) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.failure = failure;\n  }\n}\n"],"mappings":";;;;;;AAIA;;;;;AAKA,MAAaA,6BAA6B;EAUxC;EACAC,YACEC,UAAkB,EAClBC,OAAe,EACfC,mBAAsC,EACtCC,cAAiC;IAEjC,IAAI,CAACH,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;;AArBFC,OAAA,CAAAN,6BAAA,GAAAA,6BAAA;AAwBA;;;;;AAKA,MAAaO,kBAAkB;EAM7B;EACAN,YAAYC,UAAkB,EAAEC,OAAe;IAC7C,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;AAVFG,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AAaA;;;;;AAKA,MAAaC,iBAAiB;EAM5B;EACAP,YAAYC,UAAkB,EAAEC,OAAe;IAC7C,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;AAVFG,OAAA,CAAAE,iBAAA,GAAAA,iBAAA;AAaA;;;;;AAKA,MAAaC,+BAA+B;EAQ1C;EACAR,YACEC,UAAkB,EAClBE,mBAAwC,EACxCC,cAAmC;IAEnC,IAAI,CAACH,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACE,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;;AAjBFC,OAAA,CAAAG,+BAAA,GAAAA,+BAAA;AAoBA;;;;;AAKA,MAAaC,oBAAoB;EAI/B;EACAT,YAAYC,UAAkB;IAC5B,IAAI,CAACA,UAAU,GAAGA,UAAU;EAC9B;;AAPFI,OAAA,CAAAI,oBAAA,GAAAA,oBAAA;AAUA;;;;;AAKA,MAAaC,mBAAmB;EAI9B;EACAV,YAAYC,UAAkB;IAC5B,IAAI,CAACA,UAAU,GAAGA,UAAU;EAC9B;;AAPFI,OAAA,CAAAK,mBAAA,GAAAA,mBAAA;AAUA;;;;;;;AAOA,MAAaC,2BAA2B;EAItC;EACAX,YAAYY,YAAoB;IAC9B,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;;AAPFP,OAAA,CAAAM,2BAAA,GAAAA,2BAAA;AAUA;;;;;AAKA,MAAaE,6BAA6B;EAQxC;EACAb,YAAYY,YAAoB,EAAEE,QAAgB,EAAEC,KAAsB;IACxE,IAAI,CAACH,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK,IAAI,EAAE;EAC1B;;AAbFV,OAAA,CAAAQ,6BAAA,GAAAA,6BAAA;AAgBA;;;;;AAKA,MAAaG,0BAA0B;EAQrC;EACAhB,YAAYY,YAAoB,EAAEE,QAAgB,EAAEG,OAAc;IAChE,IAAI,CAACL,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,OAAO,GAAGA,OAAO;EACxB;;AAbFZ,OAAA,CAAAW,0BAAA,GAAAA,0BAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}