{"ast":null,"code":"import fs from 'fs/promises';\nimport path from 'path';\nimport SrtParser from 'srt-parser-2';\nconst filterAndFormatSubtitles = async subtitleFileName => {\n  try {\n    const srtFilePath = path.join('yt-dlp', subtitleFileName);\n    const srtContent = await fs.readFile(srtFilePath, 'utf-8');\n    const parser = new SrtParser();\n    const captions = parser.fromSrt(srtContent);\n    const splitSubs = splitSubtitles(captions);\n    const filteredSubs = removeSubtitleDoubles(splitSubs);\n    return filteredSubs;\n  } catch (error) {\n    console.error('Error reading or parsing the SRT file:', error);\n  }\n};\nconst splitSubtitles = subtitles => {\n  const splitSubtitles = [];\n  for (const subtitle of subtitles) {\n    // Split subtitles by line breaks\n    const textLines = subtitle.text.split(/\\r?\\n|\\r|\\n/g);\n\n    // Create separate subtitle objects for each line\n    for (const text of textLines) {\n      splitSubtitles.push({\n        id: subtitle.id,\n        startTime: subtitle.startTime,\n        text\n      });\n    }\n  }\n  return splitSubtitles;\n};\nconst removeSubtitleDoubles = subtitles => {\n  const filteredSubtitles = [];\n  let prevSubtitle = null;\n  for (const subtitle of subtitles) {\n    if (!prevSubtitle || subtitle.text !== prevSubtitle.text && prevSubtitle !== null) {\n      filteredSubtitles.push(subtitle);\n    }\n    prevSubtitle = subtitle;\n  }\n  return filteredSubtitles;\n};\nexport { filterAndFormatSubtitles };","map":{"version":3,"names":["fs","path","SrtParser","filterAndFormatSubtitles","subtitleFileName","srtFilePath","join","srtContent","readFile","parser","captions","fromSrt","splitSubs","splitSubtitles","filteredSubs","removeSubtitleDoubles","error","console","subtitles","subtitle","textLines","text","split","push","id","startTime","filteredSubtitles","prevSubtitle"],"sources":["C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/src/subsFormatter.js"],"sourcesContent":["import fs from 'fs/promises';\r\nimport path from 'path';\r\nimport SrtParser from 'srt-parser-2';\r\n\r\n\r\nconst filterAndFormatSubtitles = async (subtitleFileName) => {\r\n  try {\r\n    const srtFilePath = path.join('yt-dlp', subtitleFileName);\r\n\r\n    const srtContent = await fs.readFile(srtFilePath, 'utf-8');\r\n    const parser = new SrtParser();\r\n    const captions = parser.fromSrt(srtContent);\r\n\r\n    const splitSubs = splitSubtitles(captions);\r\n    const filteredSubs = removeSubtitleDoubles(splitSubs);\r\n\r\n    return filteredSubs;\r\n  } catch (error) {\r\n    console.error('Error reading or parsing the SRT file:', error);\r\n  }\r\n};\r\n\r\n\r\nconst splitSubtitles = (subtitles) => {\r\n  const splitSubtitles = [];\r\n\r\n  for (const subtitle of subtitles) {\r\n    // Split subtitles by line breaks\r\n    const textLines = subtitle.text.split(/\\r?\\n|\\r|\\n/g);\r\n    \r\n    // Create separate subtitle objects for each line\r\n    for (const text of textLines) {\r\n      splitSubtitles.push({\r\n        id: subtitle.id,\r\n        startTime: subtitle.startTime,\r\n        text,\r\n      });\r\n    }\r\n  }\r\n\r\n  return splitSubtitles;\r\n}\r\n\r\n\r\nconst removeSubtitleDoubles = (subtitles) => {\r\n  const filteredSubtitles = [];\r\n  let prevSubtitle = null;\r\n\r\n  for (const subtitle of subtitles) {\r\n    if (!prevSubtitle || (subtitle.text !== prevSubtitle.text && prevSubtitle !== null)) {\r\n      filteredSubtitles.push(subtitle);\r\n    }\r\n    prevSubtitle = subtitle;\r\n  }\r\n\r\n  return filteredSubtitles;\r\n}\r\n\r\n\r\nexport { filterAndFormatSubtitles };"],"mappings":"AAAA,OAAOA,EAAE,MAAM,aAAa;AAC5B,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,SAAS,MAAM,cAAc;AAGpC,MAAMC,wBAAwB,GAAG,MAAOC,gBAAgB,IAAK;EAC3D,IAAI;IACF,MAAMC,WAAW,GAAGJ,IAAI,CAACK,IAAI,CAAC,QAAQ,EAAEF,gBAAgB,CAAC;IAEzD,MAAMG,UAAU,GAAG,MAAMP,EAAE,CAACQ,QAAQ,CAACH,WAAW,EAAE,OAAO,CAAC;IAC1D,MAAMI,MAAM,GAAG,IAAIP,SAAS,CAAC,CAAC;IAC9B,MAAMQ,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAACJ,UAAU,CAAC;IAE3C,MAAMK,SAAS,GAAGC,cAAc,CAACH,QAAQ,CAAC;IAC1C,MAAMI,YAAY,GAAGC,qBAAqB,CAACH,SAAS,CAAC;IAErD,OAAOE,YAAY;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;EAChE;AACF,CAAC;AAGD,MAAMH,cAAc,GAAIK,SAAS,IAAK;EACpC,MAAML,cAAc,GAAG,EAAE;EAEzB,KAAK,MAAMM,QAAQ,IAAID,SAAS,EAAE;IAChC;IACA,MAAME,SAAS,GAAGD,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC,cAAc,CAAC;;IAErD;IACA,KAAK,MAAMD,IAAI,IAAID,SAAS,EAAE;MAC5BP,cAAc,CAACU,IAAI,CAAC;QAClBC,EAAE,EAAEL,QAAQ,CAACK,EAAE;QACfC,SAAS,EAAEN,QAAQ,CAACM,SAAS;QAC7BJ;MACF,CAAC,CAAC;IACJ;EACF;EAEA,OAAOR,cAAc;AACvB,CAAC;AAGD,MAAME,qBAAqB,GAAIG,SAAS,IAAK;EAC3C,MAAMQ,iBAAiB,GAAG,EAAE;EAC5B,IAAIC,YAAY,GAAG,IAAI;EAEvB,KAAK,MAAMR,QAAQ,IAAID,SAAS,EAAE;IAChC,IAAI,CAACS,YAAY,IAAKR,QAAQ,CAACE,IAAI,KAAKM,YAAY,CAACN,IAAI,IAAIM,YAAY,KAAK,IAAK,EAAE;MACnFD,iBAAiB,CAACH,IAAI,CAACJ,QAAQ,CAAC;IAClC;IACAQ,YAAY,GAAGR,QAAQ;EACzB;EAEA,OAAOO,iBAAiB;AAC1B,CAAC;AAGD,SAASvB,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}