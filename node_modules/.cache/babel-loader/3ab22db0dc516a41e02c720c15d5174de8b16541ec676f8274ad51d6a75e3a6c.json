{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\nconst admin_1 = require(\"./admin\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst collection_1 = require(\"./collection\");\nconst CONSTANTS = require(\"./constants\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nconst run_command_cursor_1 = require(\"./cursor/run_command_cursor\");\nconst error_1 = require(\"./error\");\nconst collections_1 = require(\"./operations/collections\");\nconst create_collection_1 = require(\"./operations/create_collection\");\nconst drop_1 = require(\"./operations/drop\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst profiling_level_1 = require(\"./operations/profiling_level\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst rename_1 = require(\"./operations/rename\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nconst stats_1 = require(\"./operations/stats\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'useBigInt64', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'enableUtf8Validation', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nclass Db {\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client, databaseName, options) {\n    options = options ?? {};\n    // Filter the options\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n    // Internal state of the db object\n    this.s = {\n      // Options\n      options,\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n    this.client = client;\n  }\n  get databaseName() {\n    return this.s.namespace.db;\n  }\n  // Options\n  get options() {\n    return this.s.options;\n  }\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n  get secondaryOk() {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.client.readPreference;\n    }\n    return this.s.readPreference;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  // get the write Concern\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   */\n  async createCollection(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * The driver will ensure the following fields are attached to the command sent to the server:\n   * - `lsid` - sourced from an implicit session or options.session\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n   * - `$db` - sourced from the name of this database\n   *\n   * If the client has a serverApi setting:\n   * - `apiVersion`\n   * - `apiStrict`\n   * - `apiDeprecationErrors`\n   *\n   * When in a transaction:\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n   *\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   */\n  async command(command, options) {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, {\n      ...(0, bson_1.resolveBSONOptions)(options),\n      session: options?.session,\n      readPreference: options?.readPreference\n    }));\n  }\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n  aggregate(pipeline = [], options) {\n    return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the Admin db instance */\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n  collection(name, options = {}) {\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n    return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   */\n  async stats(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  listCollections(filter = {}, options = {}) {\n    return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   */\n  async renameCollection(fromCollection, toCollection, options) {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, {\n      ...options,\n      new_collection: true,\n      readPreference: read_preference_1.ReadPreference.primary\n    }));\n  }\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   */\n  async dropCollection(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   */\n  async dropDatabase(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   */\n  async collections(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   */\n  async createIndex(name, indexSpec, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n  async removeUser(username, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   */\n  async setProfilingLevel(level, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   */\n  async profilingLevel(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param name - The name of the collection.\n   * @param options - Optional settings for the command\n   */\n  async indexInformation(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch(pipeline = [], options = {}) {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * A low level cursor API providing basic driver functionality:\n   * - ClientSession management\n   * - ReadPreference for server selection\n   * - Running getMores automatically when a local batch is exhausted\n   *\n   * @param command - The command that will start a cursor on the server.\n   * @param options - Configurations for running the command, bson options will apply to getMores\n   */\n  runCursorCommand(command, options) {\n    return new run_command_cursor_1.RunCommandCursor(this, command, options);\n  }\n}\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nexports.Db = Db;\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}","map":{"version":3,"names":["admin_1","require","bson_1","change_stream_1","collection_1","CONSTANTS","aggregation_cursor_1","list_collections_cursor_1","run_command_cursor_1","error_1","collections_1","create_collection_1","drop_1","execute_operation_1","indexes_1","profiling_level_1","remove_user_1","rename_1","run_command_1","set_profiling_level_1","stats_1","read_concern_1","read_preference_1","utils_1","write_concern_1","DB_OPTIONS_ALLOW_LIST","Db","constructor","client","databaseName","options","filterOptions","validateDatabaseName","s","readPreference","ReadPreference","fromOptions","bsonOptions","resolveBSONOptions","pkFactory","DEFAULT_PK_FACTORY","readConcern","ReadConcern","writeConcern","WriteConcern","namespace","MongoDBNamespace","db","secondaryOk","preference","toString","createCollection","name","executeOperation","CreateCollectionOperation","resolveOptions","command","RunCommandOperation","session","aggregate","pipeline","AggregationCursor","admin","Admin","collection","MongoInvalidArgumentError","Collection","stats","DbStatsOperation","listCollections","filter","ListCollectionsCursor","renameCollection","fromCollection","toCollection","RenameOperation","new_collection","primary","dropCollection","DropCollectionOperation","dropDatabase","DropDatabaseOperation","collections","CollectionsOperation","createIndex","indexSpec","CreateIndexOperation","removeUser","username","RemoveUserOperation","setProfilingLevel","level","SetProfilingLevelOperation","profilingLevel","ProfilingLevelOperation","indexInformation","IndexInformationOperation","watch","Array","isArray","ChangeStream","runCursorCommand","RunCommandCursor","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","exports","length","invalidChars","i","indexOf","MongoAPIError"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\db.ts"],"sourcesContent":["import { Admin } from './admin';\nimport { type BSONSerializeOptions, type Document, resolveBSONOptions } from './bson';\nimport { ChangeStream, type ChangeStreamDocument, type ChangeStreamOptions } from './change_stream';\nimport { Collection, type CollectionOptions } from './collection';\nimport * as CONSTANTS from './constants';\nimport { AggregationCursor } from './cursor/aggregation_cursor';\nimport { ListCollectionsCursor } from './cursor/list_collections_cursor';\nimport { RunCommandCursor, type RunCursorCommandOptions } from './cursor/run_command_cursor';\nimport { MongoAPIError, MongoInvalidArgumentError } from './error';\nimport type { MongoClient, PkFactory } from './mongo_client';\nimport type { TODO_NODE_3286 } from './mongo_types';\nimport type { AggregateOptions } from './operations/aggregate';\nimport { CollectionsOperation } from './operations/collections';\nimport type { IndexInformationOptions } from './operations/common_functions';\nimport {\n  CreateCollectionOperation,\n  type CreateCollectionOptions\n} from './operations/create_collection';\nimport {\n  DropCollectionOperation,\n  type DropCollectionOptions,\n  DropDatabaseOperation,\n  type DropDatabaseOptions\n} from './operations/drop';\nimport { executeOperation } from './operations/execute_operation';\nimport {\n  type CreateIndexesOptions,\n  CreateIndexOperation,\n  IndexInformationOperation,\n  type IndexSpecification\n} from './operations/indexes';\nimport type { CollectionInfo, ListCollectionsOptions } from './operations/list_collections';\nimport { ProfilingLevelOperation, type ProfilingLevelOptions } from './operations/profiling_level';\nimport { RemoveUserOperation, type RemoveUserOptions } from './operations/remove_user';\nimport { RenameOperation, type RenameOptions } from './operations/rename';\nimport { RunCommandOperation, type RunCommandOptions } from './operations/run_command';\nimport {\n  type ProfilingLevel,\n  SetProfilingLevelOperation,\n  type SetProfilingLevelOptions\n} from './operations/set_profiling_level';\nimport { DbStatsOperation, type DbStatsOptions } from './operations/stats';\nimport { ReadConcern } from './read_concern';\nimport { ReadPreference, type ReadPreferenceLike } from './read_preference';\nimport { DEFAULT_PK_FACTORY, filterOptions, MongoDBNamespace, resolveOptions } from './utils';\nimport { WriteConcern, type WriteConcernOptions } from './write_concern';\n\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n  'writeConcern',\n  'readPreference',\n  'readPreferenceTags',\n  'native_parser',\n  'forceServerObjectId',\n  'pkFactory',\n  'serializeFunctions',\n  'raw',\n  'authSource',\n  'ignoreUndefined',\n  'readConcern',\n  'retryMiliSeconds',\n  'numberOfRetries',\n  'useBigInt64',\n  'promoteBuffers',\n  'promoteLongs',\n  'bsonRegExp',\n  'enableUtf8Validation',\n  'promoteValues',\n  'compression',\n  'retryWrites'\n];\n\n/** @internal */\nexport interface DbPrivate {\n  options?: DbOptions;\n  readPreference?: ReadPreference;\n  pkFactory: PkFactory;\n  readConcern?: ReadConcern;\n  bsonOptions: BSONSerializeOptions;\n  writeConcern?: WriteConcern;\n  namespace: MongoDBNamespace;\n}\n\n/** @public */\nexport interface DbOptions extends BSONSerializeOptions, WriteConcernOptions {\n  /** If the database authentication is dependent on another databaseName. */\n  authSource?: string;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n  readPreference?: ReadPreferenceLike;\n  /** A primary key factory object for generation of custom _id keys. */\n  pkFactory?: PkFactory;\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcern;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n}\n\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nexport class Db {\n  /** @internal */\n  s: DbPrivate;\n\n  /** @internal */\n  readonly client: MongoClient;\n\n  public static SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\n  public static SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\n  public static SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\n  public static SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\n  public static SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\n  public static SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client: MongoClient, databaseName: string, options?: DbOptions) {\n    options = options ?? {};\n\n    // Filter the options\n    options = filterOptions(options, DB_OPTIONS_ALLOW_LIST);\n\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n\n    // Internal state of the db object\n    this.s = {\n      // Options\n      options,\n      // Unpack read preference\n      readPreference: ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: resolveBSONOptions(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: ReadConcern.fromOptions(options),\n      writeConcern: WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new MongoDBNamespace(databaseName)\n    };\n\n    this.client = client;\n  }\n\n  get databaseName(): string {\n    return this.s.namespace.db;\n  }\n\n  // Options\n  get options(): DbOptions | undefined {\n    return this.s.options;\n  }\n\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n  get secondaryOk(): boolean {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this.s.readConcern;\n  }\n\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n  get readPreference(): ReadPreference {\n    if (this.s.readPreference == null) {\n      return this.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  // get the write Concern\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get namespace(): string {\n    return this.s.namespace.toString();\n  }\n\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   */\n  async createCollection<TSchema extends Document = Document>(\n    name: string,\n    options?: CreateCollectionOptions\n  ): Promise<Collection<TSchema>> {\n    return executeOperation(\n      this.client,\n      new CreateCollectionOperation(this, name, resolveOptions(this, options)) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * The driver will ensure the following fields are attached to the command sent to the server:\n   * - `lsid` - sourced from an implicit session or options.session\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n   * - `$db` - sourced from the name of this database\n   *\n   * If the client has a serverApi setting:\n   * - `apiVersion`\n   * - `apiStrict`\n   * - `apiDeprecationErrors`\n   *\n   * When in a transaction:\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n   *\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   */\n  async command(command: Document, options?: RunCommandOptions): Promise<Document> {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(\n      this.client,\n      new RunCommandOperation(this, command, {\n        ...resolveBSONOptions(options),\n        session: options?.session,\n        readPreference: options?.readPreference\n      })\n    );\n  }\n\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n  aggregate<T extends Document = Document>(\n    pipeline: Document[] = [],\n    options?: AggregateOptions\n  ): AggregationCursor<T> {\n    return new AggregationCursor(\n      this.client,\n      this.s.namespace,\n      pipeline,\n      resolveOptions(this, options)\n    );\n  }\n\n  /** Return the Admin db instance */\n  admin(): Admin {\n    return new Admin(this);\n  }\n\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n  collection<TSchema extends Document = Document>(\n    name: string,\n    options: CollectionOptions = {}\n  ): Collection<TSchema> {\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n    return new Collection<TSchema>(this, name, resolveOptions(this, options));\n  }\n\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   */\n  async stats(options?: DbStatsOptions): Promise<Document> {\n    return executeOperation(this.client, new DbStatsOperation(this, resolveOptions(this, options)));\n  }\n\n  /**\n   * List all collections of this database with optional filter\n   *\n   * @param filter - Query to filter collections by\n   * @param options - Optional settings for the command\n   */\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: true }\n  ): ListCollectionsCursor<Pick<CollectionInfo, 'name' | 'type'>>;\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: false }\n  ): ListCollectionsCursor<CollectionInfo>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter?: Document, options?: ListCollectionsOptions): ListCollectionsCursor<T>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter: Document = {}, options: ListCollectionsOptions = {}): ListCollectionsCursor<T> {\n    return new ListCollectionsCursor<T>(this, filter, resolveOptions(this, options));\n  }\n\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   */\n  async renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options?: RenameOptions\n  ): Promise<Collection<TSchema>> {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(\n      this.client,\n      new RenameOperation(\n        this.collection<TSchema>(fromCollection) as TODO_NODE_3286,\n        toCollection,\n        { ...options, new_collection: true, readPreference: ReadPreference.primary }\n      ) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   */\n  async dropCollection(name: string, options?: DropCollectionOptions): Promise<boolean> {\n    return executeOperation(\n      this.client,\n      new DropCollectionOperation(this, name, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   */\n  async dropDatabase(options?: DropDatabaseOptions): Promise<boolean> {\n    return executeOperation(\n      this.client,\n      new DropDatabaseOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   */\n  async collections(options?: ListCollectionsOptions): Promise<Collection[]> {\n    return executeOperation(\n      this.client,\n      new CollectionsOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   */\n  async createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ): Promise<string> {\n    return executeOperation(\n      this.client,\n      new CreateIndexOperation(this, name, indexSpec, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n  async removeUser(username: string, options?: RemoveUserOptions): Promise<boolean> {\n    return executeOperation(\n      this.client,\n      new RemoveUserOperation(this, username, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   */\n  async setProfilingLevel(\n    level: ProfilingLevel,\n    options?: SetProfilingLevelOptions\n  ): Promise<ProfilingLevel> {\n    return executeOperation(\n      this.client,\n      new SetProfilingLevelOperation(this, level, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   */\n  async profilingLevel(options?: ProfilingLevelOptions): Promise<string> {\n    return executeOperation(\n      this.client,\n      new ProfilingLevelOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param name - The name of the collection.\n   * @param options - Optional settings for the command\n   */\n  async indexInformation(name: string, options?: IndexInformationOptions): Promise<Document> {\n    return executeOperation(\n      this.client,\n      new IndexInformationOperation(this, name, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch<\n    TSchema extends Document = Document,\n    TChange extends Document = ChangeStreamDocument<TSchema>\n  >(pipeline: Document[] = [], options: ChangeStreamOptions = {}): ChangeStream<TSchema, TChange> {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new ChangeStream<TSchema, TChange>(this, pipeline, resolveOptions(this, options));\n  }\n\n  /**\n   * A low level cursor API providing basic driver functionality:\n   * - ClientSession management\n   * - ReadPreference for server selection\n   * - Running getMores automatically when a local batch is exhausted\n   *\n   * @param command - The command that will start a cursor on the server.\n   * @param options - Configurations for running the command, bson options will apply to getMores\n   */\n  runCursorCommand(command: Document, options?: RunCursorCommandOptions): RunCommandCursor {\n    return new RunCommandCursor(this, command, options);\n  }\n}\n\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName: string) {\n  if (typeof databaseName !== 'string')\n    throw new MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0)\n    throw new MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1)\n      throw new MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}