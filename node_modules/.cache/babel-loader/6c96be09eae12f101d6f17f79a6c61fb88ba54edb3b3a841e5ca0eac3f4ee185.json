{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DropSearchIndexOperation = void 0;\nconst error_1 = require(\"../../error\");\nconst operation_1 = require(\"../operation\");\n/** @internal */\nclass DropSearchIndexOperation extends operation_1.AbstractOperation {\n  constructor(collection, name) {\n    super();\n    this.collection = collection;\n    this.name = name;\n  }\n  async execute(server, session) {\n    const namespace = this.collection.fullNamespace;\n    const command = {\n      dropSearchIndex: namespace.collection\n    };\n    if (typeof this.name === 'string') {\n      command.name = this.name;\n    }\n    try {\n      await server.commandAsync(namespace, command, {\n        session\n      });\n    } catch (error) {\n      const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;\n      if (!isNamespaceNotFoundError) {\n        throw error;\n      }\n    }\n  }\n}\nexports.DropSearchIndexOperation = DropSearchIndexOperation;","map":{"version":3,"names":["error_1","require","operation_1","DropSearchIndexOperation","AbstractOperation","constructor","collection","name","execute","server","session","namespace","fullNamespace","command","dropSearchIndex","commandAsync","error","isNamespaceNotFoundError","MongoServerError","code","MONGODB_ERROR_CODES","NamespaceNotFound","exports"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\operations\\search_indexes\\drop.ts"],"sourcesContent":["import type { Document } from 'bson';\n\nimport type { Collection } from '../../collection';\nimport { MONGODB_ERROR_CODES, MongoServerError } from '../../error';\nimport type { Server } from '../../sdam/server';\nimport type { ClientSession } from '../../sessions';\nimport { AbstractOperation } from '../operation';\n\n/** @internal */\nexport class DropSearchIndexOperation extends AbstractOperation<void> {\n  constructor(private readonly collection: Collection, private readonly name: string) {\n    super();\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<void> {\n    const namespace = this.collection.fullNamespace;\n\n    const command: Document = {\n      dropSearchIndex: namespace.collection\n    };\n\n    if (typeof this.name === 'string') {\n      command.name = this.name;\n    }\n\n    try {\n      await server.commandAsync(namespace, command, { session });\n    } catch (error) {\n      const isNamespaceNotFoundError =\n        error instanceof MongoServerError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound;\n      if (!isNamespaceNotFoundError) {\n        throw error;\n      }\n    }\n  }\n}\n"],"mappings":";;;;;;AAGA,MAAAA,OAAA,GAAAC,OAAA;AAGA,MAAAC,WAAA,GAAAD,OAAA;AAEA;AACA,MAAaE,wBAAyB,SAAQD,WAAA,CAAAE,iBAAuB;EACnEC,YAA6BC,UAAsB,EAAmBC,IAAY;IAChF,KAAK,EAAE;IADoB,KAAAD,UAAU,GAAVA,UAAU;IAA+B,KAAAC,IAAI,GAAJA,IAAI;EAE1E;EAES,MAAMC,OAAOA,CAACC,MAAc,EAAEC,OAAkC;IACvE,MAAMC,SAAS,GAAG,IAAI,CAACL,UAAU,CAACM,aAAa;IAE/C,MAAMC,OAAO,GAAa;MACxBC,eAAe,EAAEH,SAAS,CAACL;KAC5B;IAED,IAAI,OAAO,IAAI,CAACC,IAAI,KAAK,QAAQ,EAAE;MACjCM,OAAO,CAACN,IAAI,GAAG,IAAI,CAACA,IAAI;;IAG1B,IAAI;MACF,MAAME,MAAM,CAACM,YAAY,CAACJ,SAAS,EAAEE,OAAO,EAAE;QAAEH;MAAO,CAAE,CAAC;KAC3D,CAAC,OAAOM,KAAK,EAAE;MACd,MAAMC,wBAAwB,GAC5BD,KAAK,YAAYhB,OAAA,CAAAkB,gBAAgB,IAAIF,KAAK,CAACG,IAAI,KAAKnB,OAAA,CAAAoB,mBAAmB,CAACC,iBAAiB;MAC3F,IAAI,CAACJ,wBAAwB,EAAE;QAC7B,MAAMD,KAAK;;;EAGjB;;AAzBFM,OAAA,CAAAnB,wBAAA,GAAAA,wBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}