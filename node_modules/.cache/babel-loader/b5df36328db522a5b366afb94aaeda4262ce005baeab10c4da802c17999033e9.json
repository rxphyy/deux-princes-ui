{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucket = void 0;\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst write_concern_1 = require(\"../write_concern\");\nconst download_1 = require(\"./download\");\nconst upload_1 = require(\"./upload\");\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n  constructor(db, options) {\n    super();\n    this.setMaxListeners(0);\n    const privateOptions = {\n      ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n      ...options,\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n    };\n    this.s = {\n      db,\n      options: privateOptions,\n      _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n      _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n      checkedIndexes: false,\n      calledOpenUploadStream: false\n    };\n  }\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS. The stream's 'id' property contains the resulting\n   * file's id.\n   *\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n  openUploadStream(filename, options) {\n    return new upload_1.GridFSBucketWriteStream(this, filename, options);\n  }\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n   * file's id.\n   */\n  openUploadStreamWithId(id, filename, options) {\n    return new upload_1.GridFSBucketWriteStream(this, filename, {\n      ...options,\n      id\n    });\n  }\n  /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n  openDownloadStream(id, options) {\n    return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n      _id: id\n    }, options);\n  }\n  /**\n   * Deletes a file with the given id\n   *\n   * @param id - The id of the file doc\n   */\n  async delete(id) {\n    const {\n      deletedCount\n    } = await this.s._filesCollection.deleteOne({\n      _id: id\n    });\n    // Delete orphaned chunks before returning FileNotFound\n    await this.s._chunksCollection.deleteMany({\n      files_id: id\n    });\n    if (deletedCount === 0) {\n      // TODO(NODE-3483): Replace with more appropriate error\n      // Consider creating new error MongoGridFSFileNotFoundError\n      throw new error_1.MongoRuntimeError(`File not found for id ${id}`);\n    }\n  }\n  /** Convenience wrapper around find on the files collection */\n  find(filter = {}, options = {}) {\n    return this.s._filesCollection.find(filter, options);\n  }\n  /**\n   * Returns a readable stream (GridFSBucketReadStream) for streaming the\n   * file with the given name from GridFS. If there are multiple files with\n   * the same name, this will stream the most recent file with the given name\n   * (as determined by the `uploadDate` field). You can set the `revision`\n   * option to change this behavior.\n   */\n  openDownloadStreamByName(filename, options) {\n    let sort = {\n      uploadDate: -1\n    };\n    let skip = undefined;\n    if (options && options.revision != null) {\n      if (options.revision >= 0) {\n        sort = {\n          uploadDate: 1\n        };\n        skip = options.revision;\n      } else {\n        skip = -options.revision - 1;\n      }\n    }\n    return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n      filename\n    }, {\n      ...options,\n      sort,\n      skip\n    });\n  }\n  /**\n   * Renames the file with the given _id to the given string\n   *\n   * @param id - the id of the file to rename\n   * @param filename - new name for the file\n   */\n  async rename(id, filename) {\n    const filter = {\n      _id: id\n    };\n    const update = {\n      $set: {\n        filename\n      }\n    };\n    const {\n      matchedCount\n    } = await this.s._filesCollection.updateOne(filter, update);\n    if (matchedCount === 0) {\n      throw new error_1.MongoRuntimeError(`File with id ${id} not found`);\n    }\n  }\n  /** Removes this bucket's files collection, followed by its chunks collection. */\n  async drop() {\n    await this.s._filesCollection.drop();\n    await this.s._chunksCollection.drop();\n  }\n}\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\nGridFSBucket.INDEX = 'index';\nexports.GridFSBucket = GridFSBucket;","map":{"version":3,"names":["error_1","require","mongo_types_1","write_concern_1","download_1","upload_1","DEFAULT_GRIDFS_BUCKET_OPTIONS","bucketName","chunkSizeBytes","GridFSBucket","TypedEventEmitter","constructor","db","options","setMaxListeners","privateOptions","writeConcern","WriteConcern","fromOptions","s","_chunksCollection","collection","_filesCollection","checkedIndexes","calledOpenUploadStream","openUploadStream","filename","GridFSBucketWriteStream","openUploadStreamWithId","id","openDownloadStream","GridFSBucketReadStream","readPreference","_id","delete","deletedCount","deleteOne","deleteMany","files_id","MongoRuntimeError","find","filter","openDownloadStreamByName","sort","uploadDate","skip","undefined","revision","rename","update","$set","matchedCount","updateOne","drop","INDEX","exports"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\gridfs\\index.ts"],"sourcesContent":["import type { ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport type { FindCursor } from '../cursor/find_cursor';\nimport type { Db } from '../db';\nimport { MongoRuntimeError } from '../error';\nimport { type Filter, TypedEventEmitter } from '../mongo_types';\nimport type { ReadPreference } from '../read_preference';\nimport type { Sort } from '../sort';\nimport { WriteConcern, type WriteConcernOptions } from '../write_concern';\nimport type { FindOptions } from './../operations/find';\nimport {\n  GridFSBucketReadStream,\n  type GridFSBucketReadStreamOptions,\n  type GridFSBucketReadStreamOptionsWithRevision,\n  type GridFSFile\n} from './download';\nimport {\n  GridFSBucketWriteStream,\n  type GridFSBucketWriteStreamOptions,\n  type GridFSChunk\n} from './upload';\n\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS: {\n  bucketName: string;\n  chunkSizeBytes: number;\n} = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n\n/** @public */\nexport interface GridFSBucketOptions extends WriteConcernOptions {\n  /** The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot. */\n  bucketName?: string;\n  /** Number of bytes stored in each chunk. Defaults to 255KB */\n  chunkSizeBytes?: number;\n  /** Read preference to be passed to read operations */\n  readPreference?: ReadPreference;\n}\n\n/** @internal */\nexport interface GridFSBucketPrivate {\n  db: Db;\n  options: {\n    bucketName: string;\n    chunkSizeBytes: number;\n    readPreference?: ReadPreference;\n    writeConcern: WriteConcern | undefined;\n  };\n  _chunksCollection: Collection<GridFSChunk>;\n  _filesCollection: Collection<GridFSFile>;\n  checkedIndexes: boolean;\n  calledOpenUploadStream: boolean;\n}\n\n/** @public */\nexport type GridFSBucketEvents = {\n  index(): void;\n};\n\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nexport class GridFSBucket extends TypedEventEmitter<GridFSBucketEvents> {\n  /** @internal */\n  s: GridFSBucketPrivate;\n\n  /**\n   * When the first call to openUploadStream is made, the upload stream will\n   * check to see if it needs to create the proper indexes on the chunks and\n   * files collections. This event is fired either when 1) it determines that\n   * no index creation is necessary, 2) when it successfully creates the\n   * necessary indexes.\n   * @event\n   */\n  static readonly INDEX = 'index' as const;\n\n  constructor(db: Db, options?: GridFSBucketOptions) {\n    super();\n    this.setMaxListeners(0);\n    const privateOptions = {\n      ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n      ...options,\n      writeConcern: WriteConcern.fromOptions(options)\n    };\n    this.s = {\n      db,\n      options: privateOptions,\n      _chunksCollection: db.collection<GridFSChunk>(privateOptions.bucketName + '.chunks'),\n      _filesCollection: db.collection<GridFSFile>(privateOptions.bucketName + '.files'),\n      checkedIndexes: false,\n      calledOpenUploadStream: false\n    };\n  }\n\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS. The stream's 'id' property contains the resulting\n   * file's id.\n   *\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n\n  openUploadStream(\n    filename: string,\n    options?: GridFSBucketWriteStreamOptions\n  ): GridFSBucketWriteStream {\n    return new GridFSBucketWriteStream(this, filename, options);\n  }\n\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n   * file's id.\n   */\n  openUploadStreamWithId(\n    id: ObjectId,\n    filename: string,\n    options?: GridFSBucketWriteStreamOptions\n  ): GridFSBucketWriteStream {\n    return new GridFSBucketWriteStream(this, filename, { ...options, id });\n  }\n\n  /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n  openDownloadStream(\n    id: ObjectId,\n    options?: GridFSBucketReadStreamOptions\n  ): GridFSBucketReadStream {\n    return new GridFSBucketReadStream(\n      this.s._chunksCollection,\n      this.s._filesCollection,\n      this.s.options.readPreference,\n      { _id: id },\n      options\n    );\n  }\n\n  /**\n   * Deletes a file with the given id\n   *\n   * @param id - The id of the file doc\n   */\n  async delete(id: ObjectId): Promise<void> {\n    const { deletedCount } = await this.s._filesCollection.deleteOne({ _id: id });\n\n    // Delete orphaned chunks before returning FileNotFound\n    await this.s._chunksCollection.deleteMany({ files_id: id });\n\n    if (deletedCount === 0) {\n      // TODO(NODE-3483): Replace with more appropriate error\n      // Consider creating new error MongoGridFSFileNotFoundError\n      throw new MongoRuntimeError(`File not found for id ${id}`);\n    }\n  }\n\n  /** Convenience wrapper around find on the files collection */\n  find(filter: Filter<GridFSFile> = {}, options: FindOptions = {}): FindCursor<GridFSFile> {\n    return this.s._filesCollection.find(filter, options);\n  }\n\n  /**\n   * Returns a readable stream (GridFSBucketReadStream) for streaming the\n   * file with the given name from GridFS. If there are multiple files with\n   * the same name, this will stream the most recent file with the given name\n   * (as determined by the `uploadDate` field). You can set the `revision`\n   * option to change this behavior.\n   */\n  openDownloadStreamByName(\n    filename: string,\n    options?: GridFSBucketReadStreamOptionsWithRevision\n  ): GridFSBucketReadStream {\n    let sort: Sort = { uploadDate: -1 };\n    let skip = undefined;\n    if (options && options.revision != null) {\n      if (options.revision >= 0) {\n        sort = { uploadDate: 1 };\n        skip = options.revision;\n      } else {\n        skip = -options.revision - 1;\n      }\n    }\n    return new GridFSBucketReadStream(\n      this.s._chunksCollection,\n      this.s._filesCollection,\n      this.s.options.readPreference,\n      { filename },\n      { ...options, sort, skip }\n    );\n  }\n\n  /**\n   * Renames the file with the given _id to the given string\n   *\n   * @param id - the id of the file to rename\n   * @param filename - new name for the file\n   */\n  async rename(id: ObjectId, filename: string): Promise<void> {\n    const filter = { _id: id };\n    const update = { $set: { filename } };\n    const { matchedCount } = await this.s._filesCollection.updateOne(filter, update);\n    if (matchedCount === 0) {\n      throw new MongoRuntimeError(`File with id ${id} not found`);\n    }\n  }\n\n  /** Removes this bucket's files collection, followed by its chunks collection. */\n  async drop(): Promise<void> {\n    await this.s._filesCollection.drop();\n    await this.s._chunksCollection.drop();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}