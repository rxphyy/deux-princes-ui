{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggregationCursor = void 0;\nvar aggregate_1 = require(\"../operations/aggregate\");\nvar execute_operation_1 = require(\"../operations/execute_operation\");\nvar utils_1 = require(\"../utils\");\nvar abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nvar kPipeline = Symbol('pipeline');\n/** @internal */\nvar kOptions = Symbol('options');\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nvar AggregationCursor = /*#__PURE__*/function (_abstract_cursor_1$Ab) {\n  _inherits(AggregationCursor, _abstract_cursor_1$Ab);\n  var _super = _createSuper(AggregationCursor);\n  /** @internal */\n  function AggregationCursor(client, namespace) {\n    var _this;\n    var pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, AggregationCursor);\n    _this = _super.call(this, client, namespace, options);\n    _this[kPipeline] = pipeline;\n    _this[kOptions] = options;\n    return _this;\n  }\n  _createClass(AggregationCursor, [{\n    key: \"pipeline\",\n    get: function get() {\n      return this[kPipeline];\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clonedOptions = (0, utils_1.mergeOptions)({}, this[kOptions]);\n      delete clonedOptions.session;\n      return new AggregationCursor(this.client, this.namespace, this[kPipeline], _objectSpread({}, clonedOptions));\n    }\n  }, {\n    key: \"map\",\n    value: function map(transform) {\n      return _get(_getPrototypeOf(AggregationCursor.prototype), \"map\", this).call(this, transform);\n    }\n    /** @internal */\n  }, {\n    key: \"_initialize\",\n    value: function () {\n      var _initialize2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(session) {\n        var aggregateOperation, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], _objectSpread(_objectSpread(_objectSpread({}, this[kOptions]), this.cursorOptions), {}, {\n                session: session\n              }));\n              _context.next = 3;\n              return (0, execute_operation_1.executeOperation)(this.client, aggregateOperation);\n            case 3:\n              response = _context.sent;\n              return _context.abrupt(\"return\", {\n                server: aggregateOperation.server,\n                session: session,\n                response: response\n              });\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _initialize(_x) {\n        return _initialize2.apply(this, arguments);\n      }\n      return _initialize;\n    }() /** Execute the explain for the cursor */\n  }, {\n    key: \"explain\",\n    value: function () {\n      var _explain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(verbosity) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], _objectSpread(_objectSpread(_objectSpread({}, this[kOptions]), this.cursorOptions), {}, {\n                explain: verbosity !== null && verbosity !== void 0 ? verbosity : true\n              }))));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function explain(_x2) {\n        return _explain.apply(this, arguments);\n      }\n      return explain;\n    }()\n  }, {\n    key: \"group\",\n    value: function group($group) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kPipeline].push({\n        $group: $group\n      });\n      return this;\n    }\n    /** Add a limit stage to the aggregation pipeline */\n  }, {\n    key: \"limit\",\n    value: function limit($limit) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kPipeline].push({\n        $limit: $limit\n      });\n      return this;\n    }\n    /** Add a match stage to the aggregation pipeline */\n  }, {\n    key: \"match\",\n    value: function match($match) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kPipeline].push({\n        $match: $match\n      });\n      return this;\n    }\n    /** Add an out stage to the aggregation pipeline */\n  }, {\n    key: \"out\",\n    value: function out($out) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kPipeline].push({\n        $out: $out\n      });\n      return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n  }, {\n    key: \"project\",\n    value: function project($project) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kPipeline].push({\n        $project: $project\n      });\n      return this;\n    }\n    /** Add a lookup stage to the aggregation pipeline */\n  }, {\n    key: \"lookup\",\n    value: function lookup($lookup) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kPipeline].push({\n        $lookup: $lookup\n      });\n      return this;\n    }\n    /** Add a redact stage to the aggregation pipeline */\n  }, {\n    key: \"redact\",\n    value: function redact($redact) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kPipeline].push({\n        $redact: $redact\n      });\n      return this;\n    }\n    /** Add a skip stage to the aggregation pipeline */\n  }, {\n    key: \"skip\",\n    value: function skip($skip) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kPipeline].push({\n        $skip: $skip\n      });\n      return this;\n    }\n    /** Add a sort stage to the aggregation pipeline */\n  }, {\n    key: \"sort\",\n    value: function sort($sort) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kPipeline].push({\n        $sort: $sort\n      });\n      return this;\n    }\n    /** Add a unwind stage to the aggregation pipeline */\n  }, {\n    key: \"unwind\",\n    value: function unwind($unwind) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kPipeline].push({\n        $unwind: $unwind\n      });\n      return this;\n    }\n    /** Add a geoNear stage to the aggregation pipeline */\n  }, {\n    key: \"geoNear\",\n    value: function geoNear($geoNear) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kPipeline].push({\n        $geoNear: $geoNear\n      });\n      return this;\n    }\n  }]);\n  return AggregationCursor;\n}(abstract_cursor_1.AbstractCursor);\nexports.AggregationCursor = AggregationCursor;","map":{"version":3,"names":["aggregate_1","require","execute_operation_1","utils_1","abstract_cursor_1","kPipeline","Symbol","kOptions","AggregationCursor","_abstract_cursor_1$Ab","_inherits","_super","_createSuper","client","namespace","_this","pipeline","arguments","length","undefined","options","_classCallCheck","call","_createClass","key","get","value","clone","clonedOptions","mergeOptions","session","_objectSpread","map","transform","_get","_getPrototypeOf","prototype","_initialize2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","aggregateOperation","response","wrap","_callee$","_context","prev","next","AggregateOperation","cursorOptions","executeOperation","sent","abrupt","server","stop","_initialize","_x","apply","_explain","_callee2","verbosity","_callee2$","_context2","explain","_x2","group","$group","assertUninitialized","push","limit","$limit","match","$match","out","$out","project","$project","lookup","$lookup","redact","$redact","skip","$skip","sort","$sort","unwind","$unwind","geoNear","$geoNear","AbstractCursor","exports"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cursor\\aggregation_cursor.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { ExplainVerbosityLike } from '../explain';\nimport type { MongoClient } from '../mongo_client';\nimport { AggregateOperation, type AggregateOptions } from '../operations/aggregate';\nimport { executeOperation, type ExecutionResult } from '../operations/execute_operation';\nimport type { ClientSession } from '../sessions';\nimport type { Sort } from '../sort';\nimport type { MongoDBNamespace } from '../utils';\nimport { mergeOptions } from '../utils';\nimport type { AbstractCursorOptions } from './abstract_cursor';\nimport { AbstractCursor, assertUninitialized } from './abstract_cursor';\n\n/** @public */\nexport interface AggregationCursorOptions extends AbstractCursorOptions, AggregateOptions {}\n\n/** @internal */\nconst kPipeline = Symbol('pipeline');\n/** @internal */\nconst kOptions = Symbol('options');\n\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nexport class AggregationCursor<TSchema = any> extends AbstractCursor<TSchema> {\n  /** @internal */\n  [kPipeline]: Document[];\n  /** @internal */\n  [kOptions]: AggregateOptions;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    pipeline: Document[] = [],\n    options: AggregateOptions = {}\n  ) {\n    super(client, namespace, options);\n\n    this[kPipeline] = pipeline;\n    this[kOptions] = options;\n  }\n\n  get pipeline(): Document[] {\n    return this[kPipeline];\n  }\n\n  clone(): AggregationCursor<TSchema> {\n    const clonedOptions = mergeOptions({}, this[kOptions]);\n    delete clonedOptions.session;\n    return new AggregationCursor(this.client, this.namespace, this[kPipeline], {\n      ...clonedOptions\n    });\n  }\n\n  override map<T>(transform: (doc: TSchema) => T): AggregationCursor<T> {\n    return super.map(transform) as AggregationCursor<T>;\n  }\n\n  /** @internal */\n  async _initialize(session: ClientSession): Promise<ExecutionResult> {\n    const aggregateOperation = new AggregateOperation(this.namespace, this[kPipeline], {\n      ...this[kOptions],\n      ...this.cursorOptions,\n      session\n    });\n\n    const response = await executeOperation(this.client, aggregateOperation);\n\n    // TODO: NODE-2882\n    return { server: aggregateOperation.server, session, response };\n  }\n\n  /** Execute the explain for the cursor */\n  async explain(verbosity?: ExplainVerbosityLike): Promise<Document> {\n    return executeOperation(\n      this.client,\n      new AggregateOperation(this.namespace, this[kPipeline], {\n        ...this[kOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        explain: verbosity ?? true\n      })\n    );\n  }\n\n  /** Add a group stage to the aggregation pipeline */\n  group<T = TSchema>($group: Document): AggregationCursor<T>;\n  group($group: Document): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $group });\n    return this;\n  }\n\n  /** Add a limit stage to the aggregation pipeline */\n  limit($limit: number): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $limit });\n    return this;\n  }\n\n  /** Add a match stage to the aggregation pipeline */\n  match($match: Document): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $match });\n    return this;\n  }\n\n  /** Add an out stage to the aggregation pipeline */\n  out($out: { db: string; coll: string } | string): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $out });\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.aggregate().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project<T extends Document = Document>($project: Document): AggregationCursor<T> {\n    assertUninitialized(this);\n    this[kPipeline].push({ $project });\n    return this as unknown as AggregationCursor<T>;\n  }\n\n  /** Add a lookup stage to the aggregation pipeline */\n  lookup($lookup: Document): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $lookup });\n    return this;\n  }\n\n  /** Add a redact stage to the aggregation pipeline */\n  redact($redact: Document): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $redact });\n    return this;\n  }\n\n  /** Add a skip stage to the aggregation pipeline */\n  skip($skip: number): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $skip });\n    return this;\n  }\n\n  /** Add a sort stage to the aggregation pipeline */\n  sort($sort: Sort): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $sort });\n    return this;\n  }\n\n  /** Add a unwind stage to the aggregation pipeline */\n  unwind($unwind: Document | string): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $unwind });\n    return this;\n  }\n\n  /** Add a geoNear stage to the aggregation pipeline */\n  geoNear($geoNear: Document): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $geoNear });\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}