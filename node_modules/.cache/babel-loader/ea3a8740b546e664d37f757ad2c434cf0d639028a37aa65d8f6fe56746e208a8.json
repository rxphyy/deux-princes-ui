{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStream = void 0;\nvar collection_1 = require(\"./collection\");\nvar constants_1 = require(\"./constants\");\nvar change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nvar db_1 = require(\"./db\");\nvar error_1 = require(\"./error\");\nvar mongo_client_1 = require(\"./mongo_client\");\nvar mongo_types_1 = require(\"./mongo_types\");\nvar utils_1 = require(\"./utils\");\n/** @internal */\nvar kCursorStream = Symbol('cursorStream');\n/** @internal */\nvar kClosed = Symbol('closed');\n/** @internal */\nvar kMode = Symbol('mode');\nvar CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument', 'fullDocumentBeforeChange', 'showExpandedEvents'];\nvar CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nvar CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nvar NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nvar CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nvar ChangeStream = /*#__PURE__*/function (_mongo_types_1$TypedE, _Symbol$asyncIterator) {\n  _inherits(ChangeStream, _mongo_types_1$TypedE);\n  var _super = _createSuper(ChangeStream);\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  function ChangeStream(parent) {\n    var _this2;\n    var pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, ChangeStream);\n    _this2 = _super.call(this);\n    _this2.pipeline = pipeline;\n    _this2.options = _objectSpread({}, options);\n    delete _this2.options.writeConcern;\n    if (parent instanceof collection_1.Collection) {\n      _this2.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      _this2.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      _this2.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n    _this2.parent = parent;\n    _this2.namespace = parent.s.namespace;\n    if (!_this2.options.readPreference && parent.readPreference) {\n      _this2.options.readPreference = parent.readPreference;\n    }\n    // Create contained Change Stream cursor\n    _this2.cursor = _this2._createChangeStreamCursor(options);\n    _this2[kClosed] = false;\n    _this2[kMode] = false;\n    // Listen for any `change` listeners being added to ChangeStream\n    _this2.on('newListener', function (eventName) {\n      if (eventName === 'change' && _this2.cursor && _this2.listenerCount('change') === 0) {\n        _this2._streamEvents(_this2.cursor);\n      }\n    });\n    _this2.on('removeListener', function (eventName) {\n      if (eventName === 'change' && _this2.listenerCount('change') === 0 && _this2.cursor) {\n        var _this2$kCursorStream;\n        (_this2$kCursorStream = _this2[kCursorStream]) === null || _this2$kCursorStream === void 0 || _this2$kCursorStream.removeAllListeners('data');\n      }\n    });\n    return _this2;\n  }\n  /** @internal */\n  _createClass(ChangeStream, [{\n    key: \"cursorStream\",\n    get: function get() {\n      return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n  }, {\n    key: \"resumeToken\",\n    get: function get() {\n      var _this$cursor;\n      return (_this$cursor = this.cursor) === null || _this$cursor === void 0 ? void 0 : _this$cursor.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */\n  }, {\n    key: \"hasNext\",\n    value: function () {\n      var _hasNext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _hasNext2;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this._setIsIterator();\n              // Change streams must resume indefinitely while each resume event succeeds.\n              // This loop continues until either a change event is received or until a resume attempt\n              // fails.\n              // eslint-disable-next-line no-constant-condition\n            case 1:\n              if (!true) {\n                _context.next = 28;\n                break;\n              }\n              _context.prev = 2;\n              _context.next = 5;\n              return this.cursor.hasNext();\n            case 5:\n              _hasNext2 = _context.sent;\n              return _context.abrupt(\"return\", _hasNext2);\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              _context.prev = 11;\n              _context.next = 14;\n              return this._processErrorIteratorMode(_context.t0);\n            case 14:\n              _context.next = 26;\n              break;\n            case 16:\n              _context.prev = 16;\n              _context.t1 = _context[\"catch\"](11);\n              _context.prev = 18;\n              _context.next = 21;\n              return this.close();\n            case 21:\n              _context.next = 25;\n              break;\n            case 23:\n              _context.prev = 23;\n              _context.t2 = _context[\"catch\"](18);\n            case 25:\n              throw _context.t1;\n            case 26:\n              _context.next = 1;\n              break;\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 9], [11, 16], [18, 23]]);\n      }));\n      function hasNext() {\n        return _hasNext.apply(this, arguments);\n      }\n      return hasNext;\n    }() /** Get the next available document from the Change Stream. */\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var change, processedChange;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this._setIsIterator();\n              // Change streams must resume indefinitely while each resume event succeeds.\n              // This loop continues until either a change event is received or until a resume attempt\n              // fails.\n              // eslint-disable-next-line no-constant-condition\n            case 1:\n              if (!true) {\n                _context2.next = 29;\n                break;\n              }\n              _context2.prev = 2;\n              _context2.next = 5;\n              return this.cursor.next();\n            case 5:\n              change = _context2.sent;\n              processedChange = this._processChange(change !== null && change !== void 0 ? change : null);\n              return _context2.abrupt(\"return\", processedChange);\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](2);\n              _context2.prev = 12;\n              _context2.next = 15;\n              return this._processErrorIteratorMode(_context2.t0);\n            case 15:\n              _context2.next = 27;\n              break;\n            case 17:\n              _context2.prev = 17;\n              _context2.t1 = _context2[\"catch\"](12);\n              _context2.prev = 19;\n              _context2.next = 22;\n              return this.close();\n            case 22:\n              _context2.next = 26;\n              break;\n            case 24:\n              _context2.prev = 24;\n              _context2.t2 = _context2[\"catch\"](19);\n            case 26:\n              throw _context2.t1;\n            case 27:\n              _context2.next = 1;\n              break;\n            case 29:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[2, 10], [12, 17], [19, 24]]);\n      }));\n      function next() {\n        return _next.apply(this, arguments);\n      }\n      return next;\n    }()\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */\n  }, {\n    key: \"tryNext\",\n    value: function () {\n      var _tryNext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var change;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this._setIsIterator();\n              // Change streams must resume indefinitely while each resume event succeeds.\n              // This loop continues until either a change event is received or until a resume attempt\n              // fails.\n              // eslint-disable-next-line no-constant-condition\n            case 1:\n              if (!true) {\n                _context3.next = 28;\n                break;\n              }\n              _context3.prev = 2;\n              _context3.next = 5;\n              return this.cursor.tryNext();\n            case 5:\n              change = _context3.sent;\n              return _context3.abrupt(\"return\", change !== null && change !== void 0 ? change : null);\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](2);\n              _context3.prev = 11;\n              _context3.next = 14;\n              return this._processErrorIteratorMode(_context3.t0);\n            case 14:\n              _context3.next = 26;\n              break;\n            case 16:\n              _context3.prev = 16;\n              _context3.t1 = _context3[\"catch\"](11);\n              _context3.prev = 18;\n              _context3.next = 21;\n              return this.close();\n            case 21:\n              _context3.next = 25;\n              break;\n            case 23:\n              _context3.prev = 23;\n              _context3.t2 = _context3[\"catch\"](18);\n            case 25:\n              throw _context3.t1;\n            case 26:\n              _context3.next = 1;\n              break;\n            case 28:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[2, 9], [11, 16], [18, 23]]);\n      }));\n      function tryNext() {\n        return _tryNext.apply(this, arguments);\n      }\n      return tryNext;\n    }()\n  }, {\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!_this.closed) {\n                _context4.next = 2;\n                break;\n              }\n              return _context4.abrupt(\"return\");\n            case 2:\n              _context4.prev = 2;\n            case 3:\n              if (!true) {\n                _context4.next = 10;\n                break;\n              }\n              _context4.next = 6;\n              return _awaitAsyncGenerator(_this.next());\n            case 6:\n              _context4.next = 8;\n              return _context4.sent;\n            case 8:\n              _context4.next = 3;\n              break;\n            case 10:\n              _context4.prev = 10;\n              _context4.prev = 11;\n              _context4.next = 14;\n              return _awaitAsyncGenerator(_this.close());\n            case 14:\n              _context4.next = 18;\n              break;\n            case 16:\n              _context4.prev = 16;\n              _context4.t0 = _context4[\"catch\"](11);\n            case 18:\n              return _context4.finish(10);\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[2,, 10, 19], [11, 16]]);\n      }))();\n    }\n    /** Is the cursor closed */\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this[kClosed] || this.cursor.closed;\n    }\n    /** Close the Change Stream */\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var cursor;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              this[kClosed] = true;\n              cursor = this.cursor;\n              _context5.prev = 2;\n              _context5.next = 5;\n              return cursor.close();\n            case 5:\n              _context5.prev = 5;\n              this._endStream();\n              return _context5.finish(5);\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[2,, 5, 8]]);\n      }));\n      function close() {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n  }, {\n    key: \"stream\",\n    value: function stream(options) {\n      if (this.closed) {\n        throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n      }\n      this.streamOptions = options;\n      return this.cursor.stream(options);\n    }\n    /** @internal */\n  }, {\n    key: \"_setIsEmitter\",\n    value: function _setIsEmitter() {\n      if (this[kMode] === 'iterator') {\n        // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n        throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n      }\n      this[kMode] = 'emitter';\n    }\n    /** @internal */\n  }, {\n    key: \"_setIsIterator\",\n    value: function _setIsIterator() {\n      if (this[kMode] === 'emitter') {\n        // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n        throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n      }\n      this[kMode] = 'iterator';\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */\n  }, {\n    key: \"_createChangeStreamCursor\",\n    value: function _createChangeStreamCursor(options) {\n      var _this3 = this;\n      var changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n      if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n        changeStreamStageOptions.allChangesForCluster = true;\n      }\n      var pipeline = [{\n        $changeStream: changeStreamStageOptions\n      }].concat(_toConsumableArray(this.pipeline));\n      var client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.client : null;\n      if (client == null) {\n        // This should never happen because of the assertion in the constructor\n        throw new error_1.MongoRuntimeError(\"Changestream type should only be one of cluster, database, collection. Found \".concat(this.type.toString()));\n      }\n      var changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n      var _loop = function _loop() {\n        var event = _CHANGE_STREAM_EVENTS[_i];\n        changeStreamCursor.on(event, function (e) {\n          return _this3.emit(event, e);\n        });\n      };\n      for (var _i = 0, _CHANGE_STREAM_EVENTS = CHANGE_STREAM_EVENTS; _i < _CHANGE_STREAM_EVENTS.length; _i++) {\n        _loop();\n      }\n      if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n        this._streamEvents(changeStreamCursor);\n      }\n      return changeStreamCursor;\n    }\n    /** @internal */\n  }, {\n    key: \"_closeEmitterModeWithError\",\n    value: function _closeEmitterModeWithError(error) {\n      this.emit(ChangeStream.ERROR, error);\n      this.close().catch(function () {\n        return null;\n      });\n    }\n    /** @internal */\n  }, {\n    key: \"_streamEvents\",\n    value: function _streamEvents(cursor) {\n      var _this$kCursorStream,\n        _this4 = this;\n      this._setIsEmitter();\n      var stream = (_this$kCursorStream = this[kCursorStream]) !== null && _this$kCursorStream !== void 0 ? _this$kCursorStream : cursor.stream();\n      this[kCursorStream] = stream;\n      stream.on('data', function (change) {\n        try {\n          var processedChange = _this4._processChange(change);\n          _this4.emit(ChangeStream.CHANGE, processedChange);\n        } catch (error) {\n          _this4.emit(ChangeStream.ERROR, error);\n        }\n      });\n      stream.on('error', function (error) {\n        return _this4._processErrorStreamMode(error);\n      });\n    }\n    /** @internal */\n  }, {\n    key: \"_endStream\",\n    value: function _endStream() {\n      var cursorStream = this[kCursorStream];\n      if (cursorStream) {\n        ['data', 'close', 'end', 'error'].forEach(function (event) {\n          return cursorStream.removeAllListeners(event);\n        });\n        cursorStream.destroy();\n      }\n      this[kCursorStream] = undefined;\n    }\n    /** @internal */\n  }, {\n    key: \"_processChange\",\n    value: function _processChange(change) {\n      if (this[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n      }\n      // a null change means the cursor has been notified, implicitly closing the change stream\n      if (change == null) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n      }\n      if (change && !change._id) {\n        throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n      }\n      // cache the resume token\n      this.cursor.cacheResumeToken(change._id);\n      // wipe the startAtOperationTime if there was one so that there won't be a conflict\n      // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n      this.options.startAtOperationTime = undefined;\n      return change;\n    }\n    /** @internal */\n  }, {\n    key: \"_processErrorStreamMode\",\n    value: function _processErrorStreamMode(changeStreamError) {\n      var _this5 = this;\n      // If the change stream has been closed explicitly, do not process error.\n      if (this[kClosed]) return;\n      if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n        this._endStream();\n        this.cursor.close().catch(function () {\n          return null;\n        });\n        var topology = (0, utils_1.getTopology)(this.parent);\n        topology.selectServer(this.cursor.readPreference, {}, function (serverSelectionError) {\n          if (serverSelectionError) return _this5._closeEmitterModeWithError(changeStreamError);\n          _this5.cursor = _this5._createChangeStreamCursor(_this5.cursor.resumeOptions);\n        });\n      } else {\n        this._closeEmitterModeWithError(changeStreamError);\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"_processErrorIteratorMode\",\n    value: function () {\n      var _processErrorIteratorMode2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(changeStreamError) {\n        var topology;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!this[kClosed]) {\n                _context6.next = 2;\n                break;\n              }\n              throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n            case 2:\n              if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n                _context6.next = 11;\n                break;\n              }\n              _context6.prev = 3;\n              _context6.next = 6;\n              return this.close();\n            case 6:\n              _context6.next = 10;\n              break;\n            case 8:\n              _context6.prev = 8;\n              _context6.t0 = _context6[\"catch\"](3);\n            case 10:\n              throw changeStreamError;\n            case 11:\n              _context6.next = 13;\n              return this.cursor.close().catch(function () {\n                return null;\n              });\n            case 13:\n              topology = (0, utils_1.getTopology)(this.parent);\n              _context6.prev = 14;\n              _context6.next = 17;\n              return topology.selectServerAsync(this.cursor.readPreference, {});\n            case 17:\n              this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n              _context6.next = 25;\n              break;\n            case 20:\n              _context6.prev = 20;\n              _context6.t1 = _context6[\"catch\"](14);\n              _context6.next = 24;\n              return this.close();\n            case 24:\n              throw changeStreamError;\n            case 25:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[3, 8], [14, 20]]);\n      }));\n      function _processErrorIteratorMode(_x) {\n        return _processErrorIteratorMode2.apply(this, arguments);\n      }\n      return _processErrorIteratorMode;\n    }()\n  }]);\n  return ChangeStream;\n}(mongo_types_1.TypedEventEmitter, Symbol.asyncIterator);\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\nexports.ChangeStream = ChangeStream;","map":{"version":3,"names":["collection_1","require","constants_1","change_stream_cursor_1","db_1","error_1","mongo_client_1","mongo_types_1","utils_1","kCursorStream","Symbol","kClosed","kMode","CHANGE_STREAM_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","CHANGE_STREAM_EVENTS","RESUME_TOKEN_CHANGED","END","CLOSE","NO_RESUME_TOKEN_ERROR","CHANGESTREAM_CLOSED_ERROR","ChangeStream","_mongo_types_1$TypedE","_Symbol$asyncIterator","_inherits","_super","_createSuper","parent","_this2","pipeline","arguments","length","undefined","options","_classCallCheck","call","_objectSpread","writeConcern","Collection","type","Db","MongoClient","MongoChangeStreamError","namespace","s","readPreference","cursor","_createChangeStreamCursor","on","eventName","listenerCount","_streamEvents","_this2$kCursorStream","removeAllListeners","_createClass","key","get","_this$cursor","resumeToken","value","_hasNext","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_hasNext2","wrap","_callee$","_context","prev","next","_setIsIterator","hasNext","sent","abrupt","t0","_processErrorIteratorMode","t1","close","t2","stop","apply","_next","_callee2","change","processedChange","_callee2$","_context2","_processChange","_tryNext","_callee3","_callee3$","_context3","tryNext","_this","_wrapAsyncGenerator","_callee4","_callee4$","_context4","closed","_awaitAsyncGenerator","finish","_close","_callee5","_callee5$","_context5","_endStream","stream","streamOptions","_setIsEmitter","MongoAPIError","_this3","changeStreamStageOptions","filterOptions","allChangesForCluster","$changeStream","concat","_toConsumableArray","client","MongoRuntimeError","toString","changeStreamCursor","ChangeStreamCursor","_loop","event","_CHANGE_STREAM_EVENTS","_i","e","emit","CHANGE","_closeEmitterModeWithError","error","ERROR","catch","_this$kCursorStream","_this4","_processErrorStreamMode","cursorStream","forEach","destroy","_id","cacheResumeToken","startAtOperationTime","changeStreamError","_this5","isResumableError","maxWireVersion","topology","getTopology","selectServer","serverSelectionError","resumeOptions","_processErrorIteratorMode2","_callee6","_callee6$","_context6","selectServerAsync","_x","TypedEventEmitter","asyncIterator","RESPONSE","MORE","INIT","exports"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\change_stream.ts"],"sourcesContent":["import type { Readable } from 'stream';\n\nimport type { Binary, Document, Timestamp } from './bson';\nimport { Collection } from './collection';\nimport { CHANGE, CLOSE, END, ERROR, INIT, MORE, RESPONSE, RESUME_TOKEN_CHANGED } from './constants';\nimport type { AbstractCursorEvents, CursorStreamOptions } from './cursor/abstract_cursor';\nimport { ChangeStreamCursor, type ChangeStreamCursorOptions } from './cursor/change_stream_cursor';\nimport { Db } from './db';\nimport {\n  type AnyError,\n  isResumableError,\n  MongoAPIError,\n  MongoChangeStreamError,\n  MongoRuntimeError\n} from './error';\nimport { MongoClient } from './mongo_client';\nimport { type InferIdType, TypedEventEmitter } from './mongo_types';\nimport type { AggregateOptions } from './operations/aggregate';\nimport type { CollationOptions, OperationParent } from './operations/command';\nimport type { ReadPreference } from './read_preference';\nimport type { ServerSessionId } from './sessions';\nimport { filterOptions, getTopology, type MongoDBNamespace } from './utils';\n\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\n\nconst CHANGE_STREAM_OPTIONS = [\n  'resumeAfter',\n  'startAfter',\n  'startAtOperationTime',\n  'fullDocument',\n  'fullDocumentBeforeChange',\n  'showExpandedEvents'\n] as const;\n\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n\nconst CHANGE_STREAM_EVENTS = [RESUME_TOKEN_CHANGED, END, CLOSE];\n\nconst NO_RESUME_TOKEN_ERROR =\n  'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n\n/**\n * @public\n * @deprecated Please use the ChangeStreamCursorOptions type instead.\n */\nexport interface ResumeOptions {\n  startAtOperationTime?: Timestamp;\n  batchSize?: number;\n  maxAwaitTimeMS?: number;\n  collation?: CollationOptions;\n  readPreference?: ReadPreference;\n  resumeAfter?: ResumeToken;\n  startAfter?: ResumeToken;\n  fullDocument?: string;\n}\n\n/**\n * Represents the logical starting point for a new ChangeStream or resuming a ChangeStream on the server.\n * @see https://www.mongodb.com/docs/manual/changeStreams/#std-label-change-stream-resume\n * @public\n */\nexport type ResumeToken = unknown;\n\n/**\n * Represents a specific point in time on a server. Can be retrieved by using `db.command()`\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/method/db.runCommand/#response\n */\nexport type OperationTime = Timestamp;\n\n/**\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @public\n */\nexport interface ChangeStreamOptions extends Omit<AggregateOptions, 'writeConcern'> {\n  /**\n   * Allowed values: 'updateLookup', 'whenAvailable', 'required'.\n   *\n   * When set to 'updateLookup', the change notification for partial updates\n   * will include both a delta describing the changes to the document as well\n   * as a copy of the entire document that was changed from some time after\n   * the change occurred.\n   *\n   * When set to 'whenAvailable', configures the change stream to return the\n   * post-image of the modified document for replace and update change events\n   * if the post-image for this event is available.\n   *\n   * When set to 'required', the same behavior as 'whenAvailable' except that\n   * an error is raised if the post-image is not available.\n   */\n  fullDocument?: string;\n\n  /**\n   * Allowed values: 'whenAvailable', 'required', 'off'.\n   *\n   * The default is to not send a value, which is equivalent to 'off'.\n   *\n   * When set to 'whenAvailable', configures the change stream to return the\n   * pre-image of the modified document for replace, update, and delete change\n   * events if it is available.\n   *\n   * When set to 'required', the same behavior as 'whenAvailable' except that\n   * an error is raised if the pre-image is not available.\n   */\n  fullDocumentBeforeChange?: string;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\n  maxAwaitTimeMS?: number;\n  /**\n   * Allows you to start a changeStream after a specified event.\n   * @see https://www.mongodb.com/docs/manual/changeStreams/#resumeafter-for-change-streams\n   */\n  resumeAfter?: ResumeToken;\n  /**\n   * Similar to resumeAfter, but will allow you to start after an invalidated event.\n   * @see https://www.mongodb.com/docs/manual/changeStreams/#startafter-for-change-streams\n   */\n  startAfter?: ResumeToken;\n  /** Will start the changeStream after the specified operationTime. */\n  startAtOperationTime?: OperationTime;\n  /**\n   * The number of documents to return per batch.\n   * @see https://www.mongodb.com/docs/manual/reference/command/aggregate\n   */\n  batchSize?: number;\n\n  /**\n   * When enabled, configures the change stream to include extra change events.\n   *\n   * - createIndexes\n   * - dropIndexes\n   * - modify\n   * - create\n   * - shardCollection\n   * - reshardCollection\n   * - refineCollectionShardKey\n   */\n  showExpandedEvents?: boolean;\n}\n\n/** @public */\nexport interface ChangeStreamNameSpace {\n  db: string;\n  coll: string;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentKey<TSchema extends Document = Document> {\n  /**\n   * For unsharded collections this contains a single field `_id`.\n   * For sharded collections, this will contain all the components of the shard key\n   */\n  documentKey: { _id: InferIdType<TSchema>; [shardKey: string]: any };\n}\n\n/** @public */\nexport interface ChangeStreamSplitEvent {\n  /** Which fragment of the change this is. */\n  fragment: number;\n  /** The total number of fragments. */\n  of: number;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentCommon {\n  /**\n   * The id functions as an opaque token for use when resuming an interrupted\n   * change stream.\n   */\n  _id: ResumeToken;\n  /**\n   * The timestamp from the oplog entry associated with the event.\n   * For events that happened as part of a multi-document transaction, the associated change stream\n   * notifications will have the same clusterTime value, namely the time when the transaction was committed.\n   * On a sharded cluster, events that occur on different shards can have the same clusterTime but be\n   * associated with different transactions or even not be associated with any transaction.\n   * To identify events for a single transaction, you can use the combination of lsid and txnNumber in the change stream event document.\n   */\n  clusterTime?: Timestamp;\n\n  /**\n   * The transaction number.\n   * Only present if the operation is part of a multi-document transaction.\n   *\n   * **NOTE:** txnNumber can be a Long if promoteLongs is set to false\n   */\n  txnNumber?: number;\n\n  /**\n   * The identifier for the session associated with the transaction.\n   * Only present if the operation is part of a multi-document transaction.\n   */\n  lsid?: ServerSessionId;\n\n  /**\n   * When the change stream's backing aggregation pipeline contains the $changeStreamSplitLargeEvent\n   * stage, events larger than 16MB will be split into multiple events and contain the\n   * following information about which fragment the current event is.\n   */\n  splitEvent?: ChangeStreamSplitEvent;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentCollectionUUID {\n  /**\n   * The UUID (Binary subtype 4) of the collection that the operation was performed on.\n   *\n   * Only present when the `showExpandedEvents` flag is enabled.\n   *\n   * **NOTE:** collectionUUID will be converted to a NodeJS Buffer if the promoteBuffers\n   *    flag is enabled.\n   *\n   * @sinceServerVersion 6.1.0\n   */\n  collectionUUID: Binary;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentOperationDescription {\n  /**\n   * An description of the operation.\n   *\n   * Only present when the `showExpandedEvents` flag is enabled.\n   *\n   * @sinceServerVersion 6.1.0\n   */\n  operationDescription?: Document;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#insert-event\n */\nexport interface ChangeStreamInsertDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'insert';\n  /** This key will contain the document being inserted */\n  fullDocument: TSchema;\n  /** Namespace the insert event occurred on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#update-event\n */\nexport interface ChangeStreamUpdateDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'update';\n  /**\n   * This is only set if `fullDocument` is set to `'updateLookup'`\n   * Contains the point-in-time post-image of the modified document if the\n   * post-image is available and either 'required' or 'whenAvailable' was\n   * specified for the 'fullDocument' option when creating the change stream.\n   */\n  fullDocument?: TSchema;\n  /** Contains a description of updated and removed fields in this operation */\n  updateDescription: UpdateDescription<TSchema>;\n  /** Namespace the update event occurred on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#replace-event\n */\nexport interface ChangeStreamReplaceDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema> {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'replace';\n  /** The fullDocument of a replace event represents the document after the insert of the replacement document */\n  fullDocument: TSchema;\n  /** Namespace the replace event occurred on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#delete-event\n */\nexport interface ChangeStreamDeleteDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'delete';\n  /** Namespace the delete event occurred on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#drop-event\n */\nexport interface ChangeStreamDropDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'drop';\n  /** Namespace the drop event occurred on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#rename-event\n */\nexport interface ChangeStreamRenameDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'rename';\n  /** The new name for the `ns.coll` collection */\n  to: { db: string; coll: string };\n  /** The \"from\" namespace that the rename occurred on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#dropdatabase-event\n */\nexport interface ChangeStreamDropDatabaseDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'dropDatabase';\n  /** The database dropped */\n  ns: { db: string };\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#invalidate-event\n */\nexport interface ChangeStreamInvalidateDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'invalidate';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCreateIndexDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'createIndexes';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamDropIndexDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'dropIndexes';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCollModDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'modify';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCreateDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'create';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamShardCollectionDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'shardCollection';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamReshardCollectionDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'reshardCollection';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamRefineCollectionShardKeyDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'refineCollectionShardKey';\n}\n\n/** @public */\nexport type ChangeStreamDocument<TSchema extends Document = Document> =\n  | ChangeStreamInsertDocument<TSchema>\n  | ChangeStreamUpdateDocument<TSchema>\n  | ChangeStreamReplaceDocument<TSchema>\n  | ChangeStreamDeleteDocument<TSchema>\n  | ChangeStreamDropDocument\n  | ChangeStreamRenameDocument\n  | ChangeStreamDropDatabaseDocument\n  | ChangeStreamInvalidateDocument\n  | ChangeStreamCreateIndexDocument\n  | ChangeStreamCreateDocument\n  | ChangeStreamCollModDocument\n  | ChangeStreamDropIndexDocument\n  | ChangeStreamShardCollectionDocument\n  | ChangeStreamReshardCollectionDocument\n  | ChangeStreamRefineCollectionShardKeyDocument;\n\n/** @public */\nexport interface UpdateDescription<TSchema extends Document = Document> {\n  /**\n   * A document containing key:value pairs of names of the fields that were\n   * changed, and the new value for those fields.\n   */\n  updatedFields?: Partial<TSchema>;\n\n  /**\n   * An array of field names that were removed from the document.\n   */\n  removedFields?: string[];\n\n  /**\n   * An array of documents which record array truncations performed with pipeline-based updates using one or more of the following stages:\n   * - $addFields\n   * - $set\n   * - $replaceRoot\n   * - $replaceWith\n   */\n  truncatedArrays?: Array<{\n    /** The name of the truncated field. */\n    field: string;\n    /** The number of elements in the truncated array. */\n    newSize: number;\n  }>;\n\n  /**\n   * A document containing additional information about any ambiguous update paths from the update event.  The document\n   * maps the full ambiguous update path to an array containing the actual resolved components of the path.  For example,\n   * given a document shaped like `{ a: { '0': 0 } }`, and an update of `{ $inc: 'a.0' }`, disambiguated paths would look like\n   * the following:\n   *\n   * ```\n   *   {\n   *     'a.0': ['a', '0']\n   *   }\n   * ```\n   *\n   * This field is only present when there are ambiguous paths that are updated as a part of the update event and `showExpandedEvents`\n   * is enabled for the change stream.\n   * @sinceServerVersion 6.1.0\n   */\n  disambiguatedPaths?: Document;\n}\n\n/** @public */\nexport type ChangeStreamEvents<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> = {\n  resumeTokenChanged(token: ResumeToken): void;\n  init(response: any): void;\n  more(response?: any): void;\n  response(): void;\n  end(): void;\n  error(error: Error): void;\n  change(change: TChange): void;\n} & AbstractCursorEvents;\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nexport class ChangeStream<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> extends TypedEventEmitter<ChangeStreamEvents<TSchema, TChange>> {\n  pipeline: Document[];\n  /**\n   * @remarks WriteConcern can still be present on the options because\n   * we inherit options from the client/db/collection.  The\n   * key must be present on the options in order to delete it.\n   * This allows typescript to delete the key but will\n   * not allow a writeConcern to be assigned as a property on options.\n   */\n  options: ChangeStreamOptions & { writeConcern?: never };\n  parent: MongoClient | Db | Collection;\n  namespace: MongoDBNamespace;\n  type: symbol;\n  /** @internal */\n  cursor: ChangeStreamCursor<TSchema, TChange>;\n  streamOptions?: CursorStreamOptions;\n  /** @internal */\n  [kCursorStream]?: Readable & AsyncIterable<TChange>;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kMode]: false | 'iterator' | 'emitter';\n\n  /** @event */\n  static readonly RESPONSE = RESPONSE;\n  /** @event */\n  static readonly MORE = MORE;\n  /** @event */\n  static readonly INIT = INIT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   * @event\n   */\n  static readonly CHANGE = CHANGE;\n  /** @event */\n  static readonly END = END;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   * @event\n   */\n  static readonly RESUME_TOKEN_CHANGED = RESUME_TOKEN_CHANGED;\n\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(\n    parent: OperationParent,\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ) {\n    super();\n\n    this.pipeline = pipeline;\n    this.options = { ...options };\n    delete this.options.writeConcern;\n\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new MongoChangeStreamError(\n        'Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient'\n      );\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    // Create contained Change Stream cursor\n    this.cursor = this._createChangeStreamCursor(options);\n\n    this[kClosed] = false;\n    this[kMode] = false;\n\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this[kCursorStream]?.removeAllListeners('data');\n      }\n    });\n  }\n\n  /** @internal */\n  get cursorStream(): (Readable & AsyncIterable<TChange>) | undefined {\n    return this[kCursorStream];\n  }\n\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken(): ResumeToken {\n    return this.cursor?.resumeToken;\n  }\n\n  /** Check if there is any document still available in the Change Stream */\n  async hasNext(): Promise<boolean> {\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      try {\n        const hasNext = await this.cursor.hasNext();\n        return hasNext;\n      } catch (error) {\n        try {\n          await this._processErrorIteratorMode(error);\n        } catch (error) {\n          try {\n            await this.close();\n          } catch {\n            // We are not concerned with errors from close()\n          }\n          throw error;\n        }\n      }\n    }\n  }\n\n  /** Get the next available document from the Change Stream. */\n  async next(): Promise<TChange> {\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      try {\n        const change = await this.cursor.next();\n        const processedChange = this._processChange(change ?? null);\n        return processedChange;\n      } catch (error) {\n        try {\n          await this._processErrorIteratorMode(error);\n        } catch (error) {\n          try {\n            await this.close();\n          } catch {\n            // We are not concerned with errors from close()\n          }\n          throw error;\n        }\n      }\n    }\n  }\n\n  /**\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n   */\n  async tryNext(): Promise<TChange | null> {\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      try {\n        const change = await this.cursor.tryNext();\n        return change ?? null;\n      } catch (error) {\n        try {\n          await this._processErrorIteratorMode(error);\n        } catch (error) {\n          try {\n            await this.close();\n          } catch {\n            // We are not concerned with errors from close()\n          }\n          throw error;\n        }\n      }\n    }\n  }\n\n  async *[Symbol.asyncIterator](): AsyncGenerator<TChange, void, void> {\n    if (this.closed) {\n      return;\n    }\n\n    try {\n      // Change streams run indefinitely as long as errors are resumable\n      // So the only loop breaking condition is if `next()` throws\n      while (true) {\n        yield await this.next();\n      }\n    } finally {\n      try {\n        await this.close();\n      } catch {\n        // we're not concerned with errors from close()\n      }\n    }\n  }\n\n  /** Is the cursor closed */\n  get closed(): boolean {\n    return this[kClosed] || this.cursor.closed;\n  }\n\n  /** Close the Change Stream */\n  async close(): Promise<void> {\n    this[kClosed] = true;\n\n    const cursor = this.cursor;\n    try {\n      await cursor.close();\n    } finally {\n      this._endStream();\n    }\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   *\n   * NOTE: When using a Stream to process change stream events, the stream will\n   * NOT automatically resume in the case a resumable error is encountered.\n   *\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n   */\n  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TChange> {\n    if (this.closed) {\n      throw new MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n\n  /** @internal */\n  private _setIsEmitter(): void {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an EventEmitter after being used as an iterator'\n      );\n    }\n    this[kMode] = 'emitter';\n  }\n\n  /** @internal */\n  private _setIsIterator(): void {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an iterator after being used as an EventEmitter'\n      );\n    }\n    this[kMode] = 'iterator';\n  }\n\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n  private _createChangeStreamCursor(\n    options: ChangeStreamOptions | ChangeStreamCursorOptions\n  ): ChangeStreamCursor<TSchema, TChange> {\n    const changeStreamStageOptions = filterOptions(options, CHANGE_STREAM_OPTIONS);\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n\n    const client: MongoClient | null =\n      this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n        ? (this.parent as MongoClient)\n        : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n        ? (this.parent as Db).client\n        : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n        ? (this.parent as Collection).client\n        : null;\n\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new MongoRuntimeError(\n        `Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`\n      );\n    }\n\n    const changeStreamCursor = new ChangeStreamCursor<TSchema, TChange>(\n      client,\n      this.namespace,\n      pipeline,\n      options\n    );\n\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n\n    return changeStreamCursor;\n  }\n\n  /** @internal */\n  private _closeEmitterModeWithError(error: AnyError): void {\n    this.emit(ChangeStream.ERROR, error);\n\n    this.close().catch(() => null);\n  }\n\n  /** @internal */\n  private _streamEvents(cursor: ChangeStreamCursor<TSchema, TChange>): void {\n    this._setIsEmitter();\n    const stream = this[kCursorStream] ?? cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => {\n      try {\n        const processedChange = this._processChange(change);\n        this.emit(ChangeStream.CHANGE, processedChange);\n      } catch (error) {\n        this.emit(ChangeStream.ERROR, error);\n      }\n    });\n    stream.on('error', error => this._processErrorStreamMode(error));\n  }\n\n  /** @internal */\n  private _endStream(): void {\n    const cursorStream = this[kCursorStream];\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n\n    this[kCursorStream] = undefined;\n  }\n\n  /** @internal */\n  private _processChange(change: TChange | null): TChange {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    if (change && !change._id) {\n      throw new MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n    }\n\n    // cache the resume token\n    this.cursor.cacheResumeToken(change._id);\n\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    this.options.startAtOperationTime = undefined;\n\n    return change;\n  }\n\n  /** @internal */\n  private _processErrorStreamMode(changeStreamError: AnyError) {\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) return;\n\n    if (isResumableError(changeStreamError, this.cursor.maxWireVersion)) {\n      this._endStream();\n      this.cursor.close().catch(() => null);\n\n      const topology = getTopology(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n      });\n    } else {\n      this._closeEmitterModeWithError(changeStreamError);\n    }\n  }\n\n  /** @internal */\n  private async _processErrorIteratorMode(changeStreamError: AnyError) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    if (!isResumableError(changeStreamError, this.cursor.maxWireVersion)) {\n      try {\n        await this.close();\n      } catch {\n        // ignore errors from close\n      }\n      throw changeStreamError;\n    }\n\n    await this.cursor.close().catch(() => null);\n    const topology = getTopology(this.parent);\n    try {\n      await topology.selectServerAsync(this.cursor.readPreference, {});\n      this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n    } catch {\n      // if the topology can't reconnect, close the stream\n      await this.close();\n      throw changeStreamError;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}