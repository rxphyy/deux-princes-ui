{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst util_1 = require(\"util\");\nconst zlib = require(\"zlib\");\nconst constants_1 = require(\"../../constants\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\n/** @public */\nexports.Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n});\nexports.uncompressibleCommands = new Set([constants_1.LEGACY_HELLO_COMMAND, 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nlet zstd;\nlet Snappy = null;\nfunction loadSnappy() {\n  if (Snappy == null) {\n    const snappyImport = (0, deps_1.getSnappy)();\n    if ('kModuleError' in snappyImport) {\n      throw snappyImport.kModuleError;\n    }\n    Snappy = snappyImport;\n  }\n  return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n  const zlibOptions = {};\n  switch (options.agreedCompressor) {\n    case 'snappy':\n      {\n        Snappy ??= loadSnappy();\n        return Snappy.compress(dataToBeCompressed);\n      }\n    case 'zstd':\n      {\n        loadZstd();\n        if ('kModuleError' in zstd) {\n          throw zstd['kModuleError'];\n        }\n        return zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n      }\n    case 'zlib':\n      {\n        if (options.zlibCompressionLevel) {\n          zlibOptions.level = options.zlibCompressionLevel;\n        }\n        return zlibDeflate(dataToBeCompressed, zlibOptions);\n      }\n    default:\n      {\n        throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n      }\n  }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n  if (compressorID !== exports.Compressor.snappy && compressorID !== exports.Compressor.zstd && compressorID !== exports.Compressor.zlib && compressorID !== exports.Compressor.none) {\n    throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n  }\n  switch (compressorID) {\n    case exports.Compressor.snappy:\n      {\n        Snappy ??= loadSnappy();\n        return Snappy.uncompress(compressedData, {\n          asBuffer: true\n        });\n      }\n    case exports.Compressor.zstd:\n      {\n        loadZstd();\n        if ('kModuleError' in zstd) {\n          throw zstd['kModuleError'];\n        }\n        return zstd.decompress(compressedData);\n      }\n    case exports.Compressor.zlib:\n      {\n        return zlibInflate(compressedData);\n      }\n    default:\n      {\n        return compressedData;\n      }\n  }\n}\nexports.decompress = decompress;\n/**\n * Load ZStandard if it is not already set.\n */\nfunction loadZstd() {\n  if (!zstd) {\n    zstd = (0, deps_1.getZstdLibrary)();\n  }\n}","map":{"version":3,"names":["util_1","require","zlib","constants_1","deps_1","error_1","exports","Compressor","Object","freeze","none","snappy","zstd","uncompressibleCommands","Set","LEGACY_HELLO_COMMAND","ZSTD_COMPRESSION_LEVEL","zlibInflate","promisify","inflate","bind","zlibDeflate","deflate","Snappy","loadSnappy","snappyImport","getSnappy","kModuleError","compress","options","dataToBeCompressed","zlibOptions","agreedCompressor","loadZstd","zlibCompressionLevel","level","MongoInvalidArgumentError","decompress","compressorID","compressedData","MongoDecompressionError","uncompress","asBuffer","getZstdLibrary"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cmap\\wire_protocol\\compression.ts"],"sourcesContent":["import { promisify } from 'util';\nimport * as zlib from 'zlib';\n\nimport { LEGACY_HELLO_COMMAND } from '../../constants';\nimport { getSnappy, getZstdLibrary, type SnappyLib, type ZStandard } from '../../deps';\nimport { MongoDecompressionError, MongoInvalidArgumentError } from '../../error';\n\n/** @public */\nexport const Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n} as const);\n\n/** @public */\nexport type Compressor = (typeof Compressor)[CompressorName];\n\n/** @public */\nexport type CompressorName = keyof typeof Compressor;\n\nexport const uncompressibleCommands = new Set([\n  LEGACY_HELLO_COMMAND,\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'authenticate',\n  'createUser',\n  'updateUser',\n  'copydbSaslStart',\n  'copydbgetnonce',\n  'copydb'\n]);\n\nconst ZSTD_COMPRESSION_LEVEL = 3;\n\nconst zlibInflate = promisify(zlib.inflate.bind(zlib));\nconst zlibDeflate = promisify(zlib.deflate.bind(zlib));\n\nlet zstd: typeof ZStandard;\nlet Snappy: SnappyLib | null = null;\nfunction loadSnappy() {\n  if (Snappy == null) {\n    const snappyImport = getSnappy();\n    if ('kModuleError' in snappyImport) {\n      throw snappyImport.kModuleError;\n    }\n    Snappy = snappyImport;\n  }\n  return Snappy;\n}\n\n// Facilitate compressing a message using an agreed compressor\nexport async function compress(\n  options: { zlibCompressionLevel: number; agreedCompressor: CompressorName },\n  dataToBeCompressed: Buffer\n): Promise<Buffer> {\n  const zlibOptions = {} as zlib.ZlibOptions;\n  switch (options.agreedCompressor) {\n    case 'snappy': {\n      Snappy ??= loadSnappy();\n      return Snappy.compress(dataToBeCompressed);\n    }\n    case 'zstd': {\n      loadZstd();\n      if ('kModuleError' in zstd) {\n        throw zstd['kModuleError'];\n      }\n      return zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n    }\n    case 'zlib': {\n      if (options.zlibCompressionLevel) {\n        zlibOptions.level = options.zlibCompressionLevel;\n      }\n      return zlibDeflate(dataToBeCompressed, zlibOptions);\n    }\n    default: {\n      throw new MongoInvalidArgumentError(\n        `Unknown compressor ${options.agreedCompressor} failed to compress`\n      );\n    }\n  }\n}\n\n// Decompress a message using the given compressor\nexport async function decompress(compressorID: number, compressedData: Buffer): Promise<Buffer> {\n  if (\n    compressorID !== Compressor.snappy &&\n    compressorID !== Compressor.zstd &&\n    compressorID !== Compressor.zlib &&\n    compressorID !== Compressor.none\n  ) {\n    throw new MongoDecompressionError(\n      `Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`\n    );\n  }\n\n  switch (compressorID) {\n    case Compressor.snappy: {\n      Snappy ??= loadSnappy();\n      return Snappy.uncompress(compressedData, { asBuffer: true });\n    }\n    case Compressor.zstd: {\n      loadZstd();\n      if ('kModuleError' in zstd) {\n        throw zstd['kModuleError'];\n      }\n      return zstd.decompress(compressedData);\n    }\n    case Compressor.zlib: {\n      return zlibInflate(compressedData);\n    }\n    default: {\n      return compressedData;\n    }\n  }\n}\n\n/**\n * Load ZStandard if it is not already set.\n */\nfunction loadZstd() {\n  if (!zstd) {\n    zstd = getZstdLibrary();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}