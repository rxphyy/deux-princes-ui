{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Explain = exports.ExplainVerbosity = void 0;\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ExplainVerbosity = Object.freeze({\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\nclass Explain {\n  constructor(verbosity) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity ? exports.ExplainVerbosity.allPlansExecution : exports.ExplainVerbosity.queryPlanner;\n    } else {\n      this.verbosity = verbosity;\n    }\n  }\n  static fromOptions(options) {\n    if (options?.explain == null) return;\n    const explain = options.explain;\n    if (typeof explain === 'boolean' || typeof explain === 'string') {\n      return new Explain(explain);\n    }\n    throw new error_1.MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n  }\n}\nexports.Explain = Explain;","map":{"version":3,"names":["error_1","require","exports","ExplainVerbosity","Object","freeze","queryPlanner","queryPlannerExtended","executionStats","allPlansExecution","Explain","constructor","verbosity","fromOptions","options","explain","MongoInvalidArgumentError"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\explain.ts"],"sourcesContent":["import { MongoInvalidArgumentError } from './error';\n\n/** @public */\nexport const ExplainVerbosity = Object.freeze({\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n} as const);\n\n/** @public */\nexport type ExplainVerbosity = string;\n\n/**\n * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n * and false as \"queryPlanner\". Prior to server version 3.6, aggregate()\n * ignores the verbosity parameter and executes in \"queryPlanner\".\n * @public\n */\nexport type ExplainVerbosityLike = ExplainVerbosity | boolean;\n\n/** @public */\nexport interface ExplainOptions {\n  /** Specifies the verbosity mode for the explain output. */\n  explain?: ExplainVerbosityLike;\n}\n\n/** @internal */\nexport class Explain {\n  verbosity: ExplainVerbosity;\n\n  constructor(verbosity: ExplainVerbosityLike) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity\n        ? ExplainVerbosity.allPlansExecution\n        : ExplainVerbosity.queryPlanner;\n    } else {\n      this.verbosity = verbosity;\n    }\n  }\n\n  static fromOptions(options?: ExplainOptions): Explain | undefined {\n    if (options?.explain == null) return;\n\n    const explain = options.explain;\n    if (typeof explain === 'boolean' || typeof explain === 'string') {\n      return new Explain(explain);\n    }\n\n    throw new MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAEA;AACaC,OAAA,CAAAC,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC;EAC5CC,YAAY,EAAE,cAAc;EAC5BC,oBAAoB,EAAE,sBAAsB;EAC5CC,cAAc,EAAE,gBAAgB;EAChCC,iBAAiB,EAAE;CACX,CAAC;AAmBX;AACA,MAAaC,OAAO;EAGlBC,YAAYC,SAA+B;IACzC,IAAI,OAAOA,SAAS,KAAK,SAAS,EAAE;MAClC,IAAI,CAACA,SAAS,GAAGA,SAAS,GACtBV,OAAA,CAAAC,gBAAgB,CAACM,iBAAiB,GAClCP,OAAA,CAAAC,gBAAgB,CAACG,YAAY;KAClC,MAAM;MACL,IAAI,CAACM,SAAS,GAAGA,SAAS;;EAE9B;EAEA,OAAOC,WAAWA,CAACC,OAAwB;IACzC,IAAIA,OAAO,EAAEC,OAAO,IAAI,IAAI,EAAE;IAE9B,MAAMA,OAAO,GAAGD,OAAO,CAACC,OAAO;IAC/B,IAAI,OAAOA,OAAO,KAAK,SAAS,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC/D,OAAO,IAAIL,OAAO,CAACK,OAAO,CAAC;;IAG7B,MAAM,IAAIf,OAAA,CAAAgB,yBAAyB,CAAC,+CAA+C,CAAC;EACtF;;AAtBFd,OAAA,CAAAQ,OAAA,GAAAA,OAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}