{"ast":null,"code":"\"use strict\";\n\nconst usm = require(\"./url-state-machine\");\nconst urlencoded = require(\"./urlencoded\");\nconst URLSearchParams = require(\"./URLSearchParams\");\nexports.implementation = class URLImpl {\n  constructor(globalObject, constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === null) {\n        throw new TypeError(`Invalid base URL: ${base}`);\n      }\n    }\n    const parsedURL = usm.basicURLParse(url, {\n      baseURL: parsedBase\n    });\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${url}`);\n    }\n    const query = parsedURL.query !== null ? parsedURL.query : \"\";\n    this._url = parsedURL;\n\n    // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n    this._query = URLSearchParams.createImpl(globalObject, [query], {\n      doNotStripQMark: true\n    });\n    this._query._url = this;\n  }\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${v}`);\n    }\n    this._url = parsedURL;\n    this._query._list.splice(0);\n    const {\n      query\n    } = parsedURL;\n    if (query !== null) {\n      this._query._list = urlencoded.parseUrlencodedString(query);\n    }\n  }\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n  get protocol() {\n    return `${this._url.scheme}:`;\n  }\n  set protocol(v) {\n    usm.basicURLParse(`${v}:`, {\n      url: this._url,\n      stateOverride: \"scheme start\"\n    });\n  }\n  get username() {\n    return this._url.username;\n  }\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    usm.setTheUsername(this._url, v);\n  }\n  get password() {\n    return this._url.password;\n  }\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    usm.setThePassword(this._url, v);\n  }\n  get host() {\n    const url = this._url;\n    if (url.host === null) {\n      return \"\";\n    }\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n    return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;\n  }\n  set host(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"host\"\n    });\n  }\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n    return usm.serializeHost(this._url.host);\n  }\n  set hostname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"hostname\"\n    });\n  }\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n    return usm.serializeInteger(this._url.port);\n  }\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"port\"\n      });\n    }\n  }\n  get pathname() {\n    return usm.serializePath(this._url);\n  }\n  set pathname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n    this._url.path = [];\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"path start\"\n    });\n  }\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n    return `?${this._url.query}`;\n  }\n  set search(v) {\n    const url = this._url;\n    if (v === \"\") {\n      url.query = null;\n      this._query._list = [];\n      return;\n    }\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, {\n      url,\n      stateOverride: \"query\"\n    });\n    this._query._list = urlencoded.parseUrlencodedString(input);\n  }\n  get searchParams() {\n    return this._query;\n  }\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n    return `#${this._url.fragment}`;\n  }\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, {\n      url: this._url,\n      stateOverride: \"fragment\"\n    });\n  }\n  toJSON() {\n    return this.href;\n  }\n};","map":{"version":3,"names":["usm","require","urlencoded","URLSearchParams","exports","implementation","URLImpl","constructor","globalObject","constructorArgs","url","base","parsedBase","undefined","basicURLParse","TypeError","parsedURL","baseURL","query","_url","_query","createImpl","doNotStripQMark","href","serializeURL","v","_list","splice","parseUrlencodedString","origin","serializeURLOrigin","protocol","scheme","stateOverride","username","cannotHaveAUsernamePasswordPort","setTheUsername","password","setThePassword","host","port","serializeHost","serializeInteger","hasAnOpaquePath","hostname","pathname","serializePath","path","search","input","substring","searchParams","hash","fragment","toJSON"],"sources":["C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/mongodb-connection-string-url/node_modules/whatwg-url/lib/URL-impl.js"],"sourcesContent":["\"use strict\";\nconst usm = require(\"./url-state-machine\");\nconst urlencoded = require(\"./urlencoded\");\nconst URLSearchParams = require(\"./URLSearchParams\");\n\nexports.implementation = class URLImpl {\n  constructor(globalObject, constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === null) {\n        throw new TypeError(`Invalid base URL: ${base}`);\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${url}`);\n    }\n\n    const query = parsedURL.query !== null ? parsedURL.query : \"\";\n\n    this._url = parsedURL;\n\n    // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n    this._query = URLSearchParams.createImpl(globalObject, [query], { doNotStripQMark: true });\n    this._query._url = this;\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${v}`);\n    }\n\n    this._url = parsedURL;\n\n    this._query._list.splice(0);\n    const { query } = parsedURL;\n    if (query !== null) {\n      this._query._list = urlencoded.parseUrlencodedString(query);\n    }\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return `${this._url.scheme}:`;\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(`${v}:`, { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;\n  }\n\n  set host(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    return usm.serializePath(this._url);\n  }\n\n  set pathname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return `?${this._url.query}`;\n  }\n\n  set search(v) {\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      this._query._list = [];\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n    this._query._list = urlencoded.parseUrlencodedString(input);\n  }\n\n  get searchParams() {\n    return this._query;\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return `#${this._url.fragment}`;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}