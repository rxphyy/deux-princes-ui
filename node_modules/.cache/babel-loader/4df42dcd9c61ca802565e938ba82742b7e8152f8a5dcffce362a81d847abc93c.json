{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nvar error_1 = require(\"../../error\");\nvar gssapi_1 = require(\"./gssapi\");\nvar providers_1 = require(\"./providers\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n  if (hello) {\n    // If hello contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(hello.saslSupportedMechs)) {\n      return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (hello.maxWireVersion >= 3) {\n      return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  }\n  // Default for wireprotocol < 3\n  return providers_1.AuthMechanism.MONGODB_CR;\n}\nvar ALLOWED_PROVIDER_NAMES = ['aws', 'azure'];\nvar ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n/** @internal */\nexports.DEFAULT_ALLOWED_HOSTS = ['*.mongodb.net', '*.mongodb-dev.net', '*.mongodbgov.net', 'localhost', '127.0.0.1', '::1'];\n/** Error for when the token audience is missing in the environment. */\nvar TOKEN_AUDIENCE_MISSING_ERROR = 'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nvar MongoCredentials = /*#__PURE__*/function () {\n  function MongoCredentials(options) {\n    var _options$username;\n    _classCallCheck(this, MongoCredentials);\n    this.username = (_options$username = options.username) !== null && _options$username !== void 0 ? _options$username : '';\n    this.password = options.password;\n    this.source = options.source;\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n    this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN != null) {\n        this.mechanismProperties = _objectSpread(_objectSpread({}, this.mechanismProperties), {}, {\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        });\n      }\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n      this.mechanismProperties = _objectSpread(_objectSpread({}, this.mechanismProperties), {}, {\n        ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n      });\n    }\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /** Determines if two MongoCredentials objects are equivalent */\n  _createClass(MongoCredentials, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */\n  }, {\n    key: \"resolveAuthMechanism\",\n    value: function resolveAuthMechanism(hello) {\n      // If the mechanism is not \"default\", then it does not need to be resolved\n      if (this.mechanism.match(/DEFAULT/i)) {\n        return new MongoCredentials({\n          username: this.username,\n          password: this.password,\n          source: this.source,\n          mechanism: getDefaultAuthMechanism(hello),\n          mechanismProperties: this.mechanismProperties\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var _this$mechanismProper;\n      if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === providers_1.AuthMechanism.MONGODB_CR || this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n        throw new error_1.MongoMissingCredentialsError(\"Username required for mechanism '\".concat(this.mechanism, \"'\"));\n      }\n      if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n        if (this.username && this.mechanismProperties.PROVIDER_NAME) {\n          throw new error_1.MongoInvalidArgumentError(\"username and PROVIDER_NAME may not be used together for mechanism '\".concat(this.mechanism, \"'.\"));\n        }\n        if (this.mechanismProperties.PROVIDER_NAME === 'azure' && !this.mechanismProperties.TOKEN_AUDIENCE) {\n          throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n        }\n        if (this.mechanismProperties.PROVIDER_NAME && !ALLOWED_PROVIDER_NAMES.includes(this.mechanismProperties.PROVIDER_NAME)) {\n          throw new error_1.MongoInvalidArgumentError(\"Currently only a PROVIDER_NAME in \".concat(ALLOWED_PROVIDER_NAMES.join(','), \" is supported for mechanism '\").concat(this.mechanism, \"'.\"));\n        }\n        if (this.mechanismProperties.REFRESH_TOKEN_CALLBACK && !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n          throw new error_1.MongoInvalidArgumentError(\"A REQUEST_TOKEN_CALLBACK must be provided when using a REFRESH_TOKEN_CALLBACK for mechanism '\".concat(this.mechanism, \"'\"));\n        }\n        if (!this.mechanismProperties.PROVIDER_NAME && !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n          throw new error_1.MongoInvalidArgumentError(\"Either a PROVIDER_NAME or a REQUEST_TOKEN_CALLBACK must be specified for mechanism '\".concat(this.mechanism, \"'.\"));\n        }\n        if (this.mechanismProperties.ALLOWED_HOSTS) {\n          var hosts = this.mechanismProperties.ALLOWED_HOSTS;\n          if (!Array.isArray(hosts)) {\n            throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n          }\n          var _iterator = _createForOfIteratorHelper(hosts),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var host = _step.value;\n              if (typeof host !== 'string') {\n                throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }\n      if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n        if (this.source != null && this.source !== '$external') {\n          // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n          throw new error_1.MongoAPIError(\"Invalid source '\".concat(this.source, \"' for mechanism '\").concat(this.mechanism, \"' specified.\"));\n        }\n      }\n      if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n      }\n      if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n        if (this.password === '') {\n          Reflect.set(this, 'password', undefined);\n          return;\n        }\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new error_1.MongoAPIError(\"Password not allowed for mechanism MONGODB-X509\");\n      }\n      var canonicalization = (_this$mechanismProper = this.mechanismProperties.CANONICALIZE_HOST_NAME) !== null && _this$mechanismProper !== void 0 ? _this$mechanismProper : false;\n      if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n        throw new error_1.MongoAPIError(\"Invalid CANONICALIZE_HOST_NAME value: \".concat(canonicalization));\n      }\n    }\n  }], [{\n    key: \"merge\",\n    value: function merge(creds, options) {\n      var _ref, _options$username2, _ref2, _options$password, _ref3, _options$mechanism, _ref4, _options$mechanismPro, _ref5, _ref6, _options$source;\n      return new MongoCredentials({\n        username: (_ref = (_options$username2 = options.username) !== null && _options$username2 !== void 0 ? _options$username2 : creds === null || creds === void 0 ? void 0 : creds.username) !== null && _ref !== void 0 ? _ref : '',\n        password: (_ref2 = (_options$password = options.password) !== null && _options$password !== void 0 ? _options$password : creds === null || creds === void 0 ? void 0 : creds.password) !== null && _ref2 !== void 0 ? _ref2 : '',\n        mechanism: (_ref3 = (_options$mechanism = options.mechanism) !== null && _options$mechanism !== void 0 ? _options$mechanism : creds === null || creds === void 0 ? void 0 : creds.mechanism) !== null && _ref3 !== void 0 ? _ref3 : providers_1.AuthMechanism.MONGODB_DEFAULT,\n        mechanismProperties: (_ref4 = (_options$mechanismPro = options.mechanismProperties) !== null && _options$mechanismPro !== void 0 ? _options$mechanismPro : creds === null || creds === void 0 ? void 0 : creds.mechanismProperties) !== null && _ref4 !== void 0 ? _ref4 : {},\n        source: (_ref5 = (_ref6 = (_options$source = options.source) !== null && _options$source !== void 0 ? _options$source : options.db) !== null && _ref6 !== void 0 ? _ref6 : creds === null || creds === void 0 ? void 0 : creds.source) !== null && _ref5 !== void 0 ? _ref5 : 'admin'\n      });\n    }\n  }]);\n  return MongoCredentials;\n}();\nexports.MongoCredentials = MongoCredentials;","map":{"version":3,"names":["error_1","require","gssapi_1","providers_1","getDefaultAuthMechanism","hello","Array","isArray","saslSupportedMechs","includes","AuthMechanism","MONGODB_SCRAM_SHA256","MONGODB_SCRAM_SHA1","maxWireVersion","MONGODB_CR","ALLOWED_PROVIDER_NAMES","ALLOWED_HOSTS_ERROR","exports","DEFAULT_ALLOWED_HOSTS","TOKEN_AUDIENCE_MISSING_ERROR","MongoCredentials","options","_options$username","_classCallCheck","username","password","source","db","mechanism","MONGODB_DEFAULT","mechanismProperties","match","process","env","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_objectSpread","MONGODB_OIDC","ALLOWED_HOSTS","Object","freeze","_createClass","key","value","equals","other","resolveAuthMechanism","validate","_this$mechanismProper","MONGODB_GSSAPI","MONGODB_PLAIN","MongoMissingCredentialsError","concat","PROVIDER_NAME","MongoInvalidArgumentError","TOKEN_AUDIENCE","MongoAzureError","join","REFRESH_TOKEN_CALLBACK","REQUEST_TOKEN_CALLBACK","hosts","_iterator","_createForOfIteratorHelper","_step","s","n","done","host","err","e","f","AUTH_MECHS_AUTH_SRC_EXTERNAL","has","MongoAPIError","MONGODB_X509","Reflect","set","undefined","canonicalization","CANONICALIZE_HOST_NAME","values","GSSAPICanonicalizationValue","merge","creds","_ref","_options$username2","_ref2","_options$password","_ref3","_options$mechanism","_ref4","_options$mechanismPro","_ref5","_ref6","_options$source"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cmap\\auth\\mongo_credentials.ts"],"sourcesContent":["// Resolves the default auth mechanism according to\n// Resolves the default auth mechanism according to\nimport type { Document } from '../../bson';\nimport {\n  MongoAPIError,\n  MongoAzureError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError\n} from '../../error';\nimport { GSSAPICanonicalizationValue } from './gssapi';\nimport type { OIDCRefreshFunction, OIDCRequestFunction } from './mongodb_oidc';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './providers';\n\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello?: Document): AuthMechanism {\n  if (hello) {\n    // If hello contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(hello.saslSupportedMechs)) {\n      return hello.saslSupportedMechs.includes(AuthMechanism.MONGODB_SCRAM_SHA256)\n        ? AuthMechanism.MONGODB_SCRAM_SHA256\n        : AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (hello.maxWireVersion >= 3) {\n      return AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  }\n\n  // Default for wireprotocol < 3\n  return AuthMechanism.MONGODB_CR;\n}\n\nconst ALLOWED_PROVIDER_NAMES: AuthMechanismProperties['PROVIDER_NAME'][] = ['aws', 'azure'];\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n\n/** @internal */\nexport const DEFAULT_ALLOWED_HOSTS = [\n  '*.mongodb.net',\n  '*.mongodb-dev.net',\n  '*.mongodbgov.net',\n  'localhost',\n  '127.0.0.1',\n  '::1'\n];\n\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_AUDIENCE_MISSING_ERROR =\n  'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n\n/** @public */\nexport interface AuthMechanismProperties extends Document {\n  SERVICE_HOST?: string;\n  SERVICE_NAME?: string;\n  SERVICE_REALM?: string;\n  CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue;\n  AWS_SESSION_TOKEN?: string;\n  /** @experimental */\n  REQUEST_TOKEN_CALLBACK?: OIDCRequestFunction;\n  /** @experimental */\n  REFRESH_TOKEN_CALLBACK?: OIDCRefreshFunction;\n  /** @experimental */\n  PROVIDER_NAME?: 'aws' | 'azure';\n  /** @experimental */\n  ALLOWED_HOSTS?: string[];\n  /** @experimental */\n  TOKEN_AUDIENCE?: string;\n}\n\n/** @public */\nexport interface MongoCredentialsOptions {\n  username?: string;\n  password: string;\n  source: string;\n  db?: string;\n  mechanism?: AuthMechanism;\n  mechanismProperties: AuthMechanismProperties;\n}\n\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nexport class MongoCredentials {\n  /** The username used for authentication */\n  readonly username: string;\n  /** The password used for authentication */\n  readonly password: string;\n  /** The database that the user should authenticate against */\n  readonly source: string;\n  /** The method used to authenticate */\n  readonly mechanism: AuthMechanism;\n  /** Special properties used by some types of auth mechanisms */\n  readonly mechanismProperties: AuthMechanismProperties;\n\n  constructor(options: MongoCredentialsOptions) {\n    this.username = options.username ?? '';\n    this.password = options.password;\n    this.source = options.source;\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n    this.mechanism = options.mechanism || AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (\n        this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n        process.env.AWS_SESSION_TOKEN != null\n      ) {\n        this.mechanismProperties = {\n          ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n      this.mechanismProperties = {\n        ...this.mechanismProperties,\n        ALLOWED_HOSTS: DEFAULT_ALLOWED_HOSTS\n      };\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n\n  /** Determines if two MongoCredentials objects are equivalent */\n  equals(other: MongoCredentials): boolean {\n    return (\n      this.mechanism === other.mechanism &&\n      this.username === other.username &&\n      this.password === other.password &&\n      this.source === other.source\n    );\n  }\n\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param hello - A hello response from the server\n   */\n  resolveAuthMechanism(hello?: Document): MongoCredentials {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(hello),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n\n  validate(): void {\n    if (\n      (this.mechanism === AuthMechanism.MONGODB_GSSAPI ||\n        this.mechanism === AuthMechanism.MONGODB_CR ||\n        this.mechanism === AuthMechanism.MONGODB_PLAIN ||\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA1 ||\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA256) &&\n      !this.username\n    ) {\n      throw new MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_OIDC) {\n      if (this.username && this.mechanismProperties.PROVIDER_NAME) {\n        throw new MongoInvalidArgumentError(\n          `username and PROVIDER_NAME may not be used together for mechanism '${this.mechanism}'.`\n        );\n      }\n\n      if (\n        this.mechanismProperties.PROVIDER_NAME === 'azure' &&\n        !this.mechanismProperties.TOKEN_AUDIENCE\n      ) {\n        throw new MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n      }\n\n      if (\n        this.mechanismProperties.PROVIDER_NAME &&\n        !ALLOWED_PROVIDER_NAMES.includes(this.mechanismProperties.PROVIDER_NAME)\n      ) {\n        throw new MongoInvalidArgumentError(\n          `Currently only a PROVIDER_NAME in ${ALLOWED_PROVIDER_NAMES.join(\n            ','\n          )} is supported for mechanism '${this.mechanism}'.`\n        );\n      }\n\n      if (\n        this.mechanismProperties.REFRESH_TOKEN_CALLBACK &&\n        !this.mechanismProperties.REQUEST_TOKEN_CALLBACK\n      ) {\n        throw new MongoInvalidArgumentError(\n          `A REQUEST_TOKEN_CALLBACK must be provided when using a REFRESH_TOKEN_CALLBACK for mechanism '${this.mechanism}'`\n        );\n      }\n\n      if (\n        !this.mechanismProperties.PROVIDER_NAME &&\n        !this.mechanismProperties.REQUEST_TOKEN_CALLBACK\n      ) {\n        throw new MongoInvalidArgumentError(\n          `Either a PROVIDER_NAME or a REQUEST_TOKEN_CALLBACK must be specified for mechanism '${this.mechanism}'.`\n        );\n      }\n\n      if (this.mechanismProperties.ALLOWED_HOSTS) {\n        const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n        if (!Array.isArray(hosts)) {\n          throw new MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n        }\n        for (const host of hosts) {\n          if (typeof host !== 'string') {\n            throw new MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n          }\n        }\n      }\n    }\n\n    if (AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new MongoAPIError(\n          `Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`\n        );\n      }\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      }\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n\n    const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n    if (!Object.values(GSSAPICanonicalizationValue).includes(canonicalization)) {\n      throw new MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n    }\n  }\n\n  static merge(\n    creds: MongoCredentials | undefined,\n    options: Partial<MongoCredentialsOptions>\n  ): MongoCredentials {\n    return new MongoCredentials({\n      username: options.username ?? creds?.username ?? '',\n      password: options.password ?? creds?.password ?? '',\n      mechanism: options.mechanism ?? creds?.mechanism ?? AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n      source: options.source ?? options.db ?? creds?.source ?? 'admin'\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}