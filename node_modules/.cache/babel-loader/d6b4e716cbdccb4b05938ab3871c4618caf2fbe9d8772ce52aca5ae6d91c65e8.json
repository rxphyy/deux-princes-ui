{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nvar ServerDescriptionChangedEvent = /*#__PURE__*/_createClass( /** @internal */\nfunction ServerDescriptionChangedEvent(topologyId, address, previousDescription, newDescription) {\n  _classCallCheck(this, ServerDescriptionChangedEvent);\n  this.topologyId = topologyId;\n  this.address = address;\n  this.previousDescription = previousDescription;\n  this.newDescription = newDescription;\n});\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nvar ServerOpeningEvent = /*#__PURE__*/_createClass( /** @internal */\nfunction ServerOpeningEvent(topologyId, address) {\n  _classCallCheck(this, ServerOpeningEvent);\n  this.topologyId = topologyId;\n  this.address = address;\n});\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nvar ServerClosedEvent = /*#__PURE__*/_createClass( /** @internal */\nfunction ServerClosedEvent(topologyId, address) {\n  _classCallCheck(this, ServerClosedEvent);\n  this.topologyId = topologyId;\n  this.address = address;\n});\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nvar TopologyDescriptionChangedEvent = /*#__PURE__*/_createClass( /** @internal */\nfunction TopologyDescriptionChangedEvent(topologyId, previousDescription, newDescription) {\n  _classCallCheck(this, TopologyDescriptionChangedEvent);\n  this.topologyId = topologyId;\n  this.previousDescription = previousDescription;\n  this.newDescription = newDescription;\n});\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nvar TopologyOpeningEvent = /*#__PURE__*/_createClass( /** @internal */\nfunction TopologyOpeningEvent(topologyId) {\n  _classCallCheck(this, TopologyOpeningEvent);\n  this.topologyId = topologyId;\n});\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nvar TopologyClosedEvent = /*#__PURE__*/_createClass( /** @internal */\nfunction TopologyClosedEvent(topologyId) {\n  _classCallCheck(this, TopologyClosedEvent);\n  this.topologyId = topologyId;\n});\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nvar ServerHeartbeatStartedEvent = /*#__PURE__*/_createClass( /** @internal */\nfunction ServerHeartbeatStartedEvent(connectionId) {\n  _classCallCheck(this, ServerHeartbeatStartedEvent);\n  this.connectionId = connectionId;\n});\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nvar ServerHeartbeatSucceededEvent = /*#__PURE__*/_createClass( /** @internal */\nfunction ServerHeartbeatSucceededEvent(connectionId, duration, reply) {\n  _classCallCheck(this, ServerHeartbeatSucceededEvent);\n  this.connectionId = connectionId;\n  this.duration = duration;\n  this.reply = reply !== null && reply !== void 0 ? reply : {};\n});\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nvar ServerHeartbeatFailedEvent = /*#__PURE__*/_createClass( /** @internal */\nfunction ServerHeartbeatFailedEvent(connectionId, duration, failure) {\n  _classCallCheck(this, ServerHeartbeatFailedEvent);\n  this.connectionId = connectionId;\n  this.duration = duration;\n  this.failure = failure;\n});\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;","map":{"version":3,"names":["ServerDescriptionChangedEvent","_createClass","topologyId","address","previousDescription","newDescription","_classCallCheck","exports","ServerOpeningEvent","ServerClosedEvent","TopologyDescriptionChangedEvent","TopologyOpeningEvent","TopologyClosedEvent","ServerHeartbeatStartedEvent","connectionId","ServerHeartbeatSucceededEvent","duration","reply","ServerHeartbeatFailedEvent","failure"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\sdam\\events.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { ServerDescription } from './server_description';\nimport type { TopologyDescription } from './topology_description';\n\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nexport class ServerDescriptionChangedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n  /** The previous server description */\n  previousDescription: ServerDescription;\n  /** The new server description */\n  newDescription: ServerDescription;\n\n  /** @internal */\n  constructor(\n    topologyId: number,\n    address: string,\n    previousDescription: ServerDescription,\n    newDescription: ServerDescription\n  ) {\n    this.topologyId = topologyId;\n    this.address = address;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\n\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nexport class ServerOpeningEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n\n  /** @internal */\n  constructor(topologyId: number, address: string) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\n\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nexport class ServerClosedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n\n  /** @internal */\n  constructor(topologyId: number, address: string) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\n\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nexport class TopologyDescriptionChangedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The old topology description */\n  previousDescription: TopologyDescription;\n  /** The new topology description */\n  newDescription: TopologyDescription;\n\n  /** @internal */\n  constructor(\n    topologyId: number,\n    previousDescription: TopologyDescription,\n    newDescription: TopologyDescription\n  ) {\n    this.topologyId = topologyId;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\n\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nexport class TopologyOpeningEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n\n  /** @internal */\n  constructor(topologyId: number) {\n    this.topologyId = topologyId;\n  }\n}\n\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nexport class TopologyClosedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n\n  /** @internal */\n  constructor(topologyId: number) {\n    this.topologyId = topologyId;\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nexport class ServerHeartbeatStartedEvent {\n  /** The connection id for the command */\n  connectionId: string;\n\n  /** @internal */\n  constructor(connectionId: string) {\n    this.connectionId = connectionId;\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nexport class ServerHeartbeatSucceededEvent {\n  /** The connection id for the command */\n  connectionId: string;\n  /** The execution time of the event in ms */\n  duration: number;\n  /** The command reply */\n  reply: Document;\n\n  /** @internal */\n  constructor(connectionId: string, duration: number, reply: Document | null) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.reply = reply ?? {};\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nexport class ServerHeartbeatFailedEvent {\n  /** The connection id for the command */\n  connectionId: string;\n  /** The execution time of the event in ms */\n  duration: number;\n  /** The command failure */\n  failure: Error;\n\n  /** @internal */\n  constructor(connectionId: string, duration: number, failure: Error) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.failure = failure;\n  }\n}\n"],"mappings":";;;;;;;;AAIA;;;;;AAAA,IAKaA,6BAA6B,gBAAAC,YAAA,EAUxC;AACA,SAAAD,8BACEE,UAAkB,EAClBC,OAAe,EACfC,mBAAsC,EACtCC,cAAiC;EAAAC,eAAA,OAAAN,6BAAA;EAEjC,IAAI,CAACE,UAAU,GAAGA,UAAU;EAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;EAC9C,IAAI,CAACC,cAAc,GAAGA,cAAc;AACtC,CAAC;AArBHE,OAAA,CAAAP,6BAAA,GAAAA,6BAAA;AAwBA;;;;;AAAA,IAKaQ,kBAAkB,gBAAAP,YAAA,EAM7B;AACA,SAAAO,mBAAYN,UAAkB,EAAEC,OAAe;EAAAG,eAAA,OAAAE,kBAAA;EAC7C,IAAI,CAACN,UAAU,GAAGA,UAAU;EAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;AACxB,CAAC;AAVHI,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AAaA;;;;;AAAA,IAKaC,iBAAiB,gBAAAR,YAAA,EAM5B;AACA,SAAAQ,kBAAYP,UAAkB,EAAEC,OAAe;EAAAG,eAAA,OAAAG,iBAAA;EAC7C,IAAI,CAACP,UAAU,GAAGA,UAAU;EAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;AACxB,CAAC;AAVHI,OAAA,CAAAE,iBAAA,GAAAA,iBAAA;AAaA;;;;;AAAA,IAKaC,+BAA+B,gBAAAT,YAAA,EAQ1C;AACA,SAAAS,gCACER,UAAkB,EAClBE,mBAAwC,EACxCC,cAAmC;EAAAC,eAAA,OAAAI,+BAAA;EAEnC,IAAI,CAACR,UAAU,GAAGA,UAAU;EAC5B,IAAI,CAACE,mBAAmB,GAAGA,mBAAmB;EAC9C,IAAI,CAACC,cAAc,GAAGA,cAAc;AACtC,CAAC;AAjBHE,OAAA,CAAAG,+BAAA,GAAAA,+BAAA;AAoBA;;;;;AAAA,IAKaC,oBAAoB,gBAAAV,YAAA,EAI/B;AACA,SAAAU,qBAAYT,UAAkB;EAAAI,eAAA,OAAAK,oBAAA;EAC5B,IAAI,CAACT,UAAU,GAAGA,UAAU;AAC9B,CAAC;AAPHK,OAAA,CAAAI,oBAAA,GAAAA,oBAAA;AAUA;;;;;AAAA,IAKaC,mBAAmB,gBAAAX,YAAA,EAI9B;AACA,SAAAW,oBAAYV,UAAkB;EAAAI,eAAA,OAAAM,mBAAA;EAC5B,IAAI,CAACV,UAAU,GAAGA,UAAU;AAC9B,CAAC;AAPHK,OAAA,CAAAK,mBAAA,GAAAA,mBAAA;AAUA;;;;;;;AAAA,IAOaC,2BAA2B,gBAAAZ,YAAA,EAItC;AACA,SAAAY,4BAAYC,YAAoB;EAAAR,eAAA,OAAAO,2BAAA;EAC9B,IAAI,CAACC,YAAY,GAAGA,YAAY;AAClC,CAAC;AAPHP,OAAA,CAAAM,2BAAA,GAAAA,2BAAA;AAUA;;;;;AAAA,IAKaE,6BAA6B,gBAAAd,YAAA,EAQxC;AACA,SAAAc,8BAAYD,YAAoB,EAAEE,QAAgB,EAAEC,KAAsB;EAAAX,eAAA,OAAAS,6BAAA;EACxE,IAAI,CAACD,YAAY,GAAGA,YAAY;EAChC,IAAI,CAACE,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACC,KAAK,GAAGA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,EAAE;AAC1B,CAAC;AAbHV,OAAA,CAAAQ,6BAAA,GAAAA,6BAAA;AAgBA;;;;;AAAA,IAKaG,0BAA0B,gBAAAjB,YAAA,EAQrC;AACA,SAAAiB,2BAAYJ,YAAoB,EAAEE,QAAgB,EAAEG,OAAc;EAAAb,eAAA,OAAAY,0BAAA;EAChE,IAAI,CAACJ,YAAY,GAAGA,YAAY;EAChC,IAAI,CAACE,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACG,OAAO,GAAGA,OAAO;AACxB,CAAC;AAbHZ,OAAA,CAAAW,0BAAA,GAAAA,0BAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}