{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucket = void 0;\nvar error_1 = require(\"../error\");\nvar mongo_types_1 = require(\"../mongo_types\");\nvar write_concern_1 = require(\"../write_concern\");\nvar download_1 = require(\"./download\");\nvar upload_1 = require(\"./upload\");\nvar DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nvar GridFSBucket = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(GridFSBucket, _mongo_types_1$TypedE);\n  var _super = _createSuper(GridFSBucket);\n  function GridFSBucket(db, options) {\n    var _this;\n    _classCallCheck(this, GridFSBucket);\n    _this = _super.call(this);\n    _this.setMaxListeners(0);\n    var privateOptions = _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_GRIDFS_BUCKET_OPTIONS), options), {}, {\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n    });\n    _this.s = {\n      db: db,\n      options: privateOptions,\n      _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n      _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n      checkedIndexes: false,\n      calledOpenUploadStream: false\n    };\n    return _this;\n  }\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS. The stream's 'id' property contains the resulting\n   * file's id.\n   *\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n  _createClass(GridFSBucket, [{\n    key: \"openUploadStream\",\n    value: function openUploadStream(filename, options) {\n      return new upload_1.GridFSBucketWriteStream(this, filename, options);\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n  }, {\n    key: \"openUploadStreamWithId\",\n    value: function openUploadStreamWithId(id, filename, options) {\n      return new upload_1.GridFSBucketWriteStream(this, filename, _objectSpread(_objectSpread({}, options), {}, {\n        id: id\n      }));\n    }\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n  }, {\n    key: \"openDownloadStream\",\n    value: function openDownloadStream(id, options) {\n      return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n        _id: id\n      }, options);\n    }\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(id) {\n        var _yield$this$s$_filesC, deletedCount;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.s._filesCollection.deleteOne({\n                _id: id\n              });\n            case 2:\n              _yield$this$s$_filesC = _context.sent;\n              deletedCount = _yield$this$s$_filesC.deletedCount;\n              _context.next = 6;\n              return this.s._chunksCollection.deleteMany({\n                files_id: id\n              });\n            case 6:\n              if (!(deletedCount === 0)) {\n                _context.next = 8;\n                break;\n              }\n              throw new error_1.MongoRuntimeError(\"File not found for id \".concat(id));\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _delete(_x) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }() /** Convenience wrapper around find on the files collection */\n  }, {\n    key: \"find\",\n    value: function find() {\n      var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n  }, {\n    key: \"openDownloadStreamByName\",\n    value: function openDownloadStreamByName(filename, options) {\n      var sort = {\n        uploadDate: -1\n      };\n      var skip = undefined;\n      if (options && options.revision != null) {\n        if (options.revision >= 0) {\n          sort = {\n            uploadDate: 1\n          };\n          skip = options.revision;\n        } else {\n          skip = -options.revision - 1;\n        }\n      }\n      return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n        filename: filename\n      }, _objectSpread(_objectSpread({}, options), {}, {\n        sort: sort,\n        skip: skip\n      }));\n    }\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */\n  }, {\n    key: \"rename\",\n    value: function () {\n      var _rename = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(id, filename) {\n        var filter, update, _yield$this$s$_filesC2, matchedCount;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              filter = {\n                _id: id\n              };\n              update = {\n                $set: {\n                  filename: filename\n                }\n              };\n              _context2.next = 4;\n              return this.s._filesCollection.updateOne(filter, update);\n            case 4:\n              _yield$this$s$_filesC2 = _context2.sent;\n              matchedCount = _yield$this$s$_filesC2.matchedCount;\n              if (!(matchedCount === 0)) {\n                _context2.next = 8;\n                break;\n              }\n              throw new error_1.MongoRuntimeError(\"File with id \".concat(id, \" not found\"));\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function rename(_x2, _x3) {\n        return _rename.apply(this, arguments);\n      }\n      return rename;\n    }() /** Removes this bucket's files collection, followed by its chunks collection. */\n  }, {\n    key: \"drop\",\n    value: function () {\n      var _drop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.s._filesCollection.drop();\n            case 2:\n              _context3.next = 4;\n              return this.s._chunksCollection.drop();\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function drop() {\n        return _drop.apply(this, arguments);\n      }\n      return drop;\n    }()\n  }]);\n  return GridFSBucket;\n}(mongo_types_1.TypedEventEmitter);\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\nGridFSBucket.INDEX = 'index';\nexports.GridFSBucket = GridFSBucket;","map":{"version":3,"names":["error_1","require","mongo_types_1","write_concern_1","download_1","upload_1","DEFAULT_GRIDFS_BUCKET_OPTIONS","bucketName","chunkSizeBytes","GridFSBucket","_mongo_types_1$TypedE","_inherits","_super","_createSuper","db","options","_this","_classCallCheck","call","setMaxListeners","privateOptions","_objectSpread","writeConcern","WriteConcern","fromOptions","s","_chunksCollection","collection","_filesCollection","checkedIndexes","calledOpenUploadStream","_createClass","key","value","openUploadStream","filename","GridFSBucketWriteStream","openUploadStreamWithId","id","openDownloadStream","GridFSBucketReadStream","readPreference","_id","_delete2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$this$s$_filesC","deletedCount","wrap","_callee$","_context","prev","next","deleteOne","sent","deleteMany","files_id","MongoRuntimeError","concat","stop","_delete","_x","apply","arguments","find","filter","length","undefined","openDownloadStreamByName","sort","uploadDate","skip","revision","_rename","_callee2","update","_yield$this$s$_filesC2","matchedCount","_callee2$","_context2","$set","updateOne","rename","_x2","_x3","_drop","_callee3","_callee3$","_context3","drop","TypedEventEmitter","INDEX","exports"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\gridfs\\index.ts"],"sourcesContent":["import type { ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport type { FindCursor } from '../cursor/find_cursor';\nimport type { Db } from '../db';\nimport { MongoRuntimeError } from '../error';\nimport { type Filter, TypedEventEmitter } from '../mongo_types';\nimport type { ReadPreference } from '../read_preference';\nimport type { Sort } from '../sort';\nimport { WriteConcern, type WriteConcernOptions } from '../write_concern';\nimport type { FindOptions } from './../operations/find';\nimport {\n  GridFSBucketReadStream,\n  type GridFSBucketReadStreamOptions,\n  type GridFSBucketReadStreamOptionsWithRevision,\n  type GridFSFile\n} from './download';\nimport {\n  GridFSBucketWriteStream,\n  type GridFSBucketWriteStreamOptions,\n  type GridFSChunk\n} from './upload';\n\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS: {\n  bucketName: string;\n  chunkSizeBytes: number;\n} = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n\n/** @public */\nexport interface GridFSBucketOptions extends WriteConcernOptions {\n  /** The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot. */\n  bucketName?: string;\n  /** Number of bytes stored in each chunk. Defaults to 255KB */\n  chunkSizeBytes?: number;\n  /** Read preference to be passed to read operations */\n  readPreference?: ReadPreference;\n}\n\n/** @internal */\nexport interface GridFSBucketPrivate {\n  db: Db;\n  options: {\n    bucketName: string;\n    chunkSizeBytes: number;\n    readPreference?: ReadPreference;\n    writeConcern: WriteConcern | undefined;\n  };\n  _chunksCollection: Collection<GridFSChunk>;\n  _filesCollection: Collection<GridFSFile>;\n  checkedIndexes: boolean;\n  calledOpenUploadStream: boolean;\n}\n\n/** @public */\nexport type GridFSBucketEvents = {\n  index(): void;\n};\n\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nexport class GridFSBucket extends TypedEventEmitter<GridFSBucketEvents> {\n  /** @internal */\n  s: GridFSBucketPrivate;\n\n  /**\n   * When the first call to openUploadStream is made, the upload stream will\n   * check to see if it needs to create the proper indexes on the chunks and\n   * files collections. This event is fired either when 1) it determines that\n   * no index creation is necessary, 2) when it successfully creates the\n   * necessary indexes.\n   * @event\n   */\n  static readonly INDEX = 'index' as const;\n\n  constructor(db: Db, options?: GridFSBucketOptions) {\n    super();\n    this.setMaxListeners(0);\n    const privateOptions = {\n      ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n      ...options,\n      writeConcern: WriteConcern.fromOptions(options)\n    };\n    this.s = {\n      db,\n      options: privateOptions,\n      _chunksCollection: db.collection<GridFSChunk>(privateOptions.bucketName + '.chunks'),\n      _filesCollection: db.collection<GridFSFile>(privateOptions.bucketName + '.files'),\n      checkedIndexes: false,\n      calledOpenUploadStream: false\n    };\n  }\n\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS. The stream's 'id' property contains the resulting\n   * file's id.\n   *\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n\n  openUploadStream(\n    filename: string,\n    options?: GridFSBucketWriteStreamOptions\n  ): GridFSBucketWriteStream {\n    return new GridFSBucketWriteStream(this, filename, options);\n  }\n\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n   * file's id.\n   */\n  openUploadStreamWithId(\n    id: ObjectId,\n    filename: string,\n    options?: GridFSBucketWriteStreamOptions\n  ): GridFSBucketWriteStream {\n    return new GridFSBucketWriteStream(this, filename, { ...options, id });\n  }\n\n  /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n  openDownloadStream(\n    id: ObjectId,\n    options?: GridFSBucketReadStreamOptions\n  ): GridFSBucketReadStream {\n    return new GridFSBucketReadStream(\n      this.s._chunksCollection,\n      this.s._filesCollection,\n      this.s.options.readPreference,\n      { _id: id },\n      options\n    );\n  }\n\n  /**\n   * Deletes a file with the given id\n   *\n   * @param id - The id of the file doc\n   */\n  async delete(id: ObjectId): Promise<void> {\n    const { deletedCount } = await this.s._filesCollection.deleteOne({ _id: id });\n\n    // Delete orphaned chunks before returning FileNotFound\n    await this.s._chunksCollection.deleteMany({ files_id: id });\n\n    if (deletedCount === 0) {\n      // TODO(NODE-3483): Replace with more appropriate error\n      // Consider creating new error MongoGridFSFileNotFoundError\n      throw new MongoRuntimeError(`File not found for id ${id}`);\n    }\n  }\n\n  /** Convenience wrapper around find on the files collection */\n  find(filter: Filter<GridFSFile> = {}, options: FindOptions = {}): FindCursor<GridFSFile> {\n    return this.s._filesCollection.find(filter, options);\n  }\n\n  /**\n   * Returns a readable stream (GridFSBucketReadStream) for streaming the\n   * file with the given name from GridFS. If there are multiple files with\n   * the same name, this will stream the most recent file with the given name\n   * (as determined by the `uploadDate` field). You can set the `revision`\n   * option to change this behavior.\n   */\n  openDownloadStreamByName(\n    filename: string,\n    options?: GridFSBucketReadStreamOptionsWithRevision\n  ): GridFSBucketReadStream {\n    let sort: Sort = { uploadDate: -1 };\n    let skip = undefined;\n    if (options && options.revision != null) {\n      if (options.revision >= 0) {\n        sort = { uploadDate: 1 };\n        skip = options.revision;\n      } else {\n        skip = -options.revision - 1;\n      }\n    }\n    return new GridFSBucketReadStream(\n      this.s._chunksCollection,\n      this.s._filesCollection,\n      this.s.options.readPreference,\n      { filename },\n      { ...options, sort, skip }\n    );\n  }\n\n  /**\n   * Renames the file with the given _id to the given string\n   *\n   * @param id - the id of the file to rename\n   * @param filename - new name for the file\n   */\n  async rename(id: ObjectId, filename: string): Promise<void> {\n    const filter = { _id: id };\n    const update = { $set: { filename } };\n    const { matchedCount } = await this.s._filesCollection.updateOne(filter, update);\n    if (matchedCount === 0) {\n      throw new MongoRuntimeError(`File with id ${id} not found`);\n    }\n  }\n\n  /** Removes this bucket's files collection, followed by its chunks collection. */\n  async drop(): Promise<void> {\n    await this.s._filesCollection.drop();\n    await this.s._chunksCollection.drop();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}