{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nclass ReadPreference {\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  constructor(mode, tags, options) {\n    if (!ReadPreference.isValid(mode)) {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n    }\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = options?.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n    options = options ?? {};\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n      this.maxStalenessSeconds = options.maxStalenessSeconds;\n      // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n      this.minWireVersion = 5;\n    }\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n      if (this.maxStalenessSeconds) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n      }\n      if (this.hedge) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n      }\n    }\n  }\n  // Support the deprecated `preference` property introduced in the porcelain layer\n  get preference() {\n    return this.mode;\n  }\n  static fromString(mode) {\n    return new ReadPreference(mode);\n  }\n  /**\n   * Construct a ReadPreference given an options object.\n   *\n   * @param options - The options object from which to extract the read preference.\n   */\n  static fromOptions(options) {\n    if (!options) return;\n    const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n    const readPreferenceTags = options.readPreferenceTags;\n    if (readPreference == null) {\n      return;\n    }\n    if (typeof readPreference === 'string') {\n      return new ReadPreference(readPreference, readPreferenceTags, {\n        maxStalenessSeconds: options.maxStalenessSeconds,\n        hedge: options.hedge\n      });\n    } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n      const mode = readPreference.mode || readPreference.preference;\n      if (mode && typeof mode === 'string') {\n        return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n          maxStalenessSeconds: readPreference.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      }\n    }\n    if (readPreferenceTags) {\n      readPreference.tags = readPreferenceTags;\n    }\n    return readPreference;\n  }\n  /**\n   * Replaces options.readPreference with a ReadPreference instance\n   */\n  static translate(options) {\n    if (options.readPreference == null) return options;\n    const r = options.readPreference;\n    if (typeof r === 'string') {\n      options.readPreference = new ReadPreference(r);\n    } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n      const mode = r.mode || r.preference;\n      if (mode && typeof mode === 'string') {\n        options.readPreference = new ReadPreference(mode, r.tags, {\n          maxStalenessSeconds: r.maxStalenessSeconds\n        });\n      }\n    } else if (!(r instanceof ReadPreference)) {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n    }\n    return options;\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  static isValid(mode) {\n    const VALID_MODES = new Set([ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null]);\n    return VALID_MODES.has(mode);\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  isValid(mode) {\n    return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n  }\n  /**\n   * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n   * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n   */\n  secondaryOk() {\n    const NEEDS_SECONDARYOK = new Set([ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST]);\n    return NEEDS_SECONDARYOK.has(this.mode);\n  }\n  /**\n   * Check if the two ReadPreferences are equivalent\n   *\n   * @param readPreference - The read preference with which to check equality\n   */\n  equals(readPreference) {\n    return readPreference.mode === this.mode;\n  }\n  /** Return JSON representation */\n  toJSON() {\n    const readPreference = {\n      mode: this.mode\n    };\n    if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n    if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n    if (this.hedge) readPreference.hedge = this.hedge;\n    return readPreference;\n  }\n}\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference;","map":{"version":3,"names":["error_1","require","exports","ReadPreferenceMode","Object","freeze","primary","primaryPreferred","secondary","secondaryPreferred","nearest","ReadPreference","constructor","mode","tags","options","isValid","MongoInvalidArgumentError","JSON","stringify","Array","isArray","undefined","hedge","maxStalenessSeconds","minWireVersion","PRIMARY","length","preference","fromString","fromOptions","readPreference","session","transaction","readPreferenceTags","translate","r","VALID_MODES","Set","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","has","secondaryOk","NEEDS_SECONDARYOK","equals","toJSON"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\read_preference.ts"],"sourcesContent":["import type { Document } from './bson';\nimport { MongoInvalidArgumentError } from './error';\nimport type { TagSet } from './sdam/server_description';\nimport type { ClientSession } from './sessions';\n\n/** @public */\nexport type ReadPreferenceLike = ReadPreference | ReadPreferenceMode;\n\n/** @public */\nexport const ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n} as const);\n\n/** @public */\nexport type ReadPreferenceMode = (typeof ReadPreferenceMode)[keyof typeof ReadPreferenceMode];\n\n/** @public */\nexport interface HedgeOptions {\n  /** Explicitly enable or disable hedged reads. */\n  enabled?: boolean;\n}\n\n/** @public */\nexport interface ReadPreferenceOptions {\n  /** Max secondary read staleness in seconds, Minimum value is 90 seconds.*/\n  maxStalenessSeconds?: number;\n  /** Server mode in which the same query is dispatched in parallel to multiple replica set members. */\n  hedge?: HedgeOptions;\n}\n\n/** @public */\nexport interface ReadPreferenceLikeOptions extends ReadPreferenceOptions {\n  readPreference?:\n    | ReadPreferenceLike\n    | {\n        mode?: ReadPreferenceMode;\n        preference?: ReadPreferenceMode;\n        tags?: TagSet[];\n        maxStalenessSeconds?: number;\n      };\n}\n\n/** @public */\nexport interface ReadPreferenceFromOptions extends ReadPreferenceLikeOptions {\n  session?: ClientSession;\n  readPreferenceTags?: TagSet[];\n  hedge?: HedgeOptions;\n}\n\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nexport class ReadPreference {\n  mode: ReadPreferenceMode;\n  tags?: TagSet[];\n  hedge?: HedgeOptions;\n  maxStalenessSeconds?: number;\n  minWireVersion?: number;\n\n  public static PRIMARY = ReadPreferenceMode.primary;\n  public static PRIMARY_PREFERRED = ReadPreferenceMode.primaryPreferred;\n  public static SECONDARY = ReadPreferenceMode.secondary;\n  public static SECONDARY_PREFERRED = ReadPreferenceMode.secondaryPreferred;\n  public static NEAREST = ReadPreferenceMode.nearest;\n\n  public static primary = new ReadPreference(ReadPreferenceMode.primary);\n  public static primaryPreferred = new ReadPreference(ReadPreferenceMode.primaryPreferred);\n  public static secondary = new ReadPreference(ReadPreferenceMode.secondary);\n  public static secondaryPreferred = new ReadPreference(ReadPreferenceMode.secondaryPreferred);\n  public static nearest = new ReadPreference(ReadPreferenceMode.nearest);\n\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  constructor(mode: ReadPreferenceMode, tags?: TagSet[], options?: ReadPreferenceOptions) {\n    if (!ReadPreference.isValid(mode)) {\n      throw new MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n    }\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = options?.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n\n    options = options ?? {};\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n\n      this.maxStalenessSeconds = options.maxStalenessSeconds;\n\n      // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n      this.minWireVersion = 5;\n    }\n\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n\n      if (this.maxStalenessSeconds) {\n        throw new MongoInvalidArgumentError(\n          'Primary read preference cannot be combined with maxStalenessSeconds'\n        );\n      }\n\n      if (this.hedge) {\n        throw new MongoInvalidArgumentError(\n          'Primary read preference cannot be combined with hedge'\n        );\n      }\n    }\n  }\n\n  // Support the deprecated `preference` property introduced in the porcelain layer\n  get preference(): ReadPreferenceMode {\n    return this.mode;\n  }\n\n  static fromString(mode: string): ReadPreference {\n    return new ReadPreference(mode as ReadPreferenceMode);\n  }\n\n  /**\n   * Construct a ReadPreference given an options object.\n   *\n   * @param options - The options object from which to extract the read preference.\n   */\n  static fromOptions(options?: ReadPreferenceFromOptions): ReadPreference | undefined {\n    if (!options) return;\n    const readPreference =\n      options.readPreference ?? options.session?.transaction.options.readPreference;\n    const readPreferenceTags = options.readPreferenceTags;\n\n    if (readPreference == null) {\n      return;\n    }\n\n    if (typeof readPreference === 'string') {\n      return new ReadPreference(readPreference, readPreferenceTags, {\n        maxStalenessSeconds: options.maxStalenessSeconds,\n        hedge: options.hedge\n      });\n    } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n      const mode = readPreference.mode || readPreference.preference;\n      if (mode && typeof mode === 'string') {\n        return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n          maxStalenessSeconds: readPreference.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      }\n    }\n\n    if (readPreferenceTags) {\n      readPreference.tags = readPreferenceTags;\n    }\n\n    return readPreference as ReadPreference;\n  }\n\n  /**\n   * Replaces options.readPreference with a ReadPreference instance\n   */\n  static translate(options: ReadPreferenceLikeOptions): ReadPreferenceLikeOptions {\n    if (options.readPreference == null) return options;\n    const r = options.readPreference;\n\n    if (typeof r === 'string') {\n      options.readPreference = new ReadPreference(r);\n    } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n      const mode = r.mode || r.preference;\n      if (mode && typeof mode === 'string') {\n        options.readPreference = new ReadPreference(mode, r.tags, {\n          maxStalenessSeconds: r.maxStalenessSeconds\n        });\n      }\n    } else if (!(r instanceof ReadPreference)) {\n      throw new MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n    }\n\n    return options;\n  }\n\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  static isValid(mode: string): boolean {\n    const VALID_MODES = new Set([\n      ReadPreference.PRIMARY,\n      ReadPreference.PRIMARY_PREFERRED,\n      ReadPreference.SECONDARY,\n      ReadPreference.SECONDARY_PREFERRED,\n      ReadPreference.NEAREST,\n      null\n    ]);\n\n    return VALID_MODES.has(mode as ReadPreferenceMode);\n  }\n\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  isValid(mode?: string): boolean {\n    return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n  }\n\n  /**\n   * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n   * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n   */\n  secondaryOk(): boolean {\n    const NEEDS_SECONDARYOK = new Set<string>([\n      ReadPreference.PRIMARY_PREFERRED,\n      ReadPreference.SECONDARY,\n      ReadPreference.SECONDARY_PREFERRED,\n      ReadPreference.NEAREST\n    ]);\n\n    return NEEDS_SECONDARYOK.has(this.mode);\n  }\n\n  /**\n   * Check if the two ReadPreferences are equivalent\n   *\n   * @param readPreference - The read preference with which to check equality\n   */\n  equals(readPreference: ReadPreference): boolean {\n    return readPreference.mode === this.mode;\n  }\n\n  /** Return JSON representation */\n  toJSON(): Document {\n    const readPreference = { mode: this.mode } as Document;\n    if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n    if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n    if (this.hedge) readPreference.hedge = this.hedge;\n    return readPreference;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}