{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nvar error_1 = require(\"./error\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nvar ReadPreference = /*#__PURE__*/function () {\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  function ReadPreference(mode, tags, options) {\n    var _options, _options2;\n    _classCallCheck(this, ReadPreference);\n    if (!ReadPreference.isValid(mode)) {\n      throw new error_1.MongoInvalidArgumentError(\"Invalid read preference mode \".concat(JSON.stringify(mode)));\n    }\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = (_options = options) === null || _options === void 0 ? void 0 : _options.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n    options = (_options2 = options) !== null && _options2 !== void 0 ? _options2 : {};\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n      this.maxStalenessSeconds = options.maxStalenessSeconds;\n      // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n      this.minWireVersion = 5;\n    }\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n      if (this.maxStalenessSeconds) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n      }\n      if (this.hedge) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n      }\n    }\n  }\n  // Support the deprecated `preference` property introduced in the porcelain layer\n  _createClass(ReadPreference, [{\n    key: \"preference\",\n    get: function get() {\n      return this.mode;\n    }\n  }, {\n    key: \"isValid\",\n    value:\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    function isValid(mode) {\n      return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n  }, {\n    key: \"secondaryOk\",\n    value: function secondaryOk() {\n      var NEEDS_SECONDARYOK = new Set([ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST]);\n      return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(readPreference) {\n      return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var readPreference = {\n        mode: this.mode\n      };\n      if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n      if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n      if (this.hedge) readPreference.hedge = this.hedge;\n      return readPreference;\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(mode) {\n      return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n  }, {\n    key: \"fromOptions\",\n    value: function fromOptions(options) {\n      var _options$readPreferen, _options$session;\n      if (!options) return;\n      var readPreference = (_options$readPreferen = options.readPreference) !== null && _options$readPreferen !== void 0 ? _options$readPreferen : (_options$session = options.session) === null || _options$session === void 0 ? void 0 : _options$session.transaction.options.readPreference;\n      var readPreferenceTags = options.readPreferenceTags;\n      if (readPreference == null) {\n        return;\n      }\n      if (typeof readPreference === 'string') {\n        return new ReadPreference(readPreference, readPreferenceTags, {\n          maxStalenessSeconds: options.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n        var mode = readPreference.mode || readPreference.preference;\n        if (mode && typeof mode === 'string') {\n          var _readPreference$tags;\n          return new ReadPreference(mode, (_readPreference$tags = readPreference.tags) !== null && _readPreference$tags !== void 0 ? _readPreference$tags : readPreferenceTags, {\n            maxStalenessSeconds: readPreference.maxStalenessSeconds,\n            hedge: options.hedge\n          });\n        }\n      }\n      if (readPreferenceTags) {\n        readPreference.tags = readPreferenceTags;\n      }\n      return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n  }, {\n    key: \"translate\",\n    value: function translate(options) {\n      if (options.readPreference == null) return options;\n      var r = options.readPreference;\n      if (typeof r === 'string') {\n        options.readPreference = new ReadPreference(r);\n      } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n        var mode = r.mode || r.preference;\n        if (mode && typeof mode === 'string') {\n          options.readPreference = new ReadPreference(mode, r.tags, {\n            maxStalenessSeconds: r.maxStalenessSeconds\n          });\n        }\n      } else if (!(r instanceof ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError(\"Invalid read preference: \".concat(r));\n      }\n      return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n  }, {\n    key: \"isValid\",\n    value: function isValid(mode) {\n      var VALID_MODES = new Set([ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null]);\n      return VALID_MODES.has(mode);\n    }\n  }]);\n  return ReadPreference;\n}();\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference;","map":{"version":3,"names":["error_1","require","exports","ReadPreferenceMode","Object","freeze","primary","primaryPreferred","secondary","secondaryPreferred","nearest","ReadPreference","mode","tags","options","_options","_options2","_classCallCheck","isValid","MongoInvalidArgumentError","concat","JSON","stringify","Array","isArray","undefined","hedge","maxStalenessSeconds","minWireVersion","PRIMARY","length","_createClass","key","get","value","secondaryOk","NEEDS_SECONDARYOK","Set","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","has","equals","readPreference","toJSON","fromString","fromOptions","_options$readPreferen","_options$session","session","transaction","readPreferenceTags","preference","_readPreference$tags","translate","r","VALID_MODES"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\read_preference.ts"],"sourcesContent":["import type { Document } from './bson';\nimport { MongoInvalidArgumentError } from './error';\nimport type { TagSet } from './sdam/server_description';\nimport type { ClientSession } from './sessions';\n\n/** @public */\nexport type ReadPreferenceLike = ReadPreference | ReadPreferenceMode;\n\n/** @public */\nexport const ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n} as const);\n\n/** @public */\nexport type ReadPreferenceMode = (typeof ReadPreferenceMode)[keyof typeof ReadPreferenceMode];\n\n/** @public */\nexport interface HedgeOptions {\n  /** Explicitly enable or disable hedged reads. */\n  enabled?: boolean;\n}\n\n/** @public */\nexport interface ReadPreferenceOptions {\n  /** Max secondary read staleness in seconds, Minimum value is 90 seconds.*/\n  maxStalenessSeconds?: number;\n  /** Server mode in which the same query is dispatched in parallel to multiple replica set members. */\n  hedge?: HedgeOptions;\n}\n\n/** @public */\nexport interface ReadPreferenceLikeOptions extends ReadPreferenceOptions {\n  readPreference?:\n    | ReadPreferenceLike\n    | {\n        mode?: ReadPreferenceMode;\n        preference?: ReadPreferenceMode;\n        tags?: TagSet[];\n        maxStalenessSeconds?: number;\n      };\n}\n\n/** @public */\nexport interface ReadPreferenceFromOptions extends ReadPreferenceLikeOptions {\n  session?: ClientSession;\n  readPreferenceTags?: TagSet[];\n  hedge?: HedgeOptions;\n}\n\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nexport class ReadPreference {\n  mode: ReadPreferenceMode;\n  tags?: TagSet[];\n  hedge?: HedgeOptions;\n  maxStalenessSeconds?: number;\n  minWireVersion?: number;\n\n  public static PRIMARY = ReadPreferenceMode.primary;\n  public static PRIMARY_PREFERRED = ReadPreferenceMode.primaryPreferred;\n  public static SECONDARY = ReadPreferenceMode.secondary;\n  public static SECONDARY_PREFERRED = ReadPreferenceMode.secondaryPreferred;\n  public static NEAREST = ReadPreferenceMode.nearest;\n\n  public static primary = new ReadPreference(ReadPreferenceMode.primary);\n  public static primaryPreferred = new ReadPreference(ReadPreferenceMode.primaryPreferred);\n  public static secondary = new ReadPreference(ReadPreferenceMode.secondary);\n  public static secondaryPreferred = new ReadPreference(ReadPreferenceMode.secondaryPreferred);\n  public static nearest = new ReadPreference(ReadPreferenceMode.nearest);\n\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  constructor(mode: ReadPreferenceMode, tags?: TagSet[], options?: ReadPreferenceOptions) {\n    if (!ReadPreference.isValid(mode)) {\n      throw new MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n    }\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = options?.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n\n    options = options ?? {};\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n\n      this.maxStalenessSeconds = options.maxStalenessSeconds;\n\n      // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n      this.minWireVersion = 5;\n    }\n\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n\n      if (this.maxStalenessSeconds) {\n        throw new MongoInvalidArgumentError(\n          'Primary read preference cannot be combined with maxStalenessSeconds'\n        );\n      }\n\n      if (this.hedge) {\n        throw new MongoInvalidArgumentError(\n          'Primary read preference cannot be combined with hedge'\n        );\n      }\n    }\n  }\n\n  // Support the deprecated `preference` property introduced in the porcelain layer\n  get preference(): ReadPreferenceMode {\n    return this.mode;\n  }\n\n  static fromString(mode: string): ReadPreference {\n    return new ReadPreference(mode as ReadPreferenceMode);\n  }\n\n  /**\n   * Construct a ReadPreference given an options object.\n   *\n   * @param options - The options object from which to extract the read preference.\n   */\n  static fromOptions(options?: ReadPreferenceFromOptions): ReadPreference | undefined {\n    if (!options) return;\n    const readPreference =\n      options.readPreference ?? options.session?.transaction.options.readPreference;\n    const readPreferenceTags = options.readPreferenceTags;\n\n    if (readPreference == null) {\n      return;\n    }\n\n    if (typeof readPreference === 'string') {\n      return new ReadPreference(readPreference, readPreferenceTags, {\n        maxStalenessSeconds: options.maxStalenessSeconds,\n        hedge: options.hedge\n      });\n    } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n      const mode = readPreference.mode || readPreference.preference;\n      if (mode && typeof mode === 'string') {\n        return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n          maxStalenessSeconds: readPreference.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      }\n    }\n\n    if (readPreferenceTags) {\n      readPreference.tags = readPreferenceTags;\n    }\n\n    return readPreference as ReadPreference;\n  }\n\n  /**\n   * Replaces options.readPreference with a ReadPreference instance\n   */\n  static translate(options: ReadPreferenceLikeOptions): ReadPreferenceLikeOptions {\n    if (options.readPreference == null) return options;\n    const r = options.readPreference;\n\n    if (typeof r === 'string') {\n      options.readPreference = new ReadPreference(r);\n    } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n      const mode = r.mode || r.preference;\n      if (mode && typeof mode === 'string') {\n        options.readPreference = new ReadPreference(mode, r.tags, {\n          maxStalenessSeconds: r.maxStalenessSeconds\n        });\n      }\n    } else if (!(r instanceof ReadPreference)) {\n      throw new MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n    }\n\n    return options;\n  }\n\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  static isValid(mode: string): boolean {\n    const VALID_MODES = new Set([\n      ReadPreference.PRIMARY,\n      ReadPreference.PRIMARY_PREFERRED,\n      ReadPreference.SECONDARY,\n      ReadPreference.SECONDARY_PREFERRED,\n      ReadPreference.NEAREST,\n      null\n    ]);\n\n    return VALID_MODES.has(mode as ReadPreferenceMode);\n  }\n\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  isValid(mode?: string): boolean {\n    return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n  }\n\n  /**\n   * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n   * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n   */\n  secondaryOk(): boolean {\n    const NEEDS_SECONDARYOK = new Set<string>([\n      ReadPreference.PRIMARY_PREFERRED,\n      ReadPreference.SECONDARY,\n      ReadPreference.SECONDARY_PREFERRED,\n      ReadPreference.NEAREST\n    ]);\n\n    return NEEDS_SECONDARYOK.has(this.mode);\n  }\n\n  /**\n   * Check if the two ReadPreferences are equivalent\n   *\n   * @param readPreference - The read preference with which to check equality\n   */\n  equals(readPreference: ReadPreference): boolean {\n    return readPreference.mode === this.mode;\n  }\n\n  /** Return JSON representation */\n  toJSON(): Document {\n    const readPreference = { mode: this.mode } as Document;\n    if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n    if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n    if (this.hedge) readPreference.hedge = this.hedge;\n    return readPreference;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}