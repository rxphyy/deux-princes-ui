{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _toConsumableArray = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _assertThisInitialized = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nvar util_1 = require(\"util\");\nvar bson_1 = require(\"../bson\");\nvar error_1 = require(\"../error\");\nvar delete_1 = require(\"../operations/delete\");\nvar execute_operation_1 = require(\"../operations/execute_operation\");\nvar insert_1 = require(\"../operations/insert\");\nvar operation_1 = require(\"../operations/operation\");\nvar update_1 = require(\"../operations/update\");\nvar utils_1 = require(\"../utils\");\nvar write_concern_1 = require(\"../write_concern\");\n/** @internal */\nvar kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nvar Batch = /*#__PURE__*/_createClass(function Batch(batchType, originalZeroIndex) {\n  _classCallCheck(this, Batch);\n  this.originalZeroIndex = originalZeroIndex;\n  this.currentIndex = 0;\n  this.originalIndexes = [];\n  this.batchType = batchType;\n  this.operations = [];\n  this.size = 0;\n  this.sizeBytes = 0;\n});\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nvar BulkWriteResult = /*#__PURE__*/function () {\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  function BulkWriteResult(bulkResult) {\n    var _this$result$nInserte, _this$result$nMatched, _this$result$nModifie, _this$result$nRemoved, _this$result$upserted;\n    _classCallCheck(this, BulkWriteResult);\n    this.result = bulkResult;\n    this.insertedCount = (_this$result$nInserte = this.result.nInserted) !== null && _this$result$nInserte !== void 0 ? _this$result$nInserte : 0;\n    this.matchedCount = (_this$result$nMatched = this.result.nMatched) !== null && _this$result$nMatched !== void 0 ? _this$result$nMatched : 0;\n    this.modifiedCount = (_this$result$nModifie = this.result.nModified) !== null && _this$result$nModifie !== void 0 ? _this$result$nModifie : 0;\n    this.deletedCount = (_this$result$nRemoved = this.result.nRemoved) !== null && _this$result$nRemoved !== void 0 ? _this$result$nRemoved : 0;\n    this.upsertedCount = (_this$result$upserted = this.result.upserted.length) !== null && _this$result$upserted !== void 0 ? _this$result$upserted : 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\n    Object.defineProperty(this, 'result', {\n      value: this.result,\n      enumerable: false\n    });\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n  _createClass(BulkWriteResult, [{\n    key: \"ok\",\n    get: function get() {\n      return this.result.ok;\n    }\n    /** Returns the upserted id at the given index */\n  }, {\n    key: \"getUpsertedIdAt\",\n    value: function getUpsertedIdAt(index) {\n      return this.result.upserted[index];\n    }\n    /** Returns raw internal result */\n  }, {\n    key: \"getRawResponse\",\n    value: function getRawResponse() {\n      return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */\n  }, {\n    key: \"hasWriteErrors\",\n    value: function hasWriteErrors() {\n      return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */\n  }, {\n    key: \"getWriteErrorCount\",\n    value: function getWriteErrorCount() {\n      return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */\n  }, {\n    key: \"getWriteErrorAt\",\n    value: function getWriteErrorAt(index) {\n      return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */\n  }, {\n    key: \"getWriteErrors\",\n    value: function getWriteErrors() {\n      return this.result.writeErrors;\n    }\n    /** Retrieve the write concern error if one exists */\n  }, {\n    key: \"getWriteConcernError\",\n    value: function getWriteConcernError() {\n      if (this.result.writeConcernErrors.length === 0) {\n        return;\n      } else if (this.result.writeConcernErrors.length === 1) {\n        // Return the error\n        return this.result.writeConcernErrors[0];\n      } else {\n        // Combine the errors\n        var errmsg = '';\n        for (var i = 0; i < this.result.writeConcernErrors.length; i++) {\n          var err = this.result.writeConcernErrors[i];\n          errmsg = errmsg + err.errmsg;\n          // TODO: Something better\n          if (i === 0) errmsg = errmsg + ' and ';\n        }\n        return new WriteConcernError({\n          errmsg: errmsg,\n          code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n        });\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"BulkWriteResult(\".concat(this.result, \")\");\n    }\n  }, {\n    key: \"isOk\",\n    value: function isOk() {\n      return this.result.ok === 1;\n    }\n  }], [{\n    key: \"generateIdMap\",\n    value: function generateIdMap(ids) {\n      var idMap = {};\n      var _iterator = _createForOfIteratorHelper(ids),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var doc = _step.value;\n          idMap[doc.index] = doc._id;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return idMap;\n    }\n  }]);\n  return BulkWriteResult;\n}();\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nvar WriteConcernError = /*#__PURE__*/function () {\n  function WriteConcernError(error) {\n    _classCallCheck(this, WriteConcernError);\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n  _createClass(WriteConcernError, [{\n    key: \"code\",\n    get: function get() {\n      return this[kServerError].code;\n    }\n    /** Write concern error message. */\n  }, {\n    key: \"errmsg\",\n    get: function get() {\n      return this[kServerError].errmsg;\n    }\n    /** Write concern error info. */\n  }, {\n    key: \"errInfo\",\n    get: function get() {\n      return this[kServerError].errInfo;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this[kServerError];\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"WriteConcernError(\".concat(this.errmsg, \")\");\n    }\n  }]);\n  return WriteConcernError;\n}();\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nvar WriteError = /*#__PURE__*/function () {\n  function WriteError(err) {\n    _classCallCheck(this, WriteError);\n    this.err = err;\n  }\n  /** WriteError code. */\n  _createClass(WriteError, [{\n    key: \"code\",\n    get: function get() {\n      return this.err.code;\n    }\n    /** WriteError original bulk operation index. */\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this.err.index;\n    }\n    /** WriteError message. */\n  }, {\n    key: \"errmsg\",\n    get: function get() {\n      return this.err.errmsg;\n    }\n    /** WriteError details. */\n  }, {\n    key: \"errInfo\",\n    get: function get() {\n      return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */\n  }, {\n    key: \"getOperation\",\n    value: function getOperation() {\n      return this.err.op;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        code: this.err.code,\n        index: this.err.index,\n        errmsg: this.err.errmsg,\n        op: this.err.op\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"WriteError(\".concat(JSON.stringify(this.toJSON()), \")\");\n    }\n  }]);\n  return WriteError;\n}();\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n  if (result == null) {\n    return;\n  }\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    var writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n  var nUpserted = 0;\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n    for (var i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    var nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n  if (Array.isArray(result.writeErrors)) {\n    for (var _i = 0; _i < result.writeErrors.length; _i++) {\n      var _writeError = {\n        index: batch.originalIndexes[result.writeErrors[_i].index],\n        code: result.writeErrors[_i].code,\n        errmsg: result.writeErrors[_i].errmsg,\n        errInfo: result.writeErrors[_i].errInfo,\n        op: batch.operations[result.writeErrors[_i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(_writeError));\n    }\n  }\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n  var batch = bulkOperation.s.batches.shift();\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n    }\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n    // Merge the results together\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    var writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n  var finalOptions = (0, utils_1.resolveOptions)(bulkOperation, _objectSpread(_objectSpread({}, options), {}, {\n    ordered: bulkOperation.isOrdered\n  }));\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  }\n  // Set an operationIf if provided\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  }\n  // Is the bypassDocumentValidation options specific\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n  // Is the checkKeys option disabled\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(function (op) {\n        return op.multi;\n      });\n    }\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(function (op) {\n        return op.limit === 0;\n      });\n    }\n  }\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  var _err$result, _err$result2;\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: (_err$result = err.result) === null || _err$result === void 0 ? void 0 : _err$result.writeConcernError.errmsg,\n    code: (_err$result2 = err.result) === null || _err$result2 === void 0 ? void 0 : _err$result2.writeConcernError.result\n  }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nvar MongoBulkWriteError = /*#__PURE__*/function (_error_1$MongoServerE) {\n  _inherits(MongoBulkWriteError, _error_1$MongoServerE);\n  var _super = _createSuper(MongoBulkWriteError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoBulkWriteError(error, result) {\n    var _this;\n    _classCallCheck(this, MongoBulkWriteError);\n    _this = _super.call(this, error);\n    _this.writeErrors = [];\n    if (error instanceof WriteConcernError) _this.err = error;else if (!(error instanceof Error)) {\n      var _error$writeErrors;\n      _this.message = error.message;\n      _this.code = error.code;\n      _this.writeErrors = (_error$writeErrors = error.writeErrors) !== null && _error$writeErrors !== void 0 ? _error$writeErrors : [];\n    }\n    _this.result = result;\n    Object.assign(_assertThisInitialized(_this), error);\n    return _this;\n  }\n  _createClass(MongoBulkWriteError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoBulkWriteError';\n    }\n    /** Number of documents inserted. */\n  }, {\n    key: \"insertedCount\",\n    get: function get() {\n      return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */\n  }, {\n    key: \"matchedCount\",\n    get: function get() {\n      return this.result.matchedCount;\n    }\n    /** Number of documents modified. */\n  }, {\n    key: \"modifiedCount\",\n    get: function get() {\n      return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */\n  }, {\n    key: \"deletedCount\",\n    get: function get() {\n      return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */\n  }, {\n    key: \"upsertedCount\",\n    get: function get() {\n      return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n  }, {\n    key: \"insertedIds\",\n    get: function get() {\n      return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n  }, {\n    key: \"upsertedIds\",\n    get: function get() {\n      return this.result.upsertedIds;\n    }\n  }]);\n  return MongoBulkWriteError;\n}(error_1.MongoServerError);\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nvar FindOperators = /*#__PURE__*/function () {\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  function FindOperators(bulkOperation) {\n    _classCallCheck(this, FindOperators);\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n  _createClass(FindOperators, [{\n    key: \"update\",\n    value: function update(updateDocument) {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, _objectSpread(_objectSpread({}, currentOp), {}, {\n        multi: true\n      })));\n    }\n    /** Add a single update operation to the bulk operation */\n  }, {\n    key: \"updateOne\",\n    value: function updateOne(updateDocument) {\n      if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n        throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n      }\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, _objectSpread(_objectSpread({}, currentOp), {}, {\n        multi: false\n      })));\n    }\n    /** Add a replace one operation to the bulk operation */\n  }, {\n    key: \"replaceOne\",\n    value: function replaceOne(replacement) {\n      if ((0, utils_1.hasAtomicOperators)(replacement)) {\n        throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n      }\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, _objectSpread(_objectSpread({}, currentOp), {}, {\n        multi: false\n      })));\n    }\n    /** Add a delete one operation to the bulk operation */\n  }, {\n    key: \"deleteOne\",\n    value: function deleteOne() {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, _objectSpread(_objectSpread({}, currentOp), {}, {\n        limit: 1\n      })));\n    }\n    /** Add a delete many operation to the bulk operation */\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, _objectSpread(_objectSpread({}, currentOp), {}, {\n        limit: 0\n      })));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  }, {\n    key: \"upsert\",\n    value: function upsert() {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.upsert = true;\n      return this;\n    }\n    /** Specifies the collation for the query condition. */\n  }, {\n    key: \"collation\",\n    value: function collation(_collation) {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.collation = _collation;\n      return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  }, {\n    key: \"arrayFilters\",\n    value: function arrayFilters(_arrayFilters) {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.arrayFilters = _arrayFilters;\n      return this;\n    }\n    /** Specifies hint for the bulk operation. */\n  }, {\n    key: \"hint\",\n    value: function hint(_hint) {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.hint = _hint;\n      return this;\n    }\n  }]);\n  return FindOperators;\n}();\nexports.FindOperators = FindOperators;\nvar executeCommandsAsync = (0, util_1.promisify)(executeCommands);\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nvar BulkWriteShimOperation = /*#__PURE__*/function (_operation_1$Abstract) {\n  _inherits(BulkWriteShimOperation, _operation_1$Abstract);\n  var _super2 = _createSuper(BulkWriteShimOperation);\n  function BulkWriteShimOperation(bulkOperation, options) {\n    var _this2;\n    _classCallCheck(this, BulkWriteShimOperation);\n    _this2 = _super2.call(this, options);\n    _this2.bulkOperation = bulkOperation;\n    return _this2;\n  }\n  _createClass(BulkWriteShimOperation, [{\n    key: \"execute\",\n    value: function execute(_server, session) {\n      if (this.options.session == null) {\n        // An implicit session could have been created by 'executeOperation'\n        // So if we stick it on finalOptions here, each bulk operation\n        // will use this same session, it'll be passed in the same way\n        // an explicit session would be\n        this.options.session = session;\n      }\n      return executeCommandsAsync(this.bulkOperation, this.options);\n    }\n  }]);\n  return BulkWriteShimOperation;\n}(operation_1.AbstractOperation);\n/** @public */\nvar BulkOperationBase = /*#__PURE__*/function () {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  function BulkOperationBase(collection, options, isOrdered) {\n    _classCallCheck(this, BulkOperationBase);\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    var topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    var namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    var executed = false;\n    // Current item\n    var currentOp = undefined;\n    // Set max byte size\n    var hello = topology.lastHello();\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    var usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    var maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    var maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    var maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    var maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n    // Final options for retryable writes\n    var finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n    // Final results\n    var bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult: bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize: maxBsonObjectSize,\n      maxBatchSizeBytes: maxBatchSizeBytes,\n      maxWriteBatchSize: maxWriteBatchSize,\n      maxKeySize: maxKeySize,\n      // Namespace\n      namespace: namespace,\n      // Topology\n      topology: topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp: currentOp,\n      // Executed\n      executed: executed,\n      // Collection\n      collection: collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  _createClass(BulkOperationBase, [{\n    key: \"insert\",\n    value: function insert(document) {\n      if (document._id == null && !shouldForceServerObjectId(this)) {\n        document._id = new bson_1.ObjectId();\n      }\n      return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n  }, {\n    key: \"find\",\n    value: function find(selector) {\n      if (!selector) {\n        throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n      }\n      // Save a current selector\n      this.s.currentOp = {\n        selector: selector\n      };\n      return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */\n  }, {\n    key: \"raw\",\n    value: function raw(op) {\n      if (op == null || typeof op !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n      }\n      if ('insertOne' in op) {\n        var forceServerObjectId = shouldForceServerObjectId(this);\n        if (op.insertOne && op.insertOne.document == null) {\n          // NOTE: provided for legacy support, but this is a malformed operation\n          if (forceServerObjectId !== true && op.insertOne._id == null) {\n            op.insertOne._id = new bson_1.ObjectId();\n          }\n          return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n        }\n        if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n          op.insertOne.document._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n      }\n      if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n        if ('replaceOne' in op) {\n          if ('q' in op.replaceOne) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n          var updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, _objectSpread(_objectSpread({}, op.replaceOne), {}, {\n            multi: false\n          }));\n          if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n          }\n          return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n        }\n        if ('updateOne' in op) {\n          if ('q' in op.updateOne) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n          var _updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, _objectSpread(_objectSpread({}, op.updateOne), {}, {\n            multi: false\n          }));\n          if (!(0, utils_1.hasAtomicOperators)(_updateStatement.u)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n          }\n          return this.addToOperationsList(exports.BatchType.UPDATE, _updateStatement);\n        }\n        if ('updateMany' in op) {\n          if ('q' in op.updateMany) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n          var _updateStatement2 = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, _objectSpread(_objectSpread({}, op.updateMany), {}, {\n            multi: true\n          }));\n          if (!(0, utils_1.hasAtomicOperators)(_updateStatement2.u)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n          }\n          return this.addToOperationsList(exports.BatchType.UPDATE, _updateStatement2);\n        }\n      }\n      if ('deleteOne' in op) {\n        if ('q' in op.deleteOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, _objectSpread(_objectSpread({}, op.deleteOne), {}, {\n          limit: 1\n        })));\n      }\n      if ('deleteMany' in op) {\n        if ('q' in op.deleteMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, _objectSpread(_objectSpread({}, op.deleteMany), {}, {\n          limit: 0\n        })));\n      }\n      // otherwise an unknown operation was provided\n      throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n  }, {\n    key: \"bsonOptions\",\n    get: function get() {\n      return this.s.bsonOptions;\n    }\n  }, {\n    key: \"writeConcern\",\n    get: function get() {\n      return this.s.writeConcern;\n    }\n  }, {\n    key: \"batches\",\n    get: function get() {\n      var batches = _toConsumableArray(this.s.batches);\n      if (this.isOrdered) {\n        if (this.s.currentBatch) batches.push(this.s.currentBatch);\n      } else {\n        if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n        if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n        if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n      }\n      return batches;\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var options,\n          writeConcern,\n          finalOptions,\n          operation,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              if (!this.s.executed) {\n                _context.next = 3;\n                break;\n              }\n              throw new error_1.MongoBatchReExecutionError();\n            case 3:\n              writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n              if (writeConcern) {\n                this.s.writeConcern = writeConcern;\n              }\n              // If we have current batch\n              if (this.isOrdered) {\n                if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n              } else {\n                if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n                if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n                if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n              }\n              // If we have no operations in the bulk raise an error\n              if (!(this.s.batches.length === 0)) {\n                _context.next = 8;\n                break;\n              }\n              throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n            case 8:\n              this.s.executed = true;\n              finalOptions = _objectSpread(_objectSpread({}, this.s.options), options);\n              operation = new BulkWriteShimOperation(this, finalOptions);\n              return _context.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.s.collection.client, operation));\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n  }, {\n    key: \"handleWriteError\",\n    value: function handleWriteError(callback, writeResult) {\n      if (this.s.bulkResult.writeErrors.length > 0) {\n        var msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n        callback(new MongoBulkWriteError({\n          message: msg,\n          code: this.s.bulkResult.writeErrors[0].code,\n          writeErrors: this.s.bulkResult.writeErrors\n        }, writeResult));\n        return true;\n      }\n      var writeConcernError = writeResult.getWriteConcernError();\n      if (writeConcernError) {\n        callback(new MongoBulkWriteError(writeConcernError, writeResult));\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return BulkOperationBase;\n}();\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get: function get() {\n    return this.s.currentIndex;\n  }\n});\nfunction shouldForceServerObjectId(bulkOperation) {\n  var _bulkOperation$s$coll;\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n  if (typeof ((_bulkOperation$s$coll = bulkOperation.s.collection.s.db.options) === null || _bulkOperation$s$coll === void 0 ? void 0 : _bulkOperation$s$coll.forceServerObjectId) === 'boolean') {\n    var _bulkOperation$s$coll2;\n    return (_bulkOperation$s$coll2 = bulkOperation.s.collection.s.db.options) === null || _bulkOperation$s$coll2 === void 0 ? void 0 : _bulkOperation$s$coll2.forceServerObjectId;\n  }\n  return false;\n}\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n  var currentOp = bulkOp.s.currentOp;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":{"version":3,"names":["util_1","require","bson_1","error_1","delete_1","execute_operation_1","insert_1","operation_1","update_1","utils_1","write_concern_1","kServerError","Symbol","exports","BatchType","Object","freeze","INSERT","UPDATE","DELETE","Batch","_createClass","batchType","originalZeroIndex","_classCallCheck","currentIndex","originalIndexes","operations","size","sizeBytes","BulkWriteResult","bulkResult","_this$result$nInserte","_this$result$nMatched","_this$result$nModifie","_this$result$nRemoved","_this$result$upserted","result","insertedCount","nInserted","matchedCount","nMatched","modifiedCount","nModified","deletedCount","nRemoved","upsertedCount","upserted","length","upsertedIds","generateIdMap","insertedIds","defineProperty","value","enumerable","key","get","ok","getUpsertedIdAt","index","getRawResponse","hasWriteErrors","writeErrors","getWriteErrorCount","getWriteErrorAt","undefined","getWriteErrors","getWriteConcernError","writeConcernErrors","errmsg","i","err","WriteConcernError","code","MONGODB_ERROR_CODES","WriteConcernFailed","toString","concat","isOk","ids","idMap","_iterator","_createForOfIteratorHelper","_step","s","n","done","doc","_id","e","f","error","errInfo","toJSON","WriteError","getOperation","op","JSON","stringify","mergeBatchResults","batch","writeError","message","push","isInsertBatch","isDeleteBatch","nUpserted","Array","isArray","isUpdateBatch","writeConcernError","executeCommands","bulkOperation","options","callback","batches","shift","resultHandler","MongoWriteConcernError","MongoBulkWriteError","handleMongoWriteConcernError","writeResult","handleWriteError","finalOptions","resolveOptions","_objectSpread","ordered","isOrdered","bypassDocumentValidation","operationId","checkKeys","retryWrites","some","multi","limit","executeOperation","collection","client","InsertOperation","namespace","UpdateOperation","DeleteOperation","_err$result","_err$result2","_error_1$MongoServerE","_inherits","_super","_createSuper","_this","call","Error","_error$writeErrors","assign","_assertThisInitialized","MongoServerError","FindOperators","update","updateDocument","currentOp","buildCurrentOp","addToOperationsList","makeUpdateStatement","selector","updateOne","hasAtomicOperators","MongoInvalidArgumentError","replaceOne","replacement","deleteOne","makeDeleteStatement","_delete","upsert","collation","arrayFilters","hint","executeCommandsAsync","promisify","BulkWriteShimOperation","_operation_1$Abstract","_super2","_this2","execute","_server","session","AbstractOperation","BulkOperationBase","topology","getTopology","executed","hello","lastHello","usingAutoEncryption","autoEncrypter","maxBsonObjectSize","maxBatchSizeBytes","maxWriteBatchSize","maxKeySize","applyRetryableWrites","db","currentBatch","currentBatchSize","currentBatchSizeBytes","currentInsertBatch","currentUpdateBatch","currentRemoveBatch","writeConcern","WriteConcern","fromOptions","bsonOptions","resolveBSONOptions","insert","document","shouldForceServerObjectId","ObjectId","find","raw","forceServerObjectId","insertOne","updateStatement","filter","u","updateMany","deleteMany","_toConsumableArray","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","operation","_args","arguments","wrap","_callee$","_context","prev","next","MongoBatchReExecutionError","abrupt","stop","apply","msg","prototype","_bulkOperation$s$coll","_bulkOperation$s$coll2","bulkOp"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\bulk\\common.ts"],"sourcesContent":["import { promisify } from 'util';\n\nimport { type BSONSerializeOptions, type Document, ObjectId, resolveBSONOptions } from '../bson';\nimport type { Collection } from '../collection';\nimport {\n  type AnyError,\n  MongoBatchReExecutionError,\n  MONGODB_ERROR_CODES,\n  MongoInvalidArgumentError,\n  MongoServerError,\n  MongoWriteConcernError\n} from '../error';\nimport type { Filter, OneOrMore, OptionalId, UpdateFilter, WithoutId } from '../mongo_types';\nimport type { CollationOptions, CommandOperationOptions } from '../operations/command';\nimport { DeleteOperation, type DeleteStatement, makeDeleteStatement } from '../operations/delete';\nimport { executeOperation } from '../operations/execute_operation';\nimport { InsertOperation } from '../operations/insert';\nimport { AbstractOperation, type Hint } from '../operations/operation';\nimport { makeUpdateStatement, UpdateOperation, type UpdateStatement } from '../operations/update';\nimport type { Server } from '../sdam/server';\nimport type { Topology } from '../sdam/topology';\nimport type { ClientSession } from '../sessions';\nimport {\n  applyRetryableWrites,\n  type Callback,\n  getTopology,\n  hasAtomicOperators,\n  type MongoDBNamespace,\n  resolveOptions\n} from '../utils';\nimport { WriteConcern } from '../write_concern';\n\n/** @internal */\nconst kServerError = Symbol('serverError');\n\n/** @public */\nexport const BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n} as const);\n\n/** @public */\nexport type BatchType = (typeof BatchType)[keyof typeof BatchType];\n\n/** @public */\nexport interface InsertOneModel<TSchema extends Document = Document> {\n  /** The document to insert. */\n  document: OptionalId<TSchema>;\n}\n\n/** @public */\nexport interface DeleteOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface DeleteManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface ReplaceOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the replaced document. */\n  filter: Filter<TSchema>;\n  /** The document with which to replace the matched document. */\n  replacement: WithoutId<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport interface UpdateOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the updated documents. */\n  filter: Filter<TSchema>;\n  /** A document or pipeline containing update operators. */\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport interface UpdateManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the updated documents. */\n  filter: Filter<TSchema>;\n  /** A document or pipeline containing update operators. */\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport type AnyBulkWriteOperation<TSchema extends Document = Document> =\n  | { insertOne: InsertOneModel<TSchema> }\n  | { replaceOne: ReplaceOneModel<TSchema> }\n  | { updateOne: UpdateOneModel<TSchema> }\n  | { updateMany: UpdateManyModel<TSchema> }\n  | { deleteOne: DeleteOneModel<TSchema> }\n  | { deleteMany: DeleteManyModel<TSchema> };\n\n/** @internal */\nexport interface BulkResult {\n  ok: number;\n  writeErrors: WriteError[];\n  writeConcernErrors: WriteConcernError[];\n  insertedIds: Document[];\n  nInserted: number;\n  nUpserted: number;\n  nMatched: number;\n  nModified: number;\n  nRemoved: number;\n  upserted: Document[];\n}\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nexport class Batch<T = Document> {\n  originalZeroIndex: number;\n  currentIndex: number;\n  originalIndexes: number[];\n  batchType: BatchType;\n  operations: T[];\n  size: number;\n  sizeBytes: number;\n\n  constructor(batchType: BatchType, originalZeroIndex: number) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\n\n/**\n * @public\n * The result of a bulk write.\n */\nexport class BulkWriteResult {\n  private readonly result: BulkResult;\n  /** Number of documents inserted. */\n  readonly insertedCount: number;\n  /** Number of documents matched for update. */\n  readonly matchedCount: number;\n  /** Number of documents modified. */\n  readonly modifiedCount: number;\n  /** Number of documents deleted. */\n  readonly deletedCount: number;\n  /** Number of documents upserted. */\n  readonly upsertedCount: number;\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  readonly upsertedIds: { [key: number]: any };\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  readonly insertedIds: { [key: number]: any };\n\n  private static generateIdMap(ids: Document[]): { [key: number]: any } {\n    const idMap: { [index: number]: any } = {};\n    for (const doc of ids) {\n      idMap[doc.index] = doc._id;\n    }\n    return idMap;\n  }\n\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  constructor(bulkResult: BulkResult) {\n    this.result = bulkResult;\n    this.insertedCount = this.result.nInserted ?? 0;\n    this.matchedCount = this.result.nMatched ?? 0;\n    this.modifiedCount = this.result.nModified ?? 0;\n    this.deletedCount = this.result.nRemoved ?? 0;\n    this.upsertedCount = this.result.upserted.length ?? 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\n    Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n  }\n\n  /** Evaluates to true if the bulk operation correctly executes */\n  get ok(): number {\n    return this.result.ok;\n  }\n\n  /** Returns the upserted id at the given index */\n  getUpsertedIdAt(index: number): Document | undefined {\n    return this.result.upserted[index];\n  }\n\n  /** Returns raw internal result */\n  getRawResponse(): Document {\n    return this.result;\n  }\n\n  /** Returns true if the bulk operation contains a write error */\n  hasWriteErrors(): boolean {\n    return this.result.writeErrors.length > 0;\n  }\n\n  /** Returns the number of write errors off the bulk operation */\n  getWriteErrorCount(): number {\n    return this.result.writeErrors.length;\n  }\n\n  /** Returns a specific write error object */\n  getWriteErrorAt(index: number): WriteError | undefined {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n\n  /** Retrieve all write errors */\n  getWriteErrors(): WriteError[] {\n    return this.result.writeErrors;\n  }\n\n  /** Retrieve the write concern error if one exists */\n  getWriteConcernError(): WriteConcernError | undefined {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({ errmsg, code: MONGODB_ERROR_CODES.WriteConcernFailed });\n    }\n  }\n\n  toString(): string {\n    return `BulkWriteResult(${this.result})`;\n  }\n\n  isOk(): boolean {\n    return this.result.ok === 1;\n  }\n}\n\n/** @public */\nexport interface WriteConcernErrorData {\n  code: number;\n  errmsg: string;\n  errInfo?: Document;\n}\n\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nexport class WriteConcernError {\n  /** @internal */\n  [kServerError]: WriteConcernErrorData;\n\n  constructor(error: WriteConcernErrorData) {\n    this[kServerError] = error;\n  }\n\n  /** Write concern error code. */\n  get code(): number | undefined {\n    return this[kServerError].code;\n  }\n\n  /** Write concern error message. */\n  get errmsg(): string | undefined {\n    return this[kServerError].errmsg;\n  }\n\n  /** Write concern error info. */\n  get errInfo(): Document | undefined {\n    return this[kServerError].errInfo;\n  }\n\n  toJSON(): WriteConcernErrorData {\n    return this[kServerError];\n  }\n\n  toString(): string {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n}\n\n/** @public */\nexport interface BulkWriteOperationError {\n  index: number;\n  code: number;\n  errmsg: string;\n  errInfo: Document;\n  op: Document | UpdateStatement | DeleteStatement;\n}\n\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nexport class WriteError {\n  err: BulkWriteOperationError;\n\n  constructor(err: BulkWriteOperationError) {\n    this.err = err;\n  }\n\n  /** WriteError code. */\n  get code(): number {\n    return this.err.code;\n  }\n\n  /** WriteError original bulk operation index. */\n  get index(): number {\n    return this.err.index;\n  }\n\n  /** WriteError message. */\n  get errmsg(): string | undefined {\n    return this.err.errmsg;\n  }\n\n  /** WriteError details. */\n  get errInfo(): Document | undefined {\n    return this.err.errInfo;\n  }\n\n  /** Returns the underlying operation that caused the error */\n  getOperation(): Document {\n    return this.err.op;\n  }\n\n  toJSON(): { code: number; index: number; errmsg?: string; op: Document } {\n    return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n  }\n\n  toString(): string {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\n\n/** Merges results into shared data structure */\nexport function mergeBatchResults(\n  batch: Batch,\n  bulkResult: BulkResult,\n  err?: AnyError,\n  result?: Document\n): void {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  }\n\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nfunction executeCommands(\n  bulkOperation: BulkOperationBase,\n  options: BulkWriteOptions,\n  callback: Callback<BulkWriteResult>\n) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift() as Batch;\n\n  function resultHandler(err?: AnyError, result?: Document) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof MongoWriteConcernError)) {\n      return callback(\n        new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult))\n      );\n    }\n\n    if (err instanceof MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n\n    // Merge the results together\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  const finalOptions = resolveOptions(bulkOperation, {\n    ...options,\n    ordered: bulkOperation.isOrdered\n  });\n\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  }\n\n  // Set an operationIf if provided\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  // Is the checkKeys option disabled\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites =\n        finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n\n  try {\n    if (isInsertBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.client,\n        new InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    } else if (isUpdateBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.client,\n        new UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    } else if (isDeleteBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.client,\n        new DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\n\nfunction handleMongoWriteConcernError(\n  batch: Batch,\n  bulkResult: BulkResult,\n  err: MongoWriteConcernError,\n  callback: Callback<BulkWriteResult>\n) {\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n\n  callback(\n    new MongoBulkWriteError(\n      {\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n      },\n      new BulkWriteResult(bulkResult)\n    )\n  );\n}\n\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nexport class MongoBulkWriteError extends MongoServerError {\n  result: BulkWriteResult;\n  writeErrors: OneOrMore<WriteError> = [];\n  err?: WriteConcernError;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(\n    error:\n      | { message: string; code: number; writeErrors?: WriteError[] }\n      | WriteConcernError\n      | AnyError,\n    result: BulkWriteResult\n  ) {\n    super(error);\n\n    if (error instanceof WriteConcernError) this.err = error;\n    else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = error.writeErrors ?? [];\n    }\n\n    this.result = result;\n    Object.assign(this, error);\n  }\n\n  override get name(): string {\n    return 'MongoBulkWriteError';\n  }\n\n  /** Number of documents inserted. */\n  get insertedCount(): number {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount(): number {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n  get modifiedCount(): number {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n  get deletedCount(): number {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount(): number {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds(): { [key: number]: any } {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds(): { [key: number]: any } {\n    return this.result.upsertedIds;\n  }\n}\n\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nexport class FindOperators {\n  bulkOperation: BulkOperationBase;\n\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation: BulkOperationBase) {\n    this.bulkOperation = bulkOperation;\n  }\n\n  /** Add a multiple update operation to the bulk operation */\n  update(updateDocument: Document | Document[]): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, {\n        ...currentOp,\n        multi: true\n      })\n    );\n  }\n\n  /** Add a single update operation to the bulk operation */\n  updateOne(updateDocument: Document | Document[]): BulkOperationBase {\n    if (!hasAtomicOperators(updateDocument)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a replace one operation to the bulk operation */\n  replaceOne(replacement: Document): BulkOperationBase {\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, replacement, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a delete one operation to the bulk operation */\n  deleteOne(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 1 })\n    );\n  }\n\n  /** Add a delete many operation to the bulk operation */\n  delete(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 0 })\n    );\n  }\n\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  upsert(): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n\n  /** Specifies the collation for the query condition. */\n  collation(collation: CollationOptions): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  arrayFilters(arrayFilters: Document[]): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n\n  /** Specifies hint for the bulk operation. */\n  hint(hint: Hint): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.hint = hint;\n    return this;\n  }\n}\n\n/** @internal */\nexport interface BulkOperationPrivate {\n  bulkResult: BulkResult;\n  currentBatch?: Batch;\n  currentIndex: number;\n  // ordered specific\n  currentBatchSize: number;\n  currentBatchSizeBytes: number;\n  // unordered specific\n  currentInsertBatch?: Batch;\n  currentUpdateBatch?: Batch;\n  currentRemoveBatch?: Batch;\n  batches: Batch[];\n  // Write concern\n  writeConcern?: WriteConcern;\n  // Max batch size options\n  maxBsonObjectSize: number;\n  maxBatchSizeBytes: number;\n  maxWriteBatchSize: number;\n  maxKeySize: number;\n  // Namespace\n  namespace: MongoDBNamespace;\n  // Topology\n  topology: Topology;\n  // Options\n  options: BulkWriteOptions;\n  // BSON options\n  bsonOptions: BSONSerializeOptions;\n  // Document used to build a bulk operation\n  currentOp?: Document;\n  // Executed\n  executed: boolean;\n  // Collection\n  collection: Collection;\n  // Fundamental error\n  err?: AnyError;\n  // check keys\n  checkKeys: boolean;\n  bypassDocumentValidation?: boolean;\n}\n\n/** @public */\nexport interface BulkWriteOptions extends CommandOperationOptions {\n  /**\n   * Allow driver to bypass schema validation.\n   * @defaultValue `false` - documents will be validated by default\n   **/\n  bypassDocumentValidation?: boolean;\n  /**\n   * If true, when an insert fails, don't execute the remaining writes.\n   * If false, continue with remaining inserts when one fails.\n   * @defaultValue `true` - inserts are ordered by default\n   */\n  ordered?: boolean;\n  /**\n   * Force server to assign _id values instead of driver.\n   * @defaultValue `false` - the driver generates `_id` fields by default\n   **/\n  forceServerObjectId?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\nconst executeCommandsAsync = promisify(executeCommands);\n\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends AbstractOperation {\n  bulkOperation: BulkOperationBase;\n  constructor(bulkOperation: BulkOperationBase, options: BulkWriteOptions) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n\n  execute(_server: Server, session: ClientSession | undefined): Promise<any> {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n    return executeCommandsAsync(this.bulkOperation, this.options);\n  }\n}\n\n/** @public */\nexport abstract class BulkOperationBase {\n  isOrdered: boolean;\n  /** @internal */\n  s: BulkOperationPrivate;\n  operationId?: number;\n\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection: Collection, options: BulkWriteOptions, isOrdered: boolean) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n\n    const topology = getTopology(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n\n    // Current item\n    const currentOp = undefined;\n\n    // Set max byte size\n    const hello = topology.lastHello();\n\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize =\n      hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n\n    // Final options for retryable writes\n    let finalOptions = Object.assign({}, options);\n    finalOptions = applyRetryableWrites(finalOptions, collection.s.db);\n\n    // Final results\n    const bulkResult: BulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: resolveBSONOptions(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  insert(document: Document): BulkOperationBase {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new ObjectId();\n    }\n\n    return this.addToOperationsList(BatchType.INSERT, document);\n  }\n\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n  find(selector: Document): FindOperators {\n    if (!selector) {\n      throw new MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    }\n\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n\n    return new FindOperators(this);\n  }\n\n  /** Specifies a raw operation to perform in the bulk write. */\n  raw(op: AnyBulkWriteOperation): this {\n    if (op == null || typeof op !== 'object') {\n      throw new MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && (op.insertOne as Document)._id == null) {\n          (op.insertOne as Document)._id = new ObjectId();\n        }\n\n        return this.addToOperationsList(BatchType.INSERT, op.insertOne);\n      }\n\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new ObjectId();\n      }\n\n      return this.addToOperationsList(BatchType.INSERT, op.insertOne.document);\n    }\n\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(\n          op.replaceOne.filter,\n          op.replaceOne.replacement,\n          { ...op.replaceOne, multi: false }\n        );\n        if (hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateOne.filter, op.updateOne.update, {\n          ...op.updateOne,\n          multi: false\n        });\n        if (!hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateMany.filter, op.updateMany.update, {\n          ...op.updateMany,\n          multi: true\n        });\n        if (!hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n    }\n\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteOne.filter, { ...op.deleteOne, limit: 1 })\n      );\n    }\n\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteMany.filter, { ...op.deleteMany, limit: 0 })\n      );\n    }\n\n    // otherwise an unknown operation was provided\n    throw new MongoInvalidArgumentError(\n      'bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany'\n    );\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get batches(): Batch[] {\n    const batches = [...this.s.batches];\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n    return batches;\n  }\n\n  async execute(options: BulkWriteOptions = {}): Promise<BulkWriteResult> {\n    if (this.s.executed) {\n      throw new MongoBatchReExecutionError();\n    }\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    }\n\n    // If we have current batch\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    }\n    // If we have no operations in the bulk raise an error\n    if (this.s.batches.length === 0) {\n      throw new MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n    }\n\n    this.s.executed = true;\n    const finalOptions = { ...this.s.options, ...options };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n\n    return executeOperation(this.s.collection.client, operation);\n  }\n\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n  handleWriteError(callback: Callback<BulkWriteResult>, writeResult: BulkWriteResult): boolean {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg\n        ? this.s.bulkResult.writeErrors[0].errmsg\n        : 'write operation failed';\n\n      callback(\n        new MongoBulkWriteError(\n          {\n            message: msg,\n            code: this.s.bulkResult.writeErrors[0].code,\n            writeErrors: this.s.bulkResult.writeErrors\n          },\n          writeResult\n        )\n      );\n\n      return true;\n    }\n\n    const writeConcernError = writeResult.getWriteConcernError();\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n\n    return false;\n  }\n\n  abstract addToOperationsList(\n    batchType: BatchType,\n    document: Document | UpdateStatement | DeleteStatement\n  ): this;\n}\n\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get() {\n    return this.s.currentIndex;\n  }\n});\n\nfunction shouldForceServerObjectId(bulkOperation: BulkOperationBase): boolean {\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n  }\n\n  return false;\n}\n\nfunction isInsertBatch(batch: Batch): boolean {\n  return batch.batchType === BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch: Batch): batch is Batch<UpdateStatement> {\n  return batch.batchType === BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch: Batch): batch is Batch<DeleteStatement> {\n  return batch.batchType === BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp: BulkOperationBase): Document {\n  let { currentOp } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}