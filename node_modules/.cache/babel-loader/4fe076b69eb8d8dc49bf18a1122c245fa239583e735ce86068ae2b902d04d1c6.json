{"ast":null,"code":"'use strict';\n\nconst dargs = require('dargs');\nconst execa = require('execa');\nconst constants = require('./constants');\nconst args = (url, flags = {}) => [].concat(url, dargs(flags, {\n  useEquals: false\n})).filter(Boolean);\nconst isJSON = (str = '') => str.startsWith('{');\nconst parse = ({\n  stdout,\n  stderr,\n  ...details\n}) => {\n  if (stdout !== '' && stdout !== 'null') return isJSON(stdout) ? JSON.parse(stdout) : stdout;\n  throw Object.assign(new Error(stderr), {\n    stderr,\n    stdout\n  }, details);\n};\nconst create = binaryPath => {\n  const fn = (url, flags, opts) => fn.exec(url, flags, opts).then(parse).catch(parse);\n  fn.exec = (url, flags, opts) => execa(binaryPath, args(url, flags), opts);\n  return fn;\n};\nmodule.exports = create(constants.YOUTUBE_DL_PATH);\nmodule.exports.create = create;\nmodule.exports.args = args;\nmodule.exports.isJSON = isJSON;\nmodule.exports.constants = constants;","map":{"version":3,"names":["dargs","require","execa","constants","args","url","flags","concat","useEquals","filter","Boolean","isJSON","str","startsWith","parse","stdout","stderr","details","JSON","Object","assign","Error","create","binaryPath","fn","opts","exec","then","catch","module","exports","YOUTUBE_DL_PATH"],"sources":["C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/youtube-dl-exec/src/index.js"],"sourcesContent":["'use strict'\n\nconst dargs = require('dargs')\nconst execa = require('execa')\n\nconst constants = require('./constants')\n\nconst args = (url, flags = {}) =>\n  [].concat(url, dargs(flags, { useEquals: false })).filter(Boolean)\n\nconst isJSON = (str = '') => str.startsWith('{')\n\nconst parse = ({ stdout, stderr, ...details }) => {\n  if (stdout !== '' && stdout !== 'null') return isJSON(stdout) ? JSON.parse(stdout) : stdout\n  throw Object.assign(new Error(stderr), { stderr, stdout }, details)\n}\n\nconst create = binaryPath => {\n  const fn = (url, flags, opts) =>\n    fn.exec(url, flags, opts).then(parse).catch(parse)\n  fn.exec = (url, flags, opts) => execa(binaryPath, args(url, flags), opts)\n  return fn\n}\n\nmodule.exports = create(constants.YOUTUBE_DL_PATH)\nmodule.exports.create = create\nmodule.exports.args = args\nmodule.exports.isJSON = isJSON\nmodule.exports.constants = constants\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAME,SAAS,GAAGF,OAAO,CAAC,aAAa,CAAC;AAExC,MAAMG,IAAI,GAAGA,CAACC,GAAG,EAAEC,KAAK,GAAG,CAAC,CAAC,KAC3B,EAAE,CAACC,MAAM,CAACF,GAAG,EAAEL,KAAK,CAACM,KAAK,EAAE;EAAEE,SAAS,EAAE;AAAM,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;AAEpE,MAAMC,MAAM,GAAGA,CAACC,GAAG,GAAG,EAAE,KAAKA,GAAG,CAACC,UAAU,CAAC,GAAG,CAAC;AAEhD,MAAMC,KAAK,GAAGA,CAAC;EAAEC,MAAM;EAAEC,MAAM;EAAE,GAAGC;AAAQ,CAAC,KAAK;EAChD,IAAIF,MAAM,KAAK,EAAE,IAAIA,MAAM,KAAK,MAAM,EAAE,OAAOJ,MAAM,CAACI,MAAM,CAAC,GAAGG,IAAI,CAACJ,KAAK,CAACC,MAAM,CAAC,GAAGA,MAAM;EAC3F,MAAMI,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAACL,MAAM,CAAC,EAAE;IAAEA,MAAM;IAAED;EAAO,CAAC,EAAEE,OAAO,CAAC;AACrE,CAAC;AAED,MAAMK,MAAM,GAAGC,UAAU,IAAI;EAC3B,MAAMC,EAAE,GAAGA,CAACnB,GAAG,EAAEC,KAAK,EAAEmB,IAAI,KAC1BD,EAAE,CAACE,IAAI,CAACrB,GAAG,EAAEC,KAAK,EAAEmB,IAAI,CAAC,CAACE,IAAI,CAACb,KAAK,CAAC,CAACc,KAAK,CAACd,KAAK,CAAC;EACpDU,EAAE,CAACE,IAAI,GAAG,CAACrB,GAAG,EAAEC,KAAK,EAAEmB,IAAI,KAAKvB,KAAK,CAACqB,UAAU,EAAEnB,IAAI,CAACC,GAAG,EAAEC,KAAK,CAAC,EAAEmB,IAAI,CAAC;EACzE,OAAOD,EAAE;AACX,CAAC;AAEDK,MAAM,CAACC,OAAO,GAAGR,MAAM,CAACnB,SAAS,CAAC4B,eAAe,CAAC;AAClDF,MAAM,CAACC,OAAO,CAACR,MAAM,GAAGA,MAAM;AAC9BO,MAAM,CAACC,OAAO,CAAC1B,IAAI,GAAGA,IAAI;AAC1ByB,MAAM,CAACC,OAAO,CAACnB,MAAM,GAAGA,MAAM;AAC9BkB,MAAM,CAACC,OAAO,CAAC3B,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}