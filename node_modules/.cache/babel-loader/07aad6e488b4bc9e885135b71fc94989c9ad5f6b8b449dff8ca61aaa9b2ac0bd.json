{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CountDocumentsOperation = void 0;\nvar aggregate_1 = require(\"./aggregate\");\n/** @internal */\nvar CountDocumentsOperation = /*#__PURE__*/function (_aggregate_1$Aggregat) {\n  _inherits(CountDocumentsOperation, _aggregate_1$Aggregat);\n  var _super = _createSuper(CountDocumentsOperation);\n  function CountDocumentsOperation(collection, query, options) {\n    _classCallCheck(this, CountDocumentsOperation);\n    var pipeline = [];\n    pipeline.push({\n      $match: query\n    });\n    if (typeof options.skip === 'number') {\n      pipeline.push({\n        $skip: options.skip\n      });\n    }\n    if (typeof options.limit === 'number') {\n      pipeline.push({\n        $limit: options.limit\n      });\n    }\n    pipeline.push({\n      $group: {\n        _id: 1,\n        n: {\n          $sum: 1\n        }\n      }\n    });\n    return _super.call(this, collection.s.namespace, pipeline, options);\n  }\n  _createClass(CountDocumentsOperation, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(server, session) {\n        var result, response, docs;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _get(_getPrototypeOf(CountDocumentsOperation.prototype), \"execute\", this).call(this, server, session);\n            case 2:\n              result = _context.sent;\n              // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n              response = result;\n              if (!(response.cursor == null || response.cursor.firstBatch == null)) {\n                _context.next = 6;\n                break;\n              }\n              return _context.abrupt(\"return\", 0);\n            case 6:\n              docs = response.cursor.firstBatch;\n              return _context.abrupt(\"return\", docs.length ? docs[0].n : 0);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function execute(_x, _x2) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return CountDocumentsOperation;\n}(aggregate_1.AggregateOperation);\nexports.CountDocumentsOperation = CountDocumentsOperation;","map":{"version":3,"names":["aggregate_1","require","CountDocumentsOperation","_aggregate_1$Aggregat","_inherits","_super","_createSuper","collection","query","options","_classCallCheck","pipeline","push","$match","skip","$skip","limit","$limit","$group","_id","n","$sum","call","s","namespace","_createClass","key","value","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","server","session","result","response","docs","wrap","_callee$","_context","prev","next","_get","_getPrototypeOf","prototype","sent","cursor","firstBatch","abrupt","length","stop","execute","_x","_x2","apply","arguments","AggregateOperation","exports"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\operations\\count_documents.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { AggregateOperation, type AggregateOptions } from './aggregate';\n\n/** @public */\nexport interface CountDocumentsOptions extends AggregateOptions {\n  /** The number of documents to skip. */\n  skip?: number;\n  /** The maximum amounts to count before aborting. */\n  limit?: number;\n}\n\n/** @internal */\nexport class CountDocumentsOperation extends AggregateOperation<number> {\n  constructor(collection: Collection, query: Document, options: CountDocumentsOptions) {\n    const pipeline = [];\n    pipeline.push({ $match: query });\n\n    if (typeof options.skip === 'number') {\n      pipeline.push({ $skip: options.skip });\n    }\n\n    if (typeof options.limit === 'number') {\n      pipeline.push({ $limit: options.limit });\n    }\n\n    pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });\n\n    super(collection.s.namespace, pipeline, options);\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<number> {\n    const result = await super.execute(server, session);\n\n    // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n    const response = result as unknown as Document;\n    if (response.cursor == null || response.cursor.firstBatch == null) {\n      return 0;\n    }\n\n    const docs = response.cursor.firstBatch;\n    return docs.length ? docs[0].n : 0;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;AAIA,IAAAA,WAAA,GAAAC,OAAA;AAUA;AAAA,IACaC,uBAAwB,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,uBAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,uBAAA;EACnC,SAAAA,wBAAYK,UAAsB,EAAEC,KAAe,EAAEC,OAA8B;IAAAC,eAAA,OAAAR,uBAAA;IACjF,IAAMS,QAAQ,GAAG,EAAE;IACnBA,QAAQ,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEL;IAAK,CAAE,CAAC;IAEhC,IAAI,OAAOC,OAAO,CAACK,IAAI,KAAK,QAAQ,EAAE;MACpCH,QAAQ,CAACC,IAAI,CAAC;QAAEG,KAAK,EAAEN,OAAO,CAACK;MAAI,CAAE,CAAC;;IAGxC,IAAI,OAAOL,OAAO,CAACO,KAAK,KAAK,QAAQ,EAAE;MACrCL,QAAQ,CAACC,IAAI,CAAC;QAAEK,MAAM,EAAER,OAAO,CAACO;MAAK,CAAE,CAAC;;IAG1CL,QAAQ,CAACC,IAAI,CAAC;MAAEM,MAAM,EAAE;QAAEC,GAAG,EAAE,CAAC;QAAEC,CAAC,EAAE;UAAEC,IAAI,EAAE;QAAC;MAAE;IAAE,CAAE,CAAC;IAAC,OAAAhB,MAAA,CAAAiB,IAAA,OAEhDf,UAAU,CAACgB,CAAC,CAACC,SAAS,EAAEb,QAAQ,EAAEF,OAAO;EACjD;EAACgB,YAAA,CAAAvB,uBAAA;IAAAwB,GAAA;IAAAC,KAAA;MAAA,IAAAC,QAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAEQ,SAAAC,QAAcC,MAAc,EAAEC,OAAkC;QAAA,IAAAC,MAAA,EAAAC,QAAA,EAAAC,IAAA;QAAA,OAAAP,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OAAAC,IAAA,CAAAC,eAAA,CAAA1C,uBAAA,CAAA2C,SAAA,oBAAAvB,IAAA,OACpCW,MAAM,EAAEC,OAAO;YAAA;cAA5CC,MAAM,GAAAK,QAAA,CAAAM,IAAA;cAEZ;cACMV,QAAQ,GAAGD,MAA6B;cAAA,MAC1CC,QAAQ,CAACW,MAAM,IAAI,IAAI,IAAIX,QAAQ,CAACW,MAAM,CAACC,UAAU,IAAI,IAAI;gBAAAR,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAS,MAAA,WACxD,CAAC;YAAA;cAGJZ,IAAI,GAAGD,QAAQ,CAACW,MAAM,CAACC,UAAU;cAAA,OAAAR,QAAA,CAAAS,MAAA,WAChCZ,IAAI,CAACa,MAAM,GAAGb,IAAI,CAAC,CAAC,CAAC,CAACjB,CAAC,GAAG,CAAC;YAAA;YAAA;cAAA,OAAAoB,QAAA,CAAAW,IAAA;UAAA;QAAA,GAAAnB,OAAA;MAAA,CACnC;MAAA,SAAAoB,QAAAC,EAAA,EAAAC,GAAA;QAAA,OAAA1B,QAAA,CAAA2B,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,OAAA;IAAA;EAAA;EAAA,OAAAlD,uBAAA;AAAA,EA7B0CF,WAAA,CAAAyD,kBAA0B;AAAvEC,OAAA,CAAAxD,uBAAA,GAAAA,uBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}