{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst delete_1 = require(\"../operations/delete\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst insert_1 = require(\"../operations/insert\");\nconst operation_1 = require(\"../operations/operation\");\nconst update_1 = require(\"../operations/update\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\n/** @internal */\nconst kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n  constructor(batchType, originalZeroIndex) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n  static generateIdMap(ids) {\n    const idMap = {};\n    for (const doc of ids) {\n      idMap[doc.index] = doc._id;\n    }\n    return idMap;\n  }\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  constructor(bulkResult) {\n    this.result = bulkResult;\n    this.insertedCount = this.result.nInserted ?? 0;\n    this.matchedCount = this.result.nMatched ?? 0;\n    this.modifiedCount = this.result.nModified ?? 0;\n    this.deletedCount = this.result.nRemoved ?? 0;\n    this.upsertedCount = this.result.upserted.length ?? 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\n    Object.defineProperty(this, 'result', {\n      value: this.result,\n      enumerable: false\n    });\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n  get ok() {\n    return this.result.ok;\n  }\n  /** Returns the upserted id at the given index */\n  getUpsertedIdAt(index) {\n    return this.result.upserted[index];\n  }\n  /** Returns raw internal result */\n  getRawResponse() {\n    return this.result;\n  }\n  /** Returns true if the bulk operation contains a write error */\n  hasWriteErrors() {\n    return this.result.writeErrors.length > 0;\n  }\n  /** Returns the number of write errors off the bulk operation */\n  getWriteErrorCount() {\n    return this.result.writeErrors.length;\n  }\n  /** Returns a specific write error object */\n  getWriteErrorAt(index) {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n  /** Retrieve all write errors */\n  getWriteErrors() {\n    return this.result.writeErrors;\n  }\n  /** Retrieve the write concern error if one exists */\n  getWriteConcernError() {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n      return new WriteConcernError({\n        errmsg,\n        code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n      });\n    }\n  }\n  toString() {\n    return `BulkWriteResult(${this.result})`;\n  }\n  isOk() {\n    return this.result.ok === 1;\n  }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n  constructor(error) {\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n  get code() {\n    return this[kServerError].code;\n  }\n  /** Write concern error message. */\n  get errmsg() {\n    return this[kServerError].errmsg;\n  }\n  /** Write concern error info. */\n  get errInfo() {\n    return this[kServerError].errInfo;\n  }\n  toJSON() {\n    return this[kServerError];\n  }\n  toString() {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n  constructor(err) {\n    this.err = err;\n  }\n  /** WriteError code. */\n  get code() {\n    return this.err.code;\n  }\n  /** WriteError original bulk operation index. */\n  get index() {\n    return this.err.index;\n  }\n  /** WriteError message. */\n  get errmsg() {\n    return this.err.errmsg;\n  }\n  /** WriteError details. */\n  get errInfo() {\n    return this.err.errInfo;\n  }\n  /** Returns the underlying operation that caused the error */\n  getOperation() {\n    return this.err.op;\n  }\n  toJSON() {\n    return {\n      code: this.err.code,\n      index: this.err.index,\n      errmsg: this.err.errmsg,\n      op: this.err.op\n    };\n  }\n  toString() {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n  if (result == null) {\n    return;\n  }\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n  let nUpserted = 0;\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n  const batch = bulkOperation.s.batches.shift();\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n    }\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n    // Merge the results together\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n  const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n    ...options,\n    ordered: bulkOperation.isOrdered\n  });\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  }\n  // Set an operationIf if provided\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  }\n  // Is the bypassDocumentValidation options specific\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n  // Is the checkKeys option disabled\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: err.result?.writeConcernError.errmsg,\n    code: err.result?.writeConcernError.result\n  }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(error, result) {\n    super(error);\n    this.writeErrors = [];\n    if (error instanceof WriteConcernError) this.err = error;else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = error.writeErrors ?? [];\n    }\n    this.result = result;\n    Object.assign(this, error);\n  }\n  get name() {\n    return 'MongoBulkWriteError';\n  }\n  /** Number of documents inserted. */\n  get insertedCount() {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount() {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n  get modifiedCount() {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n  get deletedCount() {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount() {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds() {\n    return this.result.upsertedIds;\n  }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation) {\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n  update(updateDocument) {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n      ...currentOp,\n      multi: true\n    }));\n  }\n  /** Add a single update operation to the bulk operation */\n  updateOne(updateDocument) {\n    if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n      ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a replace one operation to the bulk operation */\n  replaceOne(replacement) {\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, {\n      ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a delete one operation to the bulk operation */\n  deleteOne() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n      ...currentOp,\n      limit: 1\n    }));\n  }\n  /** Add a delete many operation to the bulk operation */\n  delete() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n      ...currentOp,\n      limit: 0\n    }));\n  }\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  upsert() {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n  /** Specifies the collation for the query condition. */\n  collation(collation) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  arrayFilters(arrayFilters) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n  /** Specifies hint for the bulk operation. */\n  hint(hint) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.hint = hint;\n    return this;\n  }\n}\nexports.FindOperators = FindOperators;\nconst executeCommandsAsync = (0, util_1.promisify)(executeCommands);\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n  constructor(bulkOperation, options) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n  execute(_server, session) {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n    return executeCommandsAsync(this.bulkOperation, this.options);\n  }\n}\n/** @public */\nclass BulkOperationBase {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection, options, isOrdered) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    const topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n    // Current item\n    const currentOp = undefined;\n    // Set max byte size\n    const hello = topology.lastHello();\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n    // Final options for retryable writes\n    let finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n    // Final results\n    const bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  insert(document) {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new bson_1.ObjectId();\n    }\n    return this.addToOperationsList(exports.BatchType.INSERT, document);\n  }\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n  find(selector) {\n    if (!selector) {\n      throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    }\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n    return new FindOperators(this);\n  }\n  /** Specifies a raw operation to perform in the bulk write. */\n  raw(op) {\n    if (op == null || typeof op !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && op.insertOne._id == null) {\n          op.insertOne._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n      }\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new bson_1.ObjectId();\n      }\n      return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n    }\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, {\n          ...op.replaceOne,\n          multi: false\n        });\n        if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n          ...op.updateOne,\n          multi: false\n        });\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n          ...op.updateMany,\n          multi: true\n        });\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n    }\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, {\n        ...op.deleteOne,\n        limit: 1\n      }));\n    }\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, {\n        ...op.deleteMany,\n        limit: 0\n      }));\n    }\n    // otherwise an unknown operation was provided\n    throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get batches() {\n    const batches = [...this.s.batches];\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n    return batches;\n  }\n  async execute(options = {}) {\n    if (this.s.executed) {\n      throw new error_1.MongoBatchReExecutionError();\n    }\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    }\n    // If we have current batch\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    }\n    // If we have no operations in the bulk raise an error\n    if (this.s.batches.length === 0) {\n      throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n    }\n    this.s.executed = true;\n    const finalOptions = {\n      ...this.s.options,\n      ...options\n    };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n    return (0, execute_operation_1.executeOperation)(this.s.collection.client, operation);\n  }\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n  handleWriteError(callback, writeResult) {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n      callback(new MongoBulkWriteError({\n        message: msg,\n        code: this.s.bulkResult.writeErrors[0].code,\n        writeErrors: this.s.bulkResult.writeErrors\n      }, writeResult));\n      return true;\n    }\n    const writeConcernError = writeResult.getWriteConcernError();\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n    return false;\n  }\n}\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get() {\n    return this.s.currentIndex;\n  }\n});\nfunction shouldForceServerObjectId(bulkOperation) {\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n  }\n  return false;\n}\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n  let {\n    currentOp\n  } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":{"version":3,"names":["util_1","require","bson_1","error_1","delete_1","execute_operation_1","insert_1","operation_1","update_1","utils_1","write_concern_1","kServerError","Symbol","exports","BatchType","Object","freeze","INSERT","UPDATE","DELETE","Batch","constructor","batchType","originalZeroIndex","currentIndex","originalIndexes","operations","size","sizeBytes","BulkWriteResult","generateIdMap","ids","idMap","doc","index","_id","bulkResult","result","insertedCount","nInserted","matchedCount","nMatched","modifiedCount","nModified","deletedCount","nRemoved","upsertedCount","upserted","length","upsertedIds","insertedIds","defineProperty","value","enumerable","ok","getUpsertedIdAt","getRawResponse","hasWriteErrors","writeErrors","getWriteErrorCount","getWriteErrorAt","undefined","getWriteErrors","getWriteConcernError","writeConcernErrors","errmsg","i","err","WriteConcernError","code","MONGODB_ERROR_CODES","WriteConcernFailed","toString","isOk","error","errInfo","toJSON","WriteError","getOperation","op","JSON","stringify","mergeBatchResults","batch","writeError","message","push","isInsertBatch","n","isDeleteBatch","nUpserted","Array","isArray","isUpdateBatch","writeConcernError","executeCommands","bulkOperation","options","callback","s","batches","shift","resultHandler","MongoWriteConcernError","MongoBulkWriteError","handleMongoWriteConcernError","writeResult","handleWriteError","finalOptions","resolveOptions","ordered","isOrdered","bypassDocumentValidation","operationId","checkKeys","retryWrites","some","multi","limit","executeOperation","collection","client","InsertOperation","namespace","UpdateOperation","DeleteOperation","MongoServerError","Error","assign","name","FindOperators","update","updateDocument","currentOp","buildCurrentOp","addToOperationsList","makeUpdateStatement","selector","updateOne","hasAtomicOperators","MongoInvalidArgumentError","replaceOne","replacement","deleteOne","makeDeleteStatement","delete","upsert","collation","arrayFilters","hint","executeCommandsAsync","promisify","BulkWriteShimOperation","AbstractOperation","execute","_server","session","BulkOperationBase","topology","getTopology","executed","hello","lastHello","usingAutoEncryption","autoEncrypter","maxBsonObjectSize","maxBatchSizeBytes","maxWriteBatchSize","maxKeySize","applyRetryableWrites","db","currentBatch","currentBatchSize","currentBatchSizeBytes","currentInsertBatch","currentUpdateBatch","currentRemoveBatch","writeConcern","WriteConcern","fromOptions","bsonOptions","resolveBSONOptions","insert","document","shouldForceServerObjectId","ObjectId","find","raw","forceServerObjectId","insertOne","updateStatement","filter","u","updateMany","deleteMany","MongoBatchReExecutionError","operation","msg","prototype","get","bulkOp"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\bulk\\common.ts"],"sourcesContent":["import { promisify } from 'util';\n\nimport { type BSONSerializeOptions, type Document, ObjectId, resolveBSONOptions } from '../bson';\nimport type { Collection } from '../collection';\nimport {\n  type AnyError,\n  MongoBatchReExecutionError,\n  MONGODB_ERROR_CODES,\n  MongoInvalidArgumentError,\n  MongoServerError,\n  MongoWriteConcernError\n} from '../error';\nimport type { Filter, OneOrMore, OptionalId, UpdateFilter, WithoutId } from '../mongo_types';\nimport type { CollationOptions, CommandOperationOptions } from '../operations/command';\nimport { DeleteOperation, type DeleteStatement, makeDeleteStatement } from '../operations/delete';\nimport { executeOperation } from '../operations/execute_operation';\nimport { InsertOperation } from '../operations/insert';\nimport { AbstractOperation, type Hint } from '../operations/operation';\nimport { makeUpdateStatement, UpdateOperation, type UpdateStatement } from '../operations/update';\nimport type { Server } from '../sdam/server';\nimport type { Topology } from '../sdam/topology';\nimport type { ClientSession } from '../sessions';\nimport {\n  applyRetryableWrites,\n  type Callback,\n  getTopology,\n  hasAtomicOperators,\n  type MongoDBNamespace,\n  resolveOptions\n} from '../utils';\nimport { WriteConcern } from '../write_concern';\n\n/** @internal */\nconst kServerError = Symbol('serverError');\n\n/** @public */\nexport const BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n} as const);\n\n/** @public */\nexport type BatchType = (typeof BatchType)[keyof typeof BatchType];\n\n/** @public */\nexport interface InsertOneModel<TSchema extends Document = Document> {\n  /** The document to insert. */\n  document: OptionalId<TSchema>;\n}\n\n/** @public */\nexport interface DeleteOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface DeleteManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface ReplaceOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the replaced document. */\n  filter: Filter<TSchema>;\n  /** The document with which to replace the matched document. */\n  replacement: WithoutId<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport interface UpdateOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the updated documents. */\n  filter: Filter<TSchema>;\n  /** A document or pipeline containing update operators. */\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport interface UpdateManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the updated documents. */\n  filter: Filter<TSchema>;\n  /** A document or pipeline containing update operators. */\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport type AnyBulkWriteOperation<TSchema extends Document = Document> =\n  | { insertOne: InsertOneModel<TSchema> }\n  | { replaceOne: ReplaceOneModel<TSchema> }\n  | { updateOne: UpdateOneModel<TSchema> }\n  | { updateMany: UpdateManyModel<TSchema> }\n  | { deleteOne: DeleteOneModel<TSchema> }\n  | { deleteMany: DeleteManyModel<TSchema> };\n\n/** @internal */\nexport interface BulkResult {\n  ok: number;\n  writeErrors: WriteError[];\n  writeConcernErrors: WriteConcernError[];\n  insertedIds: Document[];\n  nInserted: number;\n  nUpserted: number;\n  nMatched: number;\n  nModified: number;\n  nRemoved: number;\n  upserted: Document[];\n}\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nexport class Batch<T = Document> {\n  originalZeroIndex: number;\n  currentIndex: number;\n  originalIndexes: number[];\n  batchType: BatchType;\n  operations: T[];\n  size: number;\n  sizeBytes: number;\n\n  constructor(batchType: BatchType, originalZeroIndex: number) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\n\n/**\n * @public\n * The result of a bulk write.\n */\nexport class BulkWriteResult {\n  private readonly result: BulkResult;\n  /** Number of documents inserted. */\n  readonly insertedCount: number;\n  /** Number of documents matched for update. */\n  readonly matchedCount: number;\n  /** Number of documents modified. */\n  readonly modifiedCount: number;\n  /** Number of documents deleted. */\n  readonly deletedCount: number;\n  /** Number of documents upserted. */\n  readonly upsertedCount: number;\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  readonly upsertedIds: { [key: number]: any };\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  readonly insertedIds: { [key: number]: any };\n\n  private static generateIdMap(ids: Document[]): { [key: number]: any } {\n    const idMap: { [index: number]: any } = {};\n    for (const doc of ids) {\n      idMap[doc.index] = doc._id;\n    }\n    return idMap;\n  }\n\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  constructor(bulkResult: BulkResult) {\n    this.result = bulkResult;\n    this.insertedCount = this.result.nInserted ?? 0;\n    this.matchedCount = this.result.nMatched ?? 0;\n    this.modifiedCount = this.result.nModified ?? 0;\n    this.deletedCount = this.result.nRemoved ?? 0;\n    this.upsertedCount = this.result.upserted.length ?? 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\n    Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n  }\n\n  /** Evaluates to true if the bulk operation correctly executes */\n  get ok(): number {\n    return this.result.ok;\n  }\n\n  /** Returns the upserted id at the given index */\n  getUpsertedIdAt(index: number): Document | undefined {\n    return this.result.upserted[index];\n  }\n\n  /** Returns raw internal result */\n  getRawResponse(): Document {\n    return this.result;\n  }\n\n  /** Returns true if the bulk operation contains a write error */\n  hasWriteErrors(): boolean {\n    return this.result.writeErrors.length > 0;\n  }\n\n  /** Returns the number of write errors off the bulk operation */\n  getWriteErrorCount(): number {\n    return this.result.writeErrors.length;\n  }\n\n  /** Returns a specific write error object */\n  getWriteErrorAt(index: number): WriteError | undefined {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n\n  /** Retrieve all write errors */\n  getWriteErrors(): WriteError[] {\n    return this.result.writeErrors;\n  }\n\n  /** Retrieve the write concern error if one exists */\n  getWriteConcernError(): WriteConcernError | undefined {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({ errmsg, code: MONGODB_ERROR_CODES.WriteConcernFailed });\n    }\n  }\n\n  toString(): string {\n    return `BulkWriteResult(${this.result})`;\n  }\n\n  isOk(): boolean {\n    return this.result.ok === 1;\n  }\n}\n\n/** @public */\nexport interface WriteConcernErrorData {\n  code: number;\n  errmsg: string;\n  errInfo?: Document;\n}\n\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nexport class WriteConcernError {\n  /** @internal */\n  [kServerError]: WriteConcernErrorData;\n\n  constructor(error: WriteConcernErrorData) {\n    this[kServerError] = error;\n  }\n\n  /** Write concern error code. */\n  get code(): number | undefined {\n    return this[kServerError].code;\n  }\n\n  /** Write concern error message. */\n  get errmsg(): string | undefined {\n    return this[kServerError].errmsg;\n  }\n\n  /** Write concern error info. */\n  get errInfo(): Document | undefined {\n    return this[kServerError].errInfo;\n  }\n\n  toJSON(): WriteConcernErrorData {\n    return this[kServerError];\n  }\n\n  toString(): string {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n}\n\n/** @public */\nexport interface BulkWriteOperationError {\n  index: number;\n  code: number;\n  errmsg: string;\n  errInfo: Document;\n  op: Document | UpdateStatement | DeleteStatement;\n}\n\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nexport class WriteError {\n  err: BulkWriteOperationError;\n\n  constructor(err: BulkWriteOperationError) {\n    this.err = err;\n  }\n\n  /** WriteError code. */\n  get code(): number {\n    return this.err.code;\n  }\n\n  /** WriteError original bulk operation index. */\n  get index(): number {\n    return this.err.index;\n  }\n\n  /** WriteError message. */\n  get errmsg(): string | undefined {\n    return this.err.errmsg;\n  }\n\n  /** WriteError details. */\n  get errInfo(): Document | undefined {\n    return this.err.errInfo;\n  }\n\n  /** Returns the underlying operation that caused the error */\n  getOperation(): Document {\n    return this.err.op;\n  }\n\n  toJSON(): { code: number; index: number; errmsg?: string; op: Document } {\n    return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n  }\n\n  toString(): string {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\n\n/** Merges results into shared data structure */\nexport function mergeBatchResults(\n  batch: Batch,\n  bulkResult: BulkResult,\n  err?: AnyError,\n  result?: Document\n): void {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  }\n\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nfunction executeCommands(\n  bulkOperation: BulkOperationBase,\n  options: BulkWriteOptions,\n  callback: Callback<BulkWriteResult>\n) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift() as Batch;\n\n  function resultHandler(err?: AnyError, result?: Document) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof MongoWriteConcernError)) {\n      return callback(\n        new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult))\n      );\n    }\n\n    if (err instanceof MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n\n    // Merge the results together\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  const finalOptions = resolveOptions(bulkOperation, {\n    ...options,\n    ordered: bulkOperation.isOrdered\n  });\n\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  }\n\n  // Set an operationIf if provided\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  // Is the checkKeys option disabled\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites =\n        finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n\n  try {\n    if (isInsertBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.client,\n        new InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    } else if (isUpdateBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.client,\n        new UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    } else if (isDeleteBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.client,\n        new DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\n\nfunction handleMongoWriteConcernError(\n  batch: Batch,\n  bulkResult: BulkResult,\n  err: MongoWriteConcernError,\n  callback: Callback<BulkWriteResult>\n) {\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n\n  callback(\n    new MongoBulkWriteError(\n      {\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n      },\n      new BulkWriteResult(bulkResult)\n    )\n  );\n}\n\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nexport class MongoBulkWriteError extends MongoServerError {\n  result: BulkWriteResult;\n  writeErrors: OneOrMore<WriteError> = [];\n  err?: WriteConcernError;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(\n    error:\n      | { message: string; code: number; writeErrors?: WriteError[] }\n      | WriteConcernError\n      | AnyError,\n    result: BulkWriteResult\n  ) {\n    super(error);\n\n    if (error instanceof WriteConcernError) this.err = error;\n    else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = error.writeErrors ?? [];\n    }\n\n    this.result = result;\n    Object.assign(this, error);\n  }\n\n  override get name(): string {\n    return 'MongoBulkWriteError';\n  }\n\n  /** Number of documents inserted. */\n  get insertedCount(): number {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount(): number {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n  get modifiedCount(): number {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n  get deletedCount(): number {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount(): number {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds(): { [key: number]: any } {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds(): { [key: number]: any } {\n    return this.result.upsertedIds;\n  }\n}\n\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nexport class FindOperators {\n  bulkOperation: BulkOperationBase;\n\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation: BulkOperationBase) {\n    this.bulkOperation = bulkOperation;\n  }\n\n  /** Add a multiple update operation to the bulk operation */\n  update(updateDocument: Document | Document[]): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, {\n        ...currentOp,\n        multi: true\n      })\n    );\n  }\n\n  /** Add a single update operation to the bulk operation */\n  updateOne(updateDocument: Document | Document[]): BulkOperationBase {\n    if (!hasAtomicOperators(updateDocument)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a replace one operation to the bulk operation */\n  replaceOne(replacement: Document): BulkOperationBase {\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, replacement, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a delete one operation to the bulk operation */\n  deleteOne(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 1 })\n    );\n  }\n\n  /** Add a delete many operation to the bulk operation */\n  delete(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 0 })\n    );\n  }\n\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  upsert(): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n\n  /** Specifies the collation for the query condition. */\n  collation(collation: CollationOptions): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  arrayFilters(arrayFilters: Document[]): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n\n  /** Specifies hint for the bulk operation. */\n  hint(hint: Hint): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.hint = hint;\n    return this;\n  }\n}\n\n/** @internal */\nexport interface BulkOperationPrivate {\n  bulkResult: BulkResult;\n  currentBatch?: Batch;\n  currentIndex: number;\n  // ordered specific\n  currentBatchSize: number;\n  currentBatchSizeBytes: number;\n  // unordered specific\n  currentInsertBatch?: Batch;\n  currentUpdateBatch?: Batch;\n  currentRemoveBatch?: Batch;\n  batches: Batch[];\n  // Write concern\n  writeConcern?: WriteConcern;\n  // Max batch size options\n  maxBsonObjectSize: number;\n  maxBatchSizeBytes: number;\n  maxWriteBatchSize: number;\n  maxKeySize: number;\n  // Namespace\n  namespace: MongoDBNamespace;\n  // Topology\n  topology: Topology;\n  // Options\n  options: BulkWriteOptions;\n  // BSON options\n  bsonOptions: BSONSerializeOptions;\n  // Document used to build a bulk operation\n  currentOp?: Document;\n  // Executed\n  executed: boolean;\n  // Collection\n  collection: Collection;\n  // Fundamental error\n  err?: AnyError;\n  // check keys\n  checkKeys: boolean;\n  bypassDocumentValidation?: boolean;\n}\n\n/** @public */\nexport interface BulkWriteOptions extends CommandOperationOptions {\n  /**\n   * Allow driver to bypass schema validation.\n   * @defaultValue `false` - documents will be validated by default\n   **/\n  bypassDocumentValidation?: boolean;\n  /**\n   * If true, when an insert fails, don't execute the remaining writes.\n   * If false, continue with remaining inserts when one fails.\n   * @defaultValue `true` - inserts are ordered by default\n   */\n  ordered?: boolean;\n  /**\n   * Force server to assign _id values instead of driver.\n   * @defaultValue `false` - the driver generates `_id` fields by default\n   **/\n  forceServerObjectId?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\nconst executeCommandsAsync = promisify(executeCommands);\n\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends AbstractOperation {\n  bulkOperation: BulkOperationBase;\n  constructor(bulkOperation: BulkOperationBase, options: BulkWriteOptions) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n\n  execute(_server: Server, session: ClientSession | undefined): Promise<any> {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n    return executeCommandsAsync(this.bulkOperation, this.options);\n  }\n}\n\n/** @public */\nexport abstract class BulkOperationBase {\n  isOrdered: boolean;\n  /** @internal */\n  s: BulkOperationPrivate;\n  operationId?: number;\n\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection: Collection, options: BulkWriteOptions, isOrdered: boolean) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n\n    const topology = getTopology(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n\n    // Current item\n    const currentOp = undefined;\n\n    // Set max byte size\n    const hello = topology.lastHello();\n\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize =\n      hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n\n    // Final options for retryable writes\n    let finalOptions = Object.assign({}, options);\n    finalOptions = applyRetryableWrites(finalOptions, collection.s.db);\n\n    // Final results\n    const bulkResult: BulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: resolveBSONOptions(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  insert(document: Document): BulkOperationBase {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new ObjectId();\n    }\n\n    return this.addToOperationsList(BatchType.INSERT, document);\n  }\n\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n  find(selector: Document): FindOperators {\n    if (!selector) {\n      throw new MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    }\n\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n\n    return new FindOperators(this);\n  }\n\n  /** Specifies a raw operation to perform in the bulk write. */\n  raw(op: AnyBulkWriteOperation): this {\n    if (op == null || typeof op !== 'object') {\n      throw new MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && (op.insertOne as Document)._id == null) {\n          (op.insertOne as Document)._id = new ObjectId();\n        }\n\n        return this.addToOperationsList(BatchType.INSERT, op.insertOne);\n      }\n\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new ObjectId();\n      }\n\n      return this.addToOperationsList(BatchType.INSERT, op.insertOne.document);\n    }\n\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(\n          op.replaceOne.filter,\n          op.replaceOne.replacement,\n          { ...op.replaceOne, multi: false }\n        );\n        if (hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateOne.filter, op.updateOne.update, {\n          ...op.updateOne,\n          multi: false\n        });\n        if (!hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateMany.filter, op.updateMany.update, {\n          ...op.updateMany,\n          multi: true\n        });\n        if (!hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n    }\n\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteOne.filter, { ...op.deleteOne, limit: 1 })\n      );\n    }\n\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteMany.filter, { ...op.deleteMany, limit: 0 })\n      );\n    }\n\n    // otherwise an unknown operation was provided\n    throw new MongoInvalidArgumentError(\n      'bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany'\n    );\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get batches(): Batch[] {\n    const batches = [...this.s.batches];\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n    return batches;\n  }\n\n  async execute(options: BulkWriteOptions = {}): Promise<BulkWriteResult> {\n    if (this.s.executed) {\n      throw new MongoBatchReExecutionError();\n    }\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    }\n\n    // If we have current batch\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    }\n    // If we have no operations in the bulk raise an error\n    if (this.s.batches.length === 0) {\n      throw new MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n    }\n\n    this.s.executed = true;\n    const finalOptions = { ...this.s.options, ...options };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n\n    return executeOperation(this.s.collection.client, operation);\n  }\n\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n  handleWriteError(callback: Callback<BulkWriteResult>, writeResult: BulkWriteResult): boolean {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg\n        ? this.s.bulkResult.writeErrors[0].errmsg\n        : 'write operation failed';\n\n      callback(\n        new MongoBulkWriteError(\n          {\n            message: msg,\n            code: this.s.bulkResult.writeErrors[0].code,\n            writeErrors: this.s.bulkResult.writeErrors\n          },\n          writeResult\n        )\n      );\n\n      return true;\n    }\n\n    const writeConcernError = writeResult.getWriteConcernError();\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n\n    return false;\n  }\n\n  abstract addToOperationsList(\n    batchType: BatchType,\n    document: Document | UpdateStatement | DeleteStatement\n  ): this;\n}\n\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get() {\n    return this.s.currentIndex;\n  }\n});\n\nfunction shouldForceServerObjectId(bulkOperation: BulkOperationBase): boolean {\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n  }\n\n  return false;\n}\n\nfunction isInsertBatch(batch: Batch): boolean {\n  return batch.batchType === BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch: Batch): batch is Batch<UpdateStatement> {\n  return batch.batchType === BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch: Batch): batch is Batch<DeleteStatement> {\n  return batch.batchType === BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp: BulkOperationBase): Document {\n  let { currentOp } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}