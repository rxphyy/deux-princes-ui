{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFAASEnv = exports.makeClientMetadata = exports.LimitedSizeDocument = void 0;\nconst os = require(\"os\");\nconst process = require(\"process\");\nconst bson_1 = require(\"../../bson\");\nconst error_1 = require(\"../../error\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = require('../../../package.json').version;\n/** @internal */\nclass LimitedSizeDocument {\n  constructor(maxSize) {\n    this.maxSize = maxSize;\n    this.document = new Map();\n    /** BSON overhead: Int32 + Null byte */\n    this.documentSize = 5;\n  }\n  /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n  ifItFitsItSits(key, value) {\n    // The BSON byteLength of the new element is the same as serializing it to its own document\n    // subtracting the document size int32 and the null terminator.\n    const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n    if (newElementSize + this.documentSize > this.maxSize) {\n      return false;\n    }\n    this.documentSize += newElementSize;\n    this.document.set(key, value);\n    return true;\n  }\n  toObject() {\n    return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n      promoteLongs: false,\n      promoteBuffers: false,\n      promoteValues: false,\n      useBigInt64: false\n    });\n  }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nfunction makeClientMetadata(options) {\n  const metadataDocument = new LimitedSizeDocument(512);\n  const {\n    appName = ''\n  } = options;\n  // Add app name first, it must be sent\n  if (appName.length > 0) {\n    const name = Buffer.byteLength(appName, 'utf8') <= 128 ? options.appName : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n    metadataDocument.ifItFitsItSits('application', {\n      name\n    });\n  }\n  const {\n    name = '',\n    version = '',\n    platform = ''\n  } = options.driverInfo;\n  const driverInfo = {\n    name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n    version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n  };\n  if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n    throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');\n  }\n  let runtimeInfo = getRuntimeInfo();\n  if (platform.length > 0) {\n    runtimeInfo = `${runtimeInfo}|${platform}`;\n  }\n  if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n    throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');\n  }\n  // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n  const osInfo = new Map().set('name', process.platform).set('architecture', process.arch).set('version', os.release()).set('type', os.type());\n  if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n    for (const key of osInfo.keys()) {\n      osInfo.delete(key);\n      if (osInfo.size === 0) break;\n      if (metadataDocument.ifItFitsItSits('os', osInfo)) break;\n    }\n  }\n  const faasEnv = getFAASEnv();\n  if (faasEnv != null) {\n    if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n      for (const key of faasEnv.keys()) {\n        faasEnv.delete(key);\n        if (faasEnv.size === 0) break;\n        if (metadataDocument.ifItFitsItSits('env', faasEnv)) break;\n      }\n    }\n  }\n  return metadataDocument.toObject();\n}\nexports.makeClientMetadata = makeClientMetadata;\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nfunction getFAASEnv() {\n  const {\n    AWS_EXECUTION_ENV = '',\n    AWS_LAMBDA_RUNTIME_API = '',\n    FUNCTIONS_WORKER_RUNTIME = '',\n    K_SERVICE = '',\n    FUNCTION_NAME = '',\n    VERCEL = '',\n    AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '',\n    AWS_REGION = '',\n    FUNCTION_MEMORY_MB = '',\n    FUNCTION_REGION = '',\n    FUNCTION_TIMEOUT_SEC = '',\n    VERCEL_REGION = ''\n  } = process.env;\n  const isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n  const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n  const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n  const isVercelFaaS = VERCEL.length > 0;\n  // Note: order matters, name must always be the last key\n  const faasEnv = new Map();\n  // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n  if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n    if (VERCEL_REGION.length > 0) {\n      faasEnv.set('region', VERCEL_REGION);\n    }\n    faasEnv.set('name', 'vercel');\n    return faasEnv;\n  }\n  if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n    if (AWS_REGION.length > 0) {\n      faasEnv.set('region', AWS_REGION);\n    }\n    if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 && Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n      faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n    }\n    faasEnv.set('name', 'aws.lambda');\n    return faasEnv;\n  }\n  if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n    faasEnv.set('name', 'azure.func');\n    return faasEnv;\n  }\n  if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n    if (FUNCTION_REGION.length > 0) {\n      faasEnv.set('region', FUNCTION_REGION);\n    }\n    if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n      faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));\n    }\n    if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n      faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n    }\n    faasEnv.set('name', 'gcp.func');\n    return faasEnv;\n  }\n  return null;\n}\nexports.getFAASEnv = getFAASEnv;\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo() {\n  if ('Deno' in globalThis) {\n    const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n    return `Deno v${version}, ${os.endianness()}`;\n  }\n  if ('Bun' in globalThis) {\n    const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n    return `Bun v${version}, ${os.endianness()}`;\n  }\n  return `Node.js ${process.version}, ${os.endianness()}`;\n}","map":{"version":3,"names":["os","require","process","bson_1","error_1","NODE_DRIVER_VERSION","version","LimitedSizeDocument","constructor","maxSize","document","Map","documentSize","ifItFitsItSits","key","value","newElementSize","BSON","serialize","set","byteLength","toObject","deserialize","promoteLongs","promoteBuffers","promoteValues","useBigInt64","exports","makeClientMetadata","options","metadataDocument","appName","length","name","Buffer","from","subarray","toString","platform","driverInfo","MongoInvalidArgumentError","runtimeInfo","getRuntimeInfo","osInfo","arch","release","type","keys","delete","size","faasEnv","getFAASEnv","AWS_EXECUTION_ENV","AWS_LAMBDA_RUNTIME_API","FUNCTIONS_WORKER_RUNTIME","K_SERVICE","FUNCTION_NAME","VERCEL","AWS_LAMBDA_FUNCTION_MEMORY_SIZE","AWS_REGION","FUNCTION_MEMORY_MB","FUNCTION_REGION","FUNCTION_TIMEOUT_SEC","VERCEL_REGION","env","isAWSFaaS","startsWith","isAzureFaaS","isGCPFaaS","isVercelFaaS","Number","isInteger","Int32","globalThis","Deno","deno","endianness","Bun"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cmap\\handshake\\client_metadata.ts"],"sourcesContent":["import * as os from 'os';\nimport * as process from 'process';\n\nimport { BSON, Int32 } from '../../bson';\nimport { MongoInvalidArgumentError } from '../../error';\nimport type { MongoOptions } from '../../mongo_client';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = require('../../../package.json').version;\n\n/**\n * @public\n * @see https://github.com/mongodb/specifications/blob/master/source/mongodb-handshake/handshake.rst#hello-command\n */\nexport interface ClientMetadata {\n  driver: {\n    name: string;\n    version: string;\n  };\n  os: {\n    type: string;\n    name?: NodeJS.Platform;\n    architecture?: string;\n    version?: string;\n  };\n  platform: string;\n  application?: {\n    name: string;\n  };\n  /** FaaS environment information */\n  env?: {\n    name: 'aws.lambda' | 'gcp.func' | 'azure.func' | 'vercel';\n    timeout_sec?: Int32;\n    memory_mb?: Int32;\n    region?: string;\n    url?: string;\n  };\n}\n\n/** @public */\nexport interface ClientMetadataOptions {\n  driverInfo?: {\n    name?: string;\n    version?: string;\n    platform?: string;\n  };\n  appName?: string;\n}\n\n/** @internal */\nexport class LimitedSizeDocument {\n  private document = new Map();\n  /** BSON overhead: Int32 + Null byte */\n  private documentSize = 5;\n  constructor(private maxSize: number) {}\n\n  /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n  public ifItFitsItSits(key: string, value: Record<string, any> | string): boolean {\n    // The BSON byteLength of the new element is the same as serializing it to its own document\n    // subtracting the document size int32 and the null terminator.\n    const newElementSize = BSON.serialize(new Map().set(key, value)).byteLength - 5;\n\n    if (newElementSize + this.documentSize > this.maxSize) {\n      return false;\n    }\n\n    this.documentSize += newElementSize;\n\n    this.document.set(key, value);\n\n    return true;\n  }\n\n  toObject(): ClientMetadata {\n    return BSON.deserialize(BSON.serialize(this.document), {\n      promoteLongs: false,\n      promoteBuffers: false,\n      promoteValues: false,\n      useBigInt64: false\n    }) as ClientMetadata;\n  }\n}\n\ntype MakeClientMetadataOptions = Pick<MongoOptions, 'appName' | 'driverInfo'>;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nexport function makeClientMetadata(options: MakeClientMetadataOptions): ClientMetadata {\n  const metadataDocument = new LimitedSizeDocument(512);\n\n  const { appName = '' } = options;\n  // Add app name first, it must be sent\n  if (appName.length > 0) {\n    const name =\n      Buffer.byteLength(appName, 'utf8') <= 128\n        ? options.appName\n        : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n    metadataDocument.ifItFitsItSits('application', { name });\n  }\n\n  const { name = '', version = '', platform = '' } = options.driverInfo;\n\n  const driverInfo = {\n    name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n    version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n  };\n\n  if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n    throw new MongoInvalidArgumentError(\n      'Unable to include driverInfo name and version, metadata cannot exceed 512 bytes'\n    );\n  }\n\n  let runtimeInfo = getRuntimeInfo();\n  if (platform.length > 0) {\n    runtimeInfo = `${runtimeInfo}|${platform}`;\n  }\n\n  if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n    throw new MongoInvalidArgumentError(\n      'Unable to include driverInfo platform, metadata cannot exceed 512 bytes'\n    );\n  }\n\n  // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n  const osInfo = new Map()\n    .set('name', process.platform)\n    .set('architecture', process.arch)\n    .set('version', os.release())\n    .set('type', os.type());\n\n  if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n    for (const key of osInfo.keys()) {\n      osInfo.delete(key);\n      if (osInfo.size === 0) break;\n      if (metadataDocument.ifItFitsItSits('os', osInfo)) break;\n    }\n  }\n\n  const faasEnv = getFAASEnv();\n  if (faasEnv != null) {\n    if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n      for (const key of faasEnv.keys()) {\n        faasEnv.delete(key);\n        if (faasEnv.size === 0) break;\n        if (metadataDocument.ifItFitsItSits('env', faasEnv)) break;\n      }\n    }\n  }\n\n  return metadataDocument.toObject();\n}\n\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nexport function getFAASEnv(): Map<string, string | Int32> | null {\n  const {\n    AWS_EXECUTION_ENV = '',\n    AWS_LAMBDA_RUNTIME_API = '',\n    FUNCTIONS_WORKER_RUNTIME = '',\n    K_SERVICE = '',\n    FUNCTION_NAME = '',\n    VERCEL = '',\n    AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '',\n    AWS_REGION = '',\n    FUNCTION_MEMORY_MB = '',\n    FUNCTION_REGION = '',\n    FUNCTION_TIMEOUT_SEC = '',\n    VERCEL_REGION = ''\n  } = process.env;\n\n  const isAWSFaaS =\n    AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n  const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n  const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n  const isVercelFaaS = VERCEL.length > 0;\n\n  // Note: order matters, name must always be the last key\n  const faasEnv = new Map();\n\n  // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n  if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n    if (VERCEL_REGION.length > 0) {\n      faasEnv.set('region', VERCEL_REGION);\n    }\n\n    faasEnv.set('name', 'vercel');\n    return faasEnv;\n  }\n\n  if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n    if (AWS_REGION.length > 0) {\n      faasEnv.set('region', AWS_REGION);\n    }\n\n    if (\n      AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&\n      Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)\n    ) {\n      faasEnv.set('memory_mb', new Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n    }\n\n    faasEnv.set('name', 'aws.lambda');\n    return faasEnv;\n  }\n\n  if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n    faasEnv.set('name', 'azure.func');\n    return faasEnv;\n  }\n\n  if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n    if (FUNCTION_REGION.length > 0) {\n      faasEnv.set('region', FUNCTION_REGION);\n    }\n\n    if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n      faasEnv.set('memory_mb', new Int32(FUNCTION_MEMORY_MB));\n    }\n\n    if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n      faasEnv.set('timeout_sec', new Int32(FUNCTION_TIMEOUT_SEC));\n    }\n\n    faasEnv.set('name', 'gcp.func');\n    return faasEnv;\n  }\n\n  return null;\n}\n\n/**\n * @internal\n * This type represents the global Deno object and the minimal type contract we expect it to satisfy.\n */\ndeclare const Deno: { version?: { deno?: string } } | undefined;\n\n/**\n * @internal\n * This type represents the global Bun object and the minimal type contract we expect it to satisfy.\n */\ndeclare const Bun: { (): void; version?: string } | undefined;\n\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo(): string {\n  if ('Deno' in globalThis) {\n    const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n\n    return `Deno v${version}, ${os.endianness()}`;\n  }\n\n  if ('Bun' in globalThis) {\n    const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n\n    return `Bun v${version}, ${os.endianness()}`;\n  }\n\n  return `Node.js ${process.version}, ${os.endianness()}`;\n}\n"],"mappings":";;;;;;AAAA,MAAAA,EAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AAEA,MAAAE,MAAA,GAAAF,OAAA;AACA,MAAAG,OAAA,GAAAH,OAAA;AAGA;AACA,MAAMI,mBAAmB,GAAGJ,OAAO,CAAC,uBAAuB,CAAC,CAACK,OAAO;AAyCpE;AACA,MAAaC,mBAAmB;EAI9BC,YAAoBC,OAAe;IAAf,KAAAA,OAAO,GAAPA,OAAO;IAHnB,KAAAC,QAAQ,GAAG,IAAIC,GAAG,EAAE;IAC5B;IACQ,KAAAC,YAAY,GAAG,CAAC;EACc;EAEtC;EACOC,cAAcA,CAACC,GAAW,EAAEC,KAAmC;IACpE;IACA;IACA,MAAMC,cAAc,GAAGb,MAAA,CAAAc,IAAI,CAACC,SAAS,CAAC,IAAIP,GAAG,EAAE,CAACQ,GAAG,CAACL,GAAG,EAAEC,KAAK,CAAC,CAAC,CAACK,UAAU,GAAG,CAAC;IAE/E,IAAIJ,cAAc,GAAG,IAAI,CAACJ,YAAY,GAAG,IAAI,CAACH,OAAO,EAAE;MACrD,OAAO,KAAK;;IAGd,IAAI,CAACG,YAAY,IAAII,cAAc;IAEnC,IAAI,CAACN,QAAQ,CAACS,GAAG,CAACL,GAAG,EAAEC,KAAK,CAAC;IAE7B,OAAO,IAAI;EACb;EAEAM,QAAQA,CAAA;IACN,OAAOlB,MAAA,CAAAc,IAAI,CAACK,WAAW,CAACnB,MAAA,CAAAc,IAAI,CAACC,SAAS,CAAC,IAAI,CAACR,QAAQ,CAAC,EAAE;MACrDa,YAAY,EAAE,KAAK;MACnBC,cAAc,EAAE,KAAK;MACrBC,aAAa,EAAE,KAAK;MACpBC,WAAW,EAAE;KACd,CAAmB;EACtB;;AA9BFC,OAAA,CAAApB,mBAAA,GAAAA,mBAAA;AAkCA;;;;;;;;AAQA,SAAgBqB,kBAAkBA,CAACC,OAAkC;EACnE,MAAMC,gBAAgB,GAAG,IAAIvB,mBAAmB,CAAC,GAAG,CAAC;EAErD,MAAM;IAAEwB,OAAO,GAAG;EAAE,CAAE,GAAGF,OAAO;EAChC;EACA,IAAIE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;IACtB,MAAMC,IAAI,GACRC,MAAM,CAACd,UAAU,CAACW,OAAO,EAAE,MAAM,CAAC,IAAI,GAAG,GACrCF,OAAO,CAACE,OAAO,GACfG,MAAM,CAACC,IAAI,CAACJ,OAAO,EAAE,MAAM,CAAC,CAACK,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC;IACpEP,gBAAgB,CAACjB,cAAc,CAAC,aAAa,EAAE;MAAEoB;IAAI,CAAE,CAAC;;EAG1D,MAAM;IAAEA,IAAI,GAAG,EAAE;IAAE3B,OAAO,GAAG,EAAE;IAAEgC,QAAQ,GAAG;EAAE,CAAE,GAAGT,OAAO,CAACU,UAAU;EAErE,MAAMA,UAAU,GAAG;IACjBN,IAAI,EAAEA,IAAI,CAACD,MAAM,GAAG,CAAC,GAAG,UAAUC,IAAI,EAAE,GAAG,QAAQ;IACnD3B,OAAO,EAAEA,OAAO,CAAC0B,MAAM,GAAG,CAAC,GAAG,GAAG3B,mBAAmB,IAAIC,OAAO,EAAE,GAAGD;GACrE;EAED,IAAI,CAACyB,gBAAgB,CAACjB,cAAc,CAAC,QAAQ,EAAE0B,UAAU,CAAC,EAAE;IAC1D,MAAM,IAAInC,OAAA,CAAAoC,yBAAyB,CACjC,iFAAiF,CAClF;;EAGH,IAAIC,WAAW,GAAGC,cAAc,EAAE;EAClC,IAAIJ,QAAQ,CAACN,MAAM,GAAG,CAAC,EAAE;IACvBS,WAAW,GAAG,GAAGA,WAAW,IAAIH,QAAQ,EAAE;;EAG5C,IAAI,CAACR,gBAAgB,CAACjB,cAAc,CAAC,UAAU,EAAE4B,WAAW,CAAC,EAAE;IAC7D,MAAM,IAAIrC,OAAA,CAAAoC,yBAAyB,CACjC,yEAAyE,CAC1E;;EAGH;EACA,MAAMG,MAAM,GAAG,IAAIhC,GAAG,EAAE,CACrBQ,GAAG,CAAC,MAAM,EAAEjB,OAAO,CAACoC,QAAQ,CAAC,CAC7BnB,GAAG,CAAC,cAAc,EAAEjB,OAAO,CAAC0C,IAAI,CAAC,CACjCzB,GAAG,CAAC,SAAS,EAAEnB,EAAE,CAAC6C,OAAO,EAAE,CAAC,CAC5B1B,GAAG,CAAC,MAAM,EAAEnB,EAAE,CAAC8C,IAAI,EAAE,CAAC;EAEzB,IAAI,CAAChB,gBAAgB,CAACjB,cAAc,CAAC,IAAI,EAAE8B,MAAM,CAAC,EAAE;IAClD,KAAK,MAAM7B,GAAG,IAAI6B,MAAM,CAACI,IAAI,EAAE,EAAE;MAC/BJ,MAAM,CAACK,MAAM,CAAClC,GAAG,CAAC;MAClB,IAAI6B,MAAM,CAACM,IAAI,KAAK,CAAC,EAAE;MACvB,IAAInB,gBAAgB,CAACjB,cAAc,CAAC,IAAI,EAAE8B,MAAM,CAAC,EAAE;;;EAIvD,MAAMO,OAAO,GAAGC,UAAU,EAAE;EAC5B,IAAID,OAAO,IAAI,IAAI,EAAE;IACnB,IAAI,CAACpB,gBAAgB,CAACjB,cAAc,CAAC,KAAK,EAAEqC,OAAO,CAAC,EAAE;MACpD,KAAK,MAAMpC,GAAG,IAAIoC,OAAO,CAACH,IAAI,EAAE,EAAE;QAChCG,OAAO,CAACF,MAAM,CAAClC,GAAG,CAAC;QACnB,IAAIoC,OAAO,CAACD,IAAI,KAAK,CAAC,EAAE;QACxB,IAAInB,gBAAgB,CAACjB,cAAc,CAAC,KAAK,EAAEqC,OAAO,CAAC,EAAE;;;;EAK3D,OAAOpB,gBAAgB,CAACT,QAAQ,EAAE;AACpC;AAhEAM,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AAkEA;;;;AAIA,SAAgBuB,UAAUA,CAAA;EACxB,MAAM;IACJC,iBAAiB,GAAG,EAAE;IACtBC,sBAAsB,GAAG,EAAE;IAC3BC,wBAAwB,GAAG,EAAE;IAC7BC,SAAS,GAAG,EAAE;IACdC,aAAa,GAAG,EAAE;IAClBC,MAAM,GAAG,EAAE;IACXC,+BAA+B,GAAG,EAAE;IACpCC,UAAU,GAAG,EAAE;IACfC,kBAAkB,GAAG,EAAE;IACvBC,eAAe,GAAG,EAAE;IACpBC,oBAAoB,GAAG,EAAE;IACzBC,aAAa,GAAG;EAAE,CACnB,GAAG7D,OAAO,CAAC8D,GAAG;EAEf,MAAMC,SAAS,GACbb,iBAAiB,CAACc,UAAU,CAAC,aAAa,CAAC,IAAIb,sBAAsB,CAACrB,MAAM,GAAG,CAAC;EAClF,MAAMmC,WAAW,GAAGb,wBAAwB,CAACtB,MAAM,GAAG,CAAC;EACvD,MAAMoC,SAAS,GAAGb,SAAS,CAACvB,MAAM,GAAG,CAAC,IAAIwB,aAAa,CAACxB,MAAM,GAAG,CAAC;EAClE,MAAMqC,YAAY,GAAGZ,MAAM,CAACzB,MAAM,GAAG,CAAC;EAEtC;EACA,MAAMkB,OAAO,GAAG,IAAIvC,GAAG,EAAE;EAEzB;EACA,IAAI0D,YAAY,IAAI,EAAEF,WAAW,IAAIC,SAAS,CAAC,EAAE;IAC/C,IAAIL,aAAa,CAAC/B,MAAM,GAAG,CAAC,EAAE;MAC5BkB,OAAO,CAAC/B,GAAG,CAAC,QAAQ,EAAE4C,aAAa,CAAC;;IAGtCb,OAAO,CAAC/B,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC7B,OAAO+B,OAAO;;EAGhB,IAAIe,SAAS,IAAI,EAAEE,WAAW,IAAIC,SAAS,IAAIC,YAAY,CAAC,EAAE;IAC5D,IAAIV,UAAU,CAAC3B,MAAM,GAAG,CAAC,EAAE;MACzBkB,OAAO,CAAC/B,GAAG,CAAC,QAAQ,EAAEwC,UAAU,CAAC;;IAGnC,IACED,+BAA+B,CAAC1B,MAAM,GAAG,CAAC,IAC1CsC,MAAM,CAACC,SAAS,CAAC,CAACb,+BAA+B,CAAC,EAClD;MACAR,OAAO,CAAC/B,GAAG,CAAC,WAAW,EAAE,IAAIhB,MAAA,CAAAqE,KAAK,CAACd,+BAA+B,CAAC,CAAC;;IAGtER,OAAO,CAAC/B,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC;IACjC,OAAO+B,OAAO;;EAGhB,IAAIiB,WAAW,IAAI,EAAEC,SAAS,IAAIH,SAAS,IAAII,YAAY,CAAC,EAAE;IAC5DnB,OAAO,CAAC/B,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC;IACjC,OAAO+B,OAAO;;EAGhB,IAAIkB,SAAS,IAAI,EAAED,WAAW,IAAIF,SAAS,IAAII,YAAY,CAAC,EAAE;IAC5D,IAAIR,eAAe,CAAC7B,MAAM,GAAG,CAAC,EAAE;MAC9BkB,OAAO,CAAC/B,GAAG,CAAC,QAAQ,EAAE0C,eAAe,CAAC;;IAGxC,IAAID,kBAAkB,CAAC5B,MAAM,GAAG,CAAC,IAAIsC,MAAM,CAACC,SAAS,CAAC,CAACX,kBAAkB,CAAC,EAAE;MAC1EV,OAAO,CAAC/B,GAAG,CAAC,WAAW,EAAE,IAAIhB,MAAA,CAAAqE,KAAK,CAACZ,kBAAkB,CAAC,CAAC;;IAGzD,IAAIE,oBAAoB,CAAC9B,MAAM,GAAG,CAAC,IAAIsC,MAAM,CAACC,SAAS,CAAC,CAACT,oBAAoB,CAAC,EAAE;MAC9EZ,OAAO,CAAC/B,GAAG,CAAC,aAAa,EAAE,IAAIhB,MAAA,CAAAqE,KAAK,CAACV,oBAAoB,CAAC,CAAC;;IAG7DZ,OAAO,CAAC/B,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC;IAC/B,OAAO+B,OAAO;;EAGhB,OAAO,IAAI;AACb;AA1EAvB,OAAA,CAAAwB,UAAA,GAAAA,UAAA;AAwFA;;;;;;;;AAQA,SAAST,cAAcA,CAAA;EACrB,IAAI,MAAM,IAAI+B,UAAU,EAAE;IACxB,MAAMnE,OAAO,GAAG,OAAOoE,IAAI,EAAEpE,OAAO,EAAEqE,IAAI,KAAK,QAAQ,GAAGD,IAAI,EAAEpE,OAAO,EAAEqE,IAAI,GAAG,eAAe;IAE/F,OAAO,SAASrE,OAAO,KAAKN,EAAE,CAAC4E,UAAU,EAAE,EAAE;;EAG/C,IAAI,KAAK,IAAIH,UAAU,EAAE;IACvB,MAAMnE,OAAO,GAAG,OAAOuE,GAAG,EAAEvE,OAAO,KAAK,QAAQ,GAAGuE,GAAG,EAAEvE,OAAO,GAAG,eAAe;IAEjF,OAAO,QAAQA,OAAO,KAAKN,EAAE,CAAC4E,UAAU,EAAE,EAAE;;EAG9C,OAAO,WAAW1E,OAAO,CAACI,OAAO,KAAKN,EAAE,CAAC4E,UAAU,EAAE,EAAE;AACzD"},"metadata":{},"sourceType":"script","externalDependencies":[]}