{"ast":null,"code":"'use strict';\n\nconst normalizeArgs = (file, args = []) => {\n  if (!Array.isArray(args)) {\n    return [file];\n  }\n  return [file, ...args];\n};\nconst NO_ESCAPE_REGEXP = /^[\\w.-]+$/;\nconst DOUBLE_QUOTES_REGEXP = /\"/g;\nconst escapeArg = arg => {\n  if (typeof arg !== 'string' || NO_ESCAPE_REGEXP.test(arg)) {\n    return arg;\n  }\n  return `\"${arg.replace(DOUBLE_QUOTES_REGEXP, '\\\\\"')}\"`;\n};\nconst joinCommand = (file, args) => {\n  return normalizeArgs(file, args).join(' ');\n};\nconst getEscapedCommand = (file, args) => {\n  return normalizeArgs(file, args).map(arg => escapeArg(arg)).join(' ');\n};\nconst SPACES_REGEXP = / +/g;\n\n// Handle `execa.command()`\nconst parseCommand = command => {\n  const tokens = [];\n  for (const token of command.trim().split(SPACES_REGEXP)) {\n    // Allow spaces to be escaped by a backslash if not meant as a delimiter\n    const previousToken = tokens[tokens.length - 1];\n    if (previousToken && previousToken.endsWith('\\\\')) {\n      // Merge previous token with current one\n      tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;\n    } else {\n      tokens.push(token);\n    }\n  }\n  return tokens;\n};\nmodule.exports = {\n  joinCommand,\n  getEscapedCommand,\n  parseCommand\n};","map":{"version":3,"names":["normalizeArgs","file","args","Array","isArray","NO_ESCAPE_REGEXP","DOUBLE_QUOTES_REGEXP","escapeArg","arg","test","replace","joinCommand","join","getEscapedCommand","map","SPACES_REGEXP","parseCommand","command","tokens","token","trim","split","previousToken","length","endsWith","slice","push","module","exports"],"sources":["C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/execa/lib/command.js"],"sourcesContent":["'use strict';\nconst normalizeArgs = (file, args = []) => {\n\tif (!Array.isArray(args)) {\n\t\treturn [file];\n\t}\n\n\treturn [file, ...args];\n};\n\nconst NO_ESCAPE_REGEXP = /^[\\w.-]+$/;\nconst DOUBLE_QUOTES_REGEXP = /\"/g;\n\nconst escapeArg = arg => {\n\tif (typeof arg !== 'string' || NO_ESCAPE_REGEXP.test(arg)) {\n\t\treturn arg;\n\t}\n\n\treturn `\"${arg.replace(DOUBLE_QUOTES_REGEXP, '\\\\\"')}\"`;\n};\n\nconst joinCommand = (file, args) => {\n\treturn normalizeArgs(file, args).join(' ');\n};\n\nconst getEscapedCommand = (file, args) => {\n\treturn normalizeArgs(file, args).map(arg => escapeArg(arg)).join(' ');\n};\n\nconst SPACES_REGEXP = / +/g;\n\n// Handle `execa.command()`\nconst parseCommand = command => {\n\tconst tokens = [];\n\tfor (const token of command.trim().split(SPACES_REGEXP)) {\n\t\t// Allow spaces to be escaped by a backslash if not meant as a delimiter\n\t\tconst previousToken = tokens[tokens.length - 1];\n\t\tif (previousToken && previousToken.endsWith('\\\\')) {\n\t\t\t// Merge previous token with current one\n\t\t\ttokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;\n\t\t} else {\n\t\t\ttokens.push(token);\n\t\t}\n\t}\n\n\treturn tokens;\n};\n\nmodule.exports = {\n\tjoinCommand,\n\tgetEscapedCommand,\n\tparseCommand\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,aAAa,GAAGA,CAACC,IAAI,EAAEC,IAAI,GAAG,EAAE,KAAK;EAC1C,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;IACzB,OAAO,CAACD,IAAI,CAAC;EACd;EAEA,OAAO,CAACA,IAAI,EAAE,GAAGC,IAAI,CAAC;AACvB,CAAC;AAED,MAAMG,gBAAgB,GAAG,WAAW;AACpC,MAAMC,oBAAoB,GAAG,IAAI;AAEjC,MAAMC,SAAS,GAAGC,GAAG,IAAI;EACxB,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIH,gBAAgB,CAACI,IAAI,CAACD,GAAG,CAAC,EAAE;IAC1D,OAAOA,GAAG;EACX;EAEA,OAAQ,IAAGA,GAAG,CAACE,OAAO,CAACJ,oBAAoB,EAAE,KAAK,CAAE,GAAE;AACvD,CAAC;AAED,MAAMK,WAAW,GAAGA,CAACV,IAAI,EAAEC,IAAI,KAAK;EACnC,OAAOF,aAAa,CAACC,IAAI,EAAEC,IAAI,CAAC,CAACU,IAAI,CAAC,GAAG,CAAC;AAC3C,CAAC;AAED,MAAMC,iBAAiB,GAAGA,CAACZ,IAAI,EAAEC,IAAI,KAAK;EACzC,OAAOF,aAAa,CAACC,IAAI,EAAEC,IAAI,CAAC,CAACY,GAAG,CAACN,GAAG,IAAID,SAAS,CAACC,GAAG,CAAC,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;AACtE,CAAC;AAED,MAAMG,aAAa,GAAG,KAAK;;AAE3B;AACA,MAAMC,YAAY,GAAGC,OAAO,IAAI;EAC/B,MAAMC,MAAM,GAAG,EAAE;EACjB,KAAK,MAAMC,KAAK,IAAIF,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAACN,aAAa,CAAC,EAAE;IACxD;IACA,MAAMO,aAAa,GAAGJ,MAAM,CAACA,MAAM,CAACK,MAAM,GAAG,CAAC,CAAC;IAC/C,IAAID,aAAa,IAAIA,aAAa,CAACE,QAAQ,CAAC,IAAI,CAAC,EAAE;MAClD;MACAN,MAAM,CAACA,MAAM,CAACK,MAAM,GAAG,CAAC,CAAC,GAAI,GAAED,aAAa,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,IAAGN,KAAM,EAAC;IACrE,CAAC,MAAM;MACND,MAAM,CAACQ,IAAI,CAACP,KAAK,CAAC;IACnB;EACD;EAEA,OAAOD,MAAM;AACd,CAAC;AAEDS,MAAM,CAACC,OAAO,GAAG;EAChBjB,WAAW;EACXE,iBAAiB;EACjBG;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}