{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _asyncIterator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nvar stream_1 = require(\"stream\");\nvar bson_1 = require(\"../bson\");\nvar error_1 = require(\"../error\");\nvar mongo_types_1 = require(\"../mongo_types\");\nvar execute_operation_1 = require(\"../operations/execute_operation\");\nvar get_more_1 = require(\"../operations/get_more\");\nvar kill_cursors_1 = require(\"../operations/kill_cursors\");\nvar read_concern_1 = require(\"../read_concern\");\nvar read_preference_1 = require(\"../read_preference\");\nvar sessions_1 = require(\"../sessions\");\nvar utils_1 = require(\"../utils\");\n/** @internal */\nvar kId = Symbol('id');\n/** @internal */\nvar kDocuments = Symbol('documents');\n/** @internal */\nvar kServer = Symbol('server');\n/** @internal */\nvar kNamespace = Symbol('namespace');\n/** @internal */\nvar kClient = Symbol('client');\n/** @internal */\nvar kSession = Symbol('session');\n/** @internal */\nvar kOptions = Symbol('options');\n/** @internal */\nvar kTransform = Symbol('transform');\n/** @internal */\nvar kInitialized = Symbol('initialized');\n/** @internal */\nvar kClosed = Symbol('closed');\n/** @internal */\nvar kKilled = Symbol('killed');\n/** @internal */\nvar kInit = Symbol('kInit');\n/** @public */\nexports.CURSOR_FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nvar AbstractCursor = /*#__PURE__*/function (_mongo_types_1$TypedE, _Symbol$asyncIterator) {\n  _inherits(AbstractCursor, _mongo_types_1$TypedE);\n  var _super = _createSuper(AbstractCursor);\n  /** @internal */\n  function AbstractCursor(client, namespace) {\n    var _this2;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, AbstractCursor);\n    _this2 = _super.call(this);\n    if (!client.s.isMongoClient) {\n      throw new error_1.MongoRuntimeError('Cursor must be constructed with MongoClient');\n    }\n    _this2[kClient] = client;\n    _this2[kNamespace] = namespace;\n    _this2[kId] = null;\n    _this2[kDocuments] = new utils_1.List();\n    _this2[kInitialized] = false;\n    _this2[kClosed] = false;\n    _this2[kKilled] = false;\n    _this2[kOptions] = _objectSpread({\n      readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference ? options.readPreference : read_preference_1.ReadPreference.primary\n    }, (0, bson_1.pluckBSONSerializeOptions)(options));\n    var readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n      _this2[kOptions].readConcern = readConcern;\n    }\n    if (typeof options.batchSize === 'number') {\n      _this2[kOptions].batchSize = options.batchSize;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      _this2[kOptions].comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n      _this2[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n    if (typeof options.maxAwaitTimeMS === 'number') {\n      _this2[kOptions].maxAwaitTimeMS = options.maxAwaitTimeMS;\n    }\n    if (options.session instanceof sessions_1.ClientSession) {\n      _this2[kSession] = options.session;\n    } else {\n      _this2[kSession] = _this2[kClient].startSession({\n        owner: _assertThisInitialized(_this2),\n        explicit: false\n      });\n    }\n    return _this2;\n  }\n  _createClass(AbstractCursor, [{\n    key: \"id\",\n    get: function get() {\n      var _this$kId;\n      return (_this$kId = this[kId]) !== null && _this$kId !== void 0 ? _this$kId : undefined;\n    }\n    /** @internal */\n  }, {\n    key: \"isDead\",\n    get: function get() {\n      var _this$kId$isZero, _this$kId2;\n      return ((_this$kId$isZero = (_this$kId2 = this[kId]) === null || _this$kId2 === void 0 ? void 0 : _this$kId2.isZero()) !== null && _this$kId$isZero !== void 0 ? _this$kId$isZero : false) || this[kClosed] || this[kKilled];\n    }\n    /** @internal */\n  }, {\n    key: \"client\",\n    get: function get() {\n      return this[kClient];\n    }\n    /** @internal */\n  }, {\n    key: \"server\",\n    get: function get() {\n      return this[kServer];\n    }\n  }, {\n    key: \"namespace\",\n    get: function get() {\n      return this[kNamespace];\n    }\n  }, {\n    key: \"readPreference\",\n    get: function get() {\n      return this[kOptions].readPreference;\n    }\n  }, {\n    key: \"readConcern\",\n    get: function get() {\n      return this[kOptions].readConcern;\n    }\n    /** @internal */\n  }, {\n    key: \"session\",\n    get: function get() {\n      return this[kSession];\n    },\n    set: function set(clientSession) {\n      this[kSession] = clientSession;\n    }\n    /** @internal */\n  }, {\n    key: \"cursorOptions\",\n    get: function get() {\n      return this[kOptions];\n    }\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this[kClosed];\n    }\n  }, {\n    key: \"killed\",\n    get: function get() {\n      return this[kKilled];\n    }\n  }, {\n    key: \"loadBalanced\",\n    get: function get() {\n      var _this$kClient$topolog;\n      return !!((_this$kClient$topolog = this[kClient].topology) !== null && _this$kClient$topolog !== void 0 && _this$kClient$topolog.loadBalanced);\n    }\n    /** Returns current buffered documents length */\n  }, {\n    key: \"bufferedCount\",\n    value: function bufferedCount() {\n      return this[kDocuments].length;\n    }\n    /** Returns current buffered documents */\n  }, {\n    key: \"readBufferedDocuments\",\n    value: function readBufferedDocuments(number) {\n      var bufferedDocs = [];\n      var documentsToRead = Math.min(number !== null && number !== void 0 ? number : this[kDocuments].length, this[kDocuments].length);\n      for (var count = 0; count < documentsToRead; count++) {\n        var document = this[kDocuments].shift();\n        if (document != null) {\n          bufferedDocs.push(document);\n        }\n      }\n      return bufferedDocs;\n    }\n  }, {\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var document, message;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!_this.closed) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              _context.prev = 2;\n            case 3:\n              if (!true) {\n                _context.next = 20;\n                break;\n              }\n              _context.next = 6;\n              return _awaitAsyncGenerator(_this.next());\n            case 6:\n              document = _context.sent;\n              if (!(document === null)) {\n                _context.next = 14;\n                break;\n              }\n              if (_this.closed) {\n                _context.next = 13;\n                break;\n              }\n              message = 'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\n              _context.next = 12;\n              return _awaitAsyncGenerator(cleanupCursor(_this, {\n                needsToEmitClosed: true\n              }).catch(function () {\n                return null;\n              }));\n            case 12:\n              throw new error_1.MongoAPIError(message);\n            case 13:\n              return _context.abrupt(\"break\", 20);\n            case 14:\n              _context.next = 16;\n              return document;\n            case 16:\n              if (!(_this[kId] === bson_1.Long.ZERO)) {\n                _context.next = 18;\n                break;\n              }\n              return _context.abrupt(\"break\", 20);\n            case 18:\n              _context.next = 3;\n              break;\n            case 20:\n              _context.prev = 20;\n              if (_this.closed) {\n                _context.next = 24;\n                break;\n              }\n              _context.next = 24;\n              return _awaitAsyncGenerator(_this.close().catch(function () {\n                return null;\n              }));\n            case 24:\n              return _context.finish(20);\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[2,, 20, 25]]);\n      }))();\n    }\n  }, {\n    key: \"stream\",\n    value: function stream(options) {\n      if (options !== null && options !== void 0 && options.transform) {\n        var _transform = options.transform;\n        var readable = new ReadableCursorStream(this);\n        return readable.pipe(new stream_1.Transform({\n          objectMode: true,\n          highWaterMark: 1,\n          transform: function transform(chunk, _, callback) {\n            try {\n              var transformed = _transform(chunk);\n              callback(undefined, transformed);\n            } catch (err) {\n              callback(err);\n            }\n          }\n        }));\n      }\n      return new ReadableCursorStream(this);\n    }\n  }, {\n    key: \"hasNext\",\n    value: function () {\n      var _hasNext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var doc;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this[kId] === bson_1.Long.ZERO)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 2:\n              if (!(this[kDocuments].length !== 0)) {\n                _context2.next = 4;\n                break;\n              }\n              return _context2.abrupt(\"return\", true);\n            case 4:\n              _context2.next = 6;\n              return _next(this, {\n                blocking: true,\n                transform: false\n              });\n            case 6:\n              doc = _context2.sent;\n              if (!doc) {\n                _context2.next = 10;\n                break;\n              }\n              this[kDocuments].unshift(doc);\n              return _context2.abrupt(\"return\", true);\n            case 10:\n              return _context2.abrupt(\"return\", false);\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function hasNext() {\n        return _hasNext.apply(this, arguments);\n      }\n      return hasNext;\n    }() /** Get the next available document from the cursor, returns null if no more documents are available. */\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(this[kId] === bson_1.Long.ZERO)) {\n                _context3.next = 2;\n                break;\n              }\n              throw new error_1.MongoCursorExhaustedError();\n            case 2:\n              return _context3.abrupt(\"return\", _next(this, {\n                blocking: true,\n                transform: true\n              }));\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function next() {\n        return _next2.apply(this, arguments);\n      }\n      return next;\n    }()\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */\n  }, {\n    key: \"tryNext\",\n    value: function () {\n      var _tryNext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(this[kId] === bson_1.Long.ZERO)) {\n                _context4.next = 2;\n                break;\n              }\n              throw new error_1.MongoCursorExhaustedError();\n            case 2:\n              return _context4.abrupt(\"return\", _next(this, {\n                blocking: false,\n                transform: true\n              }));\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function tryNext() {\n        return _tryNext.apply(this, arguments);\n      }\n      return tryNext;\n    }()\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */\n  }, {\n    key: \"forEach\",\n    value: function () {\n      var _forEach = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(iterator) {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, document, result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!(typeof iterator !== 'function')) {\n                _context5.next = 2;\n                break;\n              }\n              throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n            case 2:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context5.prev = 4;\n              _iterator = _asyncIterator(this);\n            case 6:\n              _context5.next = 8;\n              return _iterator.next();\n            case 8:\n              if (!(_iteratorAbruptCompletion = !(_step = _context5.sent).done)) {\n                _context5.next = 16;\n                break;\n              }\n              document = _step.value;\n              result = iterator(document);\n              if (!(result === false)) {\n                _context5.next = 13;\n                break;\n              }\n              return _context5.abrupt(\"break\", 16);\n            case 13:\n              _iteratorAbruptCompletion = false;\n              _context5.next = 6;\n              break;\n            case 16:\n              _context5.next = 22;\n              break;\n            case 18:\n              _context5.prev = 18;\n              _context5.t0 = _context5[\"catch\"](4);\n              _didIteratorError = true;\n              _iteratorError = _context5.t0;\n            case 22:\n              _context5.prev = 22;\n              _context5.prev = 23;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context5.next = 27;\n                break;\n              }\n              _context5.next = 27;\n              return _iterator.return();\n            case 27:\n              _context5.prev = 27;\n              if (!_didIteratorError) {\n                _context5.next = 30;\n                break;\n              }\n              throw _iteratorError;\n            case 30:\n              return _context5.finish(27);\n            case 31:\n              return _context5.finish(22);\n            case 32:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[4, 18, 22, 32], [23,, 27, 31]]);\n      }));\n      function forEach(_x) {\n        return _forEach.apply(this, arguments);\n      }\n      return forEach;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var needsToEmitClosed;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              needsToEmitClosed = !this[kClosed];\n              this[kClosed] = true;\n              _context6.next = 4;\n              return cleanupCursor(this, {\n                needsToEmitClosed: needsToEmitClosed\n              });\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function close() {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */\n  }, {\n    key: \"toArray\",\n    value: function () {\n      var _toArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var array, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, document;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              array = [];\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context7.prev = 3;\n              _iterator2 = _asyncIterator(this);\n            case 5:\n              _context7.next = 7;\n              return _iterator2.next();\n            case 7:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context7.sent).done)) {\n                _context7.next = 13;\n                break;\n              }\n              document = _step2.value;\n              array.push(document);\n            case 10:\n              _iteratorAbruptCompletion2 = false;\n              _context7.next = 5;\n              break;\n            case 13:\n              _context7.next = 19;\n              break;\n            case 15:\n              _context7.prev = 15;\n              _context7.t0 = _context7[\"catch\"](3);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context7.t0;\n            case 19:\n              _context7.prev = 19;\n              _context7.prev = 20;\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context7.next = 24;\n                break;\n              }\n              _context7.next = 24;\n              return _iterator2.return();\n            case 24:\n              _context7.prev = 24;\n              if (!_didIteratorError2) {\n                _context7.next = 27;\n                break;\n              }\n              throw _iteratorError2;\n            case 27:\n              return _context7.finish(24);\n            case 28:\n              return _context7.finish(19);\n            case 29:\n              return _context7.abrupt(\"return\", array);\n            case 30:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[3, 15, 19, 29], [20,, 24, 28]]);\n      }));\n      function toArray() {\n        return _toArray.apply(this, arguments);\n      }\n      return toArray;\n    }()\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n  }, {\n    key: \"addCursorFlag\",\n    value: function addCursorFlag(flag, value) {\n      assertUninitialized(this);\n      if (!exports.CURSOR_FLAGS.includes(flag)) {\n        throw new error_1.MongoInvalidArgumentError(\"Flag \".concat(flag, \" is not one of \").concat(exports.CURSOR_FLAGS));\n      }\n      if (typeof value !== 'boolean') {\n        throw new error_1.MongoInvalidArgumentError(\"Flag \".concat(flag, \" must be a boolean value\"));\n      }\n      this[kOptions][flag] = value;\n      return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n  }, {\n    key: \"map\",\n    value: function map(transform) {\n      assertUninitialized(this);\n      var oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n      if (oldTransform) {\n        this[kTransform] = function (doc) {\n          return transform(oldTransform(doc));\n        };\n      } else {\n        this[kTransform] = transform;\n      }\n      return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n  }, {\n    key: \"withReadPreference\",\n    value: function withReadPreference(readPreference) {\n      assertUninitialized(this);\n      if (readPreference instanceof read_preference_1.ReadPreference) {\n        this[kOptions].readPreference = readPreference;\n      } else if (typeof readPreference === 'string') {\n        this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n      } else {\n        throw new error_1.MongoInvalidArgumentError(\"Invalid read preference: \".concat(readPreference));\n      }\n      return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n  }, {\n    key: \"withReadConcern\",\n    value: function withReadConcern(readConcern) {\n      assertUninitialized(this);\n      var resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({\n        readConcern: readConcern\n      });\n      if (resolvedReadConcern) {\n        this[kOptions].readConcern = resolvedReadConcern;\n      }\n      return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n  }, {\n    key: \"maxTimeMS\",\n    value: function maxTimeMS(value) {\n      assertUninitialized(this);\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n      }\n      this[kOptions].maxTimeMS = value;\n      return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */\n  }, {\n    key: \"batchSize\",\n    value: function batchSize(value) {\n      assertUninitialized(this);\n      if (this[kOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n      }\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n      }\n      this[kOptions].batchSize = value;\n      return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n  }, {\n    key: \"rewind\",\n    value: function rewind() {\n      if (!this[kInitialized]) {\n        return;\n      }\n      this[kId] = null;\n      this[kDocuments].clear();\n      this[kClosed] = false;\n      this[kKilled] = false;\n      this[kInitialized] = false;\n      var session = this[kSession];\n      if (session) {\n        // We only want to end this session if we created it, and it hasn't ended yet\n        if (session.explicit === false) {\n          if (!session.hasEnded) {\n            session.endSession().catch(function () {\n              return null;\n            });\n          }\n          this[kSession] = this.client.startSession({\n            owner: this,\n            explicit: false\n          });\n        }\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"getMore\",\n    value: function () {\n      var _getMore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(batchSize) {\n        var getMoreOperation;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              getMoreOperation = new get_more_1.GetMoreOperation(this[kNamespace], this[kId], this[kServer], _objectSpread(_objectSpread({}, this[kOptions]), {}, {\n                session: this[kSession],\n                batchSize: batchSize\n              }));\n              return _context8.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this[kClient], getMoreOperation));\n            case 2:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function getMore(_x2) {\n        return _getMore.apply(this, arguments);\n      }\n      return getMore;\n    }()\n    /**\n     * @internal\n     *\n     * This function is exposed for the unified test runner's createChangeStream\n     * operation.  We cannot refactor to use the abstract _initialize method without\n     * a significant refactor.\n     */\n  }, {\n    key: kInit,\n    value: function () {\n      var _value = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var state, response;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return this._initialize(this[kSession]);\n            case 3:\n              state = _context9.sent;\n              response = state.response;\n              this[kServer] = state.server;\n              if (response.cursor) {\n                // TODO(NODE-2674): Preserve int64 sent from MongoDB\n                this[kId] = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : typeof response.cursor.id === 'bigint' ? bson_1.Long.fromBigInt(response.cursor.id) : response.cursor.id;\n                if (response.cursor.ns) {\n                  this[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n                }\n                this[kDocuments].pushMany(response.cursor.firstBatch);\n              }\n              // When server responses return without a cursor document, we close this cursor\n              // and return the raw server response. This is often the case for explain commands\n              // for example\n              if (this[kId] == null) {\n                this[kId] = bson_1.Long.ZERO;\n                // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n                this[kDocuments].push(state.response);\n              }\n              // the cursor is now initialized, even if it is dead\n              this[kInitialized] = true;\n              _context9.next = 17;\n              break;\n            case 11:\n              _context9.prev = 11;\n              _context9.t0 = _context9[\"catch\"](0);\n              // the cursor is now initialized, even if an error occurred\n              this[kInitialized] = true;\n              _context9.next = 16;\n              return cleanupCursor(this, {\n                error: _context9.t0\n              });\n            case 16:\n              throw _context9.t0;\n            case 17:\n              if (!this.isDead) {\n                _context9.next = 20;\n                break;\n              }\n              _context9.next = 20;\n              return cleanupCursor(this, undefined);\n            case 20:\n              return _context9.abrupt(\"return\");\n            case 21:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[0, 11]]);\n      }));\n      function value() {\n        return _value.apply(this, arguments);\n      }\n      return value;\n    }()\n  }]);\n  return AbstractCursor;\n}(mongo_types_1.TypedEventEmitter, Symbol.asyncIterator);\n/** @event */\nAbstractCursor.CLOSE = 'close';\nexports.AbstractCursor = AbstractCursor;\n/**\n * @param cursor - the cursor on which to call `next`\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\n *     not indicate the end of the cursor.\n * @param transform - if true, the cursor's transform function is applied to the result document (if the transform exists)\n * @returns the next document in the cursor, or `null`.  When `blocking` is `true`, a `null` document means\n * the cursor has been exhausted.  Otherwise, it means that there is no document available in the cursor's buffer.\n */\nfunction _next(_x3, _x4) {\n  return _next3.apply(this, arguments);\n}\nfunction _next3() {\n  _next3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(cursor, _ref) {\n    var blocking, transform, doc, batchSize, response, cursorId;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          blocking = _ref.blocking, transform = _ref.transform;\n          if (!cursor.closed) {\n            _context10.next = 3;\n            break;\n          }\n          return _context10.abrupt(\"return\", null);\n        case 3:\n          if (!(cursor[kId] == null)) {\n            _context10.next = 6;\n            break;\n          }\n          _context10.next = 6;\n          return cursor[kInit]();\n        case 6:\n          if (!(cursor[kDocuments].length !== 0)) {\n            _context10.next = 19;\n            break;\n          }\n          doc = cursor[kDocuments].shift();\n          if (!(doc != null && transform && cursor[kTransform])) {\n            _context10.next = 18;\n            break;\n          }\n          _context10.prev = 9;\n          return _context10.abrupt(\"return\", cursor[kTransform](doc));\n        case 13:\n          _context10.prev = 13;\n          _context10.t0 = _context10[\"catch\"](9);\n          _context10.next = 17;\n          return cleanupCursor(cursor, {\n            error: _context10.t0,\n            needsToEmitClosed: true\n          }).catch(function () {\n            return null;\n          });\n        case 17:\n          throw _context10.t0;\n        case 18:\n          return _context10.abrupt(\"return\", doc);\n        case 19:\n          if (!cursor.isDead) {\n            _context10.next = 23;\n            break;\n          }\n          _context10.next = 22;\n          return cleanupCursor(cursor, {});\n        case 22:\n          return _context10.abrupt(\"return\", null);\n        case 23:\n          // otherwise need to call getMore\n          batchSize = cursor[kOptions].batchSize || 1000;\n          _context10.prev = 24;\n          _context10.next = 27;\n          return cursor.getMore(batchSize);\n        case 27:\n          response = _context10.sent;\n          if (response) {\n            cursorId = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : typeof response.cursor.id === 'bigint' ? bson_1.Long.fromBigInt(response.cursor.id) : response.cursor.id;\n            cursor[kDocuments].pushMany(response.cursor.nextBatch);\n            cursor[kId] = cursorId;\n          }\n          _context10.next = 36;\n          break;\n        case 31:\n          _context10.prev = 31;\n          _context10.t1 = _context10[\"catch\"](24);\n          _context10.next = 35;\n          return cleanupCursor(cursor, {\n            error: _context10.t1\n          }).catch(function () {\n            return null;\n          });\n        case 35:\n          throw _context10.t1;\n        case 36:\n          if (!cursor.isDead) {\n            _context10.next = 39;\n            break;\n          }\n          _context10.next = 39;\n          return cleanupCursor(cursor, {});\n        case 39:\n          if (!(cursor[kDocuments].length === 0 && blocking === false)) {\n            _context10.next = 41;\n            break;\n          }\n          return _context10.abrupt(\"return\", null);\n        case 41:\n          if (!cursor.isDead || cursor[kDocuments].length !== 0) {\n            _context10.next = 3;\n            break;\n          }\n        case 42:\n          return _context10.abrupt(\"return\", null);\n        case 43:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10, null, [[9, 13], [24, 31]]);\n  }));\n  return _next3.apply(this, arguments);\n}\nfunction cleanupCursor(_x5, _x6) {\n  return _cleanupCursor.apply(this, arguments);\n}\n/** @internal */\nfunction _cleanupCursor() {\n  _cleanupCursor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(cursor, options) {\n    var _options$needsToEmitC;\n    var cursorId, cursorNs, server, session, error, needsToEmitClosed, completeCleanup, _completeCleanup;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          _completeCleanup = function _completeCleanup3() {\n            _completeCleanup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n              return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n                while (1) switch (_context11.prev = _context11.next) {\n                  case 0:\n                    if (!session) {\n                      _context11.next = 10;\n                      break;\n                    }\n                    if (!(session.owner === cursor)) {\n                      _context11.next = 9;\n                      break;\n                    }\n                    _context11.prev = 2;\n                    _context11.next = 5;\n                    return session.endSession({\n                      error: error\n                    });\n                  case 5:\n                    _context11.prev = 5;\n                    cursor.emit(AbstractCursor.CLOSE);\n                    return _context11.finish(5);\n                  case 8:\n                    return _context11.abrupt(\"return\");\n                  case 9:\n                    if (!session.inTransaction()) {\n                      (0, sessions_1.maybeClearPinnedConnection)(session, {\n                        error: error\n                      });\n                    }\n                  case 10:\n                    cursor.emit(AbstractCursor.CLOSE);\n                    return _context11.abrupt(\"return\");\n                  case 12:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }, _callee11, null, [[2,, 5, 8]]);\n            }));\n            return _completeCleanup.apply(this, arguments);\n          };\n          completeCleanup = function _completeCleanup2() {\n            return _completeCleanup.apply(this, arguments);\n          };\n          cursorId = cursor[kId];\n          cursorNs = cursor[kNamespace];\n          server = cursor[kServer];\n          session = cursor[kSession];\n          error = options === null || options === void 0 ? void 0 : options.error; // Cursors only emit closed events once the client-side cursor has been exhausted fully or there\n          // was an error.  Notably, when the server returns a cursor id of 0 and a non-empty batch, we\n          // cleanup the cursor but don't emit a `close` event.\n          needsToEmitClosed = (_options$needsToEmitC = options === null || options === void 0 ? void 0 : options.needsToEmitClosed) !== null && _options$needsToEmitC !== void 0 ? _options$needsToEmitC : cursor[kDocuments].length === 0;\n          if (!error) {\n            _context12.next = 11;\n            break;\n          }\n          if (!(cursor.loadBalanced && error instanceof error_1.MongoNetworkError)) {\n            _context12.next = 11;\n            break;\n          }\n          return _context12.abrupt(\"return\", completeCleanup());\n        case 11:\n          if (!(cursorId == null || server == null || cursorId.isZero() || cursorNs == null)) {\n            _context12.next = 20;\n            break;\n          }\n          if (needsToEmitClosed) {\n            cursor[kClosed] = true;\n            cursor[kId] = bson_1.Long.ZERO;\n            cursor.emit(AbstractCursor.CLOSE);\n          }\n          if (!session) {\n            _context12.next = 19;\n            break;\n          }\n          if (!(session.owner === cursor)) {\n            _context12.next = 18;\n            break;\n          }\n          _context12.next = 17;\n          return session.endSession({\n            error: error\n          });\n        case 17:\n          return _context12.abrupt(\"return\");\n        case 18:\n          if (!session.inTransaction()) {\n            (0, sessions_1.maybeClearPinnedConnection)(session, {\n              error: error\n            });\n          }\n        case 19:\n          return _context12.abrupt(\"return\");\n        case 20:\n          cursor[kKilled] = true;\n          if (!session.hasEnded) {\n            _context12.next = 23;\n            break;\n          }\n          return _context12.abrupt(\"return\", completeCleanup());\n        case 23:\n          _context12.prev = 23;\n          _context12.next = 26;\n          return (0, execute_operation_1.executeOperation)(cursor[kClient], new kill_cursors_1.KillCursorsOperation(cursorId, cursorNs, server, {\n            session: session\n          })).catch(function () {\n            return null;\n          });\n        case 26:\n          _context12.prev = 26;\n          _context12.next = 29;\n          return completeCleanup();\n        case 29:\n          return _context12.finish(26);\n        case 30:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12, null, [[23,, 26, 30]]);\n  }));\n  return _cleanupCursor.apply(this, arguments);\n}\nfunction assertUninitialized(cursor) {\n  if (cursor[kInitialized]) {\n    throw new error_1.MongoCursorInUseError();\n  }\n}\nexports.assertUninitialized = assertUninitialized;\nvar ReadableCursorStream = /*#__PURE__*/function (_stream_1$Readable) {\n  _inherits(ReadableCursorStream, _stream_1$Readable);\n  var _super2 = _createSuper(ReadableCursorStream);\n  function ReadableCursorStream(cursor) {\n    var _this3;\n    _classCallCheck(this, ReadableCursorStream);\n    _this3 = _super2.call(this, {\n      objectMode: true,\n      autoDestroy: false,\n      highWaterMark: 1\n    });\n    _this3._readInProgress = false;\n    _this3._cursor = cursor;\n    return _this3;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _createClass(ReadableCursorStream, [{\n    key: \"_read\",\n    value: function _read(size) {\n      if (!this._readInProgress) {\n        this._readInProgress = true;\n        this._readNext();\n      }\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(error, callback) {\n      this._cursor.close().then(function () {\n        return callback(error);\n      }, function (closeError) {\n        return callback(closeError);\n      });\n    }\n  }, {\n    key: \"_readNext\",\n    value: function _readNext() {\n      var _this4 = this;\n      _next(this._cursor, {\n        blocking: true,\n        transform: true\n      }).then(function (result) {\n        if (result == null) {\n          _this4.push(null);\n        } else if (_this4.destroyed) {\n          _this4._cursor.close().catch(function () {\n            return null;\n          });\n        } else {\n          if (_this4.push(result)) {\n            return _this4._readNext();\n          }\n          _this4._readInProgress = false;\n        }\n      }, function (err) {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          _this4._cursor.close().catch(function () {\n            return null;\n          });\n          return _this4.push(null);\n        }\n        // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n        if (err.message.match(/operation was interrupted/)) {\n          return _this4.push(null);\n        }\n        // NOTE: The two above checks on the message of the error will cause a null to be pushed\n        //       to the stream, thus closing the stream before the destroy call happens. This means\n        //       that either of those error messages on a change stream will not get a proper\n        //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n        //       relies on that error event to be emitted to create its new cursor and thus was not\n        //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n        //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n        //       See NODE-4475.\n        return _this4.destroy(err);\n      });\n    }\n  }]);\n  return ReadableCursorStream;\n}(stream_1.Readable);","map":{"version":3,"names":["stream_1","require","bson_1","error_1","mongo_types_1","execute_operation_1","get_more_1","kill_cursors_1","read_concern_1","read_preference_1","sessions_1","utils_1","kId","Symbol","kDocuments","kServer","kNamespace","kClient","kSession","kOptions","kTransform","kInitialized","kClosed","kKilled","kInit","exports","CURSOR_FLAGS","AbstractCursor","_mongo_types_1$TypedE","_Symbol$asyncIterator","_inherits","_super","_createSuper","client","namespace","_this2","options","arguments","length","undefined","_classCallCheck","call","s","isMongoClient","MongoRuntimeError","List","_objectSpread","readPreference","ReadPreference","primary","pluckBSONSerializeOptions","readConcern","ReadConcern","fromOptions","batchSize","comment","maxTimeMS","maxAwaitTimeMS","session","ClientSession","startSession","owner","_assertThisInitialized","explicit","_createClass","key","get","_this$kId","_this$kId$isZero","_this$kId2","isZero","set","clientSession","_this$kClient$topolog","topology","loadBalanced","value","bufferedCount","readBufferedDocuments","number","bufferedDocs","documentsToRead","Math","min","count","document","shift","push","_this","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee","message","wrap","_callee$","_context","prev","next","closed","abrupt","_awaitAsyncGenerator","sent","cleanupCursor","needsToEmitClosed","catch","MongoAPIError","Long","ZERO","close","finish","stop","stream","transform","readable","ReadableCursorStream","pipe","Transform","objectMode","highWaterMark","chunk","_","callback","transformed","err","_hasNext","_asyncToGenerator","_callee2","doc","_callee2$","_context2","blocking","unshift","hasNext","apply","_next2","_callee3","_callee3$","_context3","MongoCursorExhaustedError","_tryNext","_callee4","_callee4$","_context4","tryNext","_forEach","_callee5","iterator","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","result","_callee5$","_context5","MongoInvalidArgumentError","_asyncIterator","done","t0","return","forEach","_x","_close","_callee6","_callee6$","_context6","_toArray","_callee7","array","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_callee7$","_context7","toArray","addCursorFlag","flag","assertUninitialized","includes","concat","map","oldTransform","withReadPreference","fromString","withReadConcern","resolvedReadConcern","tailable","MongoTailableCursorError","rewind","clear","hasEnded","endSession","_getMore","_callee8","getMoreOperation","_callee8$","_context8","GetMoreOperation","executeOperation","getMore","_x2","_value","_callee9","state","response","_callee9$","_context9","_initialize","server","cursor","id","fromNumber","fromBigInt","ns","pushMany","firstBatch","error","isDead","TypedEventEmitter","asyncIterator","CLOSE","_x3","_x4","_next3","_callee10","_ref","cursorId","_callee10$","_context10","nextBatch","t1","_x5","_x6","_cleanupCursor","_callee12","_options$needsToEmitC","cursorNs","completeCleanup","_completeCleanup","_callee12$","_context12","_completeCleanup3","_callee11","_callee11$","_context11","emit","inTransaction","maybeClearPinnedConnection","_completeCleanup2","MongoNetworkError","KillCursorsOperation","MongoCursorInUseError","_stream_1$Readable","_super2","_this3","autoDestroy","_readInProgress","_cursor","_read","size","_readNext","_destroy","then","closeError","_this4","destroyed","match","destroy","Readable"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cursor\\abstract_cursor.ts"],"sourcesContent":["import { Readable, Transform } from 'stream';\n\nimport { type BSONSerializeOptions, type Document, Long, pluckBSONSerializeOptions } from '../bson';\nimport {\n  type AnyError,\n  MongoAPIError,\n  MongoCursorExhaustedError,\n  MongoCursorInUseError,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoRuntimeError,\n  MongoTailableCursorError\n} from '../error';\nimport type { MongoClient } from '../mongo_client';\nimport { type TODO_NODE_3286, TypedEventEmitter } from '../mongo_types';\nimport { executeOperation, type ExecutionResult } from '../operations/execute_operation';\nimport { GetMoreOperation } from '../operations/get_more';\nimport { KillCursorsOperation } from '../operations/kill_cursors';\nimport { ReadConcern, type ReadConcernLike } from '../read_concern';\nimport { ReadPreference, type ReadPreferenceLike } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport { ClientSession, maybeClearPinnedConnection } from '../sessions';\nimport { List, type MongoDBNamespace, ns } from '../utils';\n\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kClient = Symbol('client');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n/** @internal */\nconst kInit = Symbol('kInit');\n\n/** @public */\nexport const CURSOR_FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public */\nexport interface CursorStreamOptions {\n  /** A transformation method applied to each document emitted by the stream */\n  transform?(this: void, doc: Document): Document;\n}\n\n/** @public */\nexport type CursorFlag = (typeof CURSOR_FLAGS)[number];\n\n/** @public */\nexport interface AbstractCursorOptions extends BSONSerializeOptions {\n  session?: ClientSession;\n  readPreference?: ReadPreferenceLike;\n  readConcern?: ReadConcernLike;\n  /**\n   * Specifies the number of documents to return in each response from MongoDB\n   */\n  batchSize?: number;\n  /**\n   * When applicable `maxTimeMS` controls the amount of time the initial command\n   * that constructs a cursor should take. (ex. find, aggregate, listCollections)\n   */\n  maxTimeMS?: number;\n  /**\n   * When applicable `maxAwaitTimeMS` controls the amount of time subsequent getMores\n   * that a cursor uses to fetch more data should take. (ex. cursor.next())\n   */\n  maxAwaitTimeMS?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n  /**\n   * By default, MongoDB will automatically close a cursor when the\n   * client has exhausted all results in the cursor. However, for [capped collections](https://www.mongodb.com/docs/manual/core/capped-collections)\n   * you may use a Tailable Cursor that remains open after the client exhausts\n   * the results in the initial cursor.\n   */\n  tailable?: boolean;\n  /**\n   * If awaitData is set to true, when the cursor reaches the end of the capped collection,\n   * MongoDB blocks the query thread for a period of time waiting for new data to arrive.\n   * When new data is inserted into the capped collection, the blocked thread is signaled\n   * to wake up and return the next batch to the client.\n   */\n  awaitData?: boolean;\n  noCursorTimeout?: boolean;\n}\n\n/** @internal */\nexport type InternalAbstractCursorOptions = Omit<AbstractCursorOptions, 'readPreference'> & {\n  // resolved\n  readPreference: ReadPreference;\n  readConcern?: ReadConcern;\n\n  // cursor flags, some are deprecated\n  oplogReplay?: boolean;\n  exhaust?: boolean;\n  partial?: boolean;\n};\n\n/** @public */\nexport type AbstractCursorEvents = {\n  [AbstractCursor.CLOSE](): void;\n};\n\n/** @public */\nexport abstract class AbstractCursor<\n  TSchema = any,\n  CursorEvents extends AbstractCursorEvents = AbstractCursorEvents\n> extends TypedEventEmitter<CursorEvents> {\n  /** @internal */\n  [kId]: Long | null;\n  /** @internal */\n  [kSession]: ClientSession;\n  /** @internal */\n  [kServer]?: Server;\n  /** @internal */\n  [kNamespace]: MongoDBNamespace;\n  /** @internal */\n  [kDocuments]: List<TSchema>;\n  /** @internal */\n  [kClient]: MongoClient;\n  /** @internal */\n  [kTransform]?: (doc: TSchema) => any;\n  /** @internal */\n  [kInitialized]: boolean;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kKilled]: boolean;\n  /** @internal */\n  [kOptions]: InternalAbstractCursorOptions;\n\n  /** @event */\n  static readonly CLOSE = 'close' as const;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    options: AbstractCursorOptions = {}\n  ) {\n    super();\n\n    if (!client.s.isMongoClient) {\n      throw new MongoRuntimeError('Cursor must be constructed with MongoClient');\n    }\n    this[kClient] = client;\n    this[kNamespace] = namespace;\n    this[kId] = null;\n    this[kDocuments] = new List();\n    this[kInitialized] = false;\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kOptions] = {\n      readPreference:\n        options.readPreference && options.readPreference instanceof ReadPreference\n          ? options.readPreference\n          : ReadPreference.primary,\n      ...pluckBSONSerializeOptions(options)\n    };\n\n    const readConcern = ReadConcern.fromOptions(options);\n    if (readConcern) {\n      this[kOptions].readConcern = readConcern;\n    }\n\n    if (typeof options.batchSize === 'number') {\n      this[kOptions].batchSize = options.batchSize;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      this[kOptions].comment = options.comment;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      this[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n\n    if (typeof options.maxAwaitTimeMS === 'number') {\n      this[kOptions].maxAwaitTimeMS = options.maxAwaitTimeMS;\n    }\n\n    if (options.session instanceof ClientSession) {\n      this[kSession] = options.session;\n    } else {\n      this[kSession] = this[kClient].startSession({ owner: this, explicit: false });\n    }\n  }\n\n  get id(): Long | undefined {\n    return this[kId] ?? undefined;\n  }\n\n  /** @internal */\n  get isDead() {\n    return (this[kId]?.isZero() ?? false) || this[kClosed] || this[kKilled];\n  }\n\n  /** @internal */\n  get client(): MongoClient {\n    return this[kClient];\n  }\n\n  /** @internal */\n  get server(): Server | undefined {\n    return this[kServer];\n  }\n\n  get namespace(): MongoDBNamespace {\n    return this[kNamespace];\n  }\n\n  get readPreference(): ReadPreference {\n    return this[kOptions].readPreference;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this[kOptions].readConcern;\n  }\n\n  /** @internal */\n  get session(): ClientSession {\n    return this[kSession];\n  }\n\n  set session(clientSession: ClientSession) {\n    this[kSession] = clientSession;\n  }\n\n  /** @internal */\n  get cursorOptions(): InternalAbstractCursorOptions {\n    return this[kOptions];\n  }\n\n  get closed(): boolean {\n    return this[kClosed];\n  }\n\n  get killed(): boolean {\n    return this[kKilled];\n  }\n\n  get loadBalanced(): boolean {\n    return !!this[kClient].topology?.loadBalanced;\n  }\n\n  /** Returns current buffered documents length */\n  bufferedCount(): number {\n    return this[kDocuments].length;\n  }\n\n  /** Returns current buffered documents */\n  readBufferedDocuments(number?: number): TSchema[] {\n    const bufferedDocs: TSchema[] = [];\n    const documentsToRead = Math.min(number ?? this[kDocuments].length, this[kDocuments].length);\n\n    for (let count = 0; count < documentsToRead; count++) {\n      const document = this[kDocuments].shift();\n      if (document != null) {\n        bufferedDocs.push(document);\n      }\n    }\n\n    return bufferedDocs;\n  }\n\n  async *[Symbol.asyncIterator](): AsyncGenerator<TSchema, void, void> {\n    if (this.closed) {\n      return;\n    }\n\n    try {\n      while (true) {\n        const document = await this.next();\n\n        // Intentional strict null check, because users can map cursors to falsey values.\n        // We allow mapping to all values except for null.\n        // eslint-disable-next-line no-restricted-syntax\n        if (document === null) {\n          if (!this.closed) {\n            const message =\n              'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\n\n            await cleanupCursor(this, { needsToEmitClosed: true }).catch(() => null);\n\n            throw new MongoAPIError(message);\n          }\n          break;\n        }\n\n        yield document;\n\n        if (this[kId] === Long.ZERO) {\n          // Cursor exhausted\n          break;\n        }\n      }\n    } finally {\n      // Only close the cursor if it has not already been closed. This finally clause handles\n      // the case when a user would break out of a for await of loop early.\n      if (!this.closed) {\n        await this.close().catch(() => null);\n      }\n    }\n  }\n\n  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TSchema> {\n    if (options?.transform) {\n      const transform = options.transform;\n      const readable = new ReadableCursorStream(this);\n\n      return readable.pipe(\n        new Transform({\n          objectMode: true,\n          highWaterMark: 1,\n          transform(chunk, _, callback) {\n            try {\n              const transformed = transform(chunk);\n              callback(undefined, transformed);\n            } catch (err) {\n              callback(err);\n            }\n          }\n        })\n      );\n    }\n\n    return new ReadableCursorStream(this);\n  }\n\n  async hasNext(): Promise<boolean> {\n    if (this[kId] === Long.ZERO) {\n      return false;\n    }\n\n    if (this[kDocuments].length !== 0) {\n      return true;\n    }\n\n    const doc = await next<TSchema>(this, { blocking: true, transform: false });\n\n    if (doc) {\n      this[kDocuments].unshift(doc);\n      return true;\n    }\n\n    return false;\n  }\n\n  /** Get the next available document from the cursor, returns null if no more documents are available. */\n  async next(): Promise<TSchema | null> {\n    if (this[kId] === Long.ZERO) {\n      throw new MongoCursorExhaustedError();\n    }\n\n    return next(this, { blocking: true, transform: true });\n  }\n\n  /**\n   * Try to get the next available document from the cursor or `null` if an empty batch is returned\n   */\n  async tryNext(): Promise<TSchema | null> {\n    if (this[kId] === Long.ZERO) {\n      throw new MongoCursorExhaustedError();\n    }\n\n    return next(this, { blocking: false, transform: true });\n  }\n\n  /**\n   * Iterates over all the documents for this cursor using the iterator, callback pattern.\n   *\n   * If the iterator returns `false`, iteration will stop.\n   *\n   * @param iterator - The iteration callback.\n   * @deprecated - Will be removed in a future release. Use for await...of instead.\n   */\n  async forEach(iterator: (doc: TSchema) => boolean | void): Promise<void> {\n    if (typeof iterator !== 'function') {\n      throw new MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n    }\n    for await (const document of this) {\n      const result = iterator(document);\n      if (result === false) {\n        break;\n      }\n    }\n  }\n\n  async close(): Promise<void> {\n    const needsToEmitClosed = !this[kClosed];\n    this[kClosed] = true;\n    await cleanupCursor(this, { needsToEmitClosed });\n  }\n\n  /**\n   * Returns an array of documents. The caller is responsible for making sure that there\n   * is enough memory to store the results. Note that the array only contains partial\n   * results when this cursor had been previously accessed. In that case,\n   * cursor.rewind() can be used to reset the cursor.\n   */\n  async toArray(): Promise<TSchema[]> {\n    const array = [];\n    for await (const document of this) {\n      array.push(document);\n    }\n    return array;\n  }\n\n  /**\n   * Add a cursor flag to the cursor\n   *\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n   * @param value - The flag boolean value.\n   */\n  addCursorFlag(flag: CursorFlag, value: boolean): this {\n    assertUninitialized(this);\n    if (!CURSOR_FLAGS.includes(flag)) {\n      throw new MongoInvalidArgumentError(`Flag ${flag} is not one of ${CURSOR_FLAGS}`);\n    }\n\n    if (typeof value !== 'boolean') {\n      throw new MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n    }\n\n    this[kOptions][flag] = value;\n    return this;\n  }\n\n  /**\n   * Map all documents using the provided function\n   * If there is a transform set on the cursor, that will be called first and the result passed to\n   * this function's transform.\n   *\n   * @remarks\n   *\n   * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n   * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n   * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n   *\n   * ```typescript\n   * const cursor = collection.find({});\n   * cursor.map(() => null);\n   *\n   * const documents = await cursor.toArray();\n   * // documents is always [], regardless of how many documents are in the collection.\n   * ```\n   *\n   * Other falsey values are allowed:\n   *\n   * ```typescript\n   * const cursor = collection.find({});\n   * cursor.map(() => '');\n   *\n   * const documents = await cursor.toArray();\n   * // documents is now an array of empty strings\n   * ```\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling map,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<Document> = coll.find();\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n   * ```\n   * @param transform - The mapping transformation method.\n   */\n  map<T = any>(transform: (doc: TSchema) => T): AbstractCursor<T> {\n    assertUninitialized(this);\n    const oldTransform = this[kTransform] as (doc: TSchema) => TSchema; // TODO(NODE-3283): Improve transform typing\n    if (oldTransform) {\n      this[kTransform] = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this[kTransform] = transform;\n    }\n\n    return this as unknown as AbstractCursor<T>;\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadPreference(readPreference: ReadPreferenceLike): this {\n    assertUninitialized(this);\n    if (readPreference instanceof ReadPreference) {\n      this[kOptions].readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this[kOptions].readPreference = ReadPreference.fromString(readPreference);\n    } else {\n      throw new MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadConcern(readConcern: ReadConcernLike): this {\n    assertUninitialized(this);\n    const resolvedReadConcern = ReadConcern.fromOptions({ readConcern });\n    if (resolvedReadConcern) {\n      this[kOptions].readConcern = resolvedReadConcern;\n    }\n\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set the batch size for the cursor.\n   *\n   * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n   */\n  batchSize(value: number): this {\n    assertUninitialized(this);\n    if (this[kOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support batchSize');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n    }\n\n    this[kOptions].batchSize = value;\n    return this;\n  }\n\n  /**\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n   * if the resultant data has already been retrieved by this cursor.\n   */\n  rewind(): void {\n    if (!this[kInitialized]) {\n      return;\n    }\n\n    this[kId] = null;\n    this[kDocuments].clear();\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kInitialized] = false;\n\n    const session = this[kSession];\n    if (session) {\n      // We only want to end this session if we created it, and it hasn't ended yet\n      if (session.explicit === false) {\n        if (!session.hasEnded) {\n          session.endSession().catch(() => null);\n        }\n        this[kSession] = this.client.startSession({ owner: this, explicit: false });\n      }\n    }\n  }\n\n  /**\n   * Returns a new uninitialized copy of this cursor, with options matching those that have been set on the current instance\n   */\n  abstract clone(): AbstractCursor<TSchema>;\n\n  /** @internal */\n  protected abstract _initialize(session: ClientSession | undefined): Promise<ExecutionResult>;\n\n  /** @internal */\n  async getMore(batchSize: number): Promise<Document | null> {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const getMoreOperation = new GetMoreOperation(this[kNamespace], this[kId]!, this[kServer]!, {\n      ...this[kOptions],\n      session: this[kSession],\n      batchSize\n    });\n\n    return executeOperation(this[kClient], getMoreOperation);\n  }\n\n  /**\n   * @internal\n   *\n   * This function is exposed for the unified test runner's createChangeStream\n   * operation.  We cannot refactor to use the abstract _initialize method without\n   * a significant refactor.\n   */\n  async [kInit](): Promise<void> {\n    try {\n      const state = await this._initialize(this[kSession]);\n      const response = state.response;\n      this[kServer] = state.server;\n      if (response.cursor) {\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        this[kId] =\n          typeof response.cursor.id === 'number'\n            ? Long.fromNumber(response.cursor.id)\n            : typeof response.cursor.id === 'bigint'\n            ? Long.fromBigInt(response.cursor.id)\n            : response.cursor.id;\n\n        if (response.cursor.ns) {\n          this[kNamespace] = ns(response.cursor.ns);\n        }\n\n        this[kDocuments].pushMany(response.cursor.firstBatch);\n      }\n\n      // When server responses return without a cursor document, we close this cursor\n      // and return the raw server response. This is often the case for explain commands\n      // for example\n      if (this[kId] == null) {\n        this[kId] = Long.ZERO;\n        // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n        this[kDocuments].push(state.response as TODO_NODE_3286);\n      }\n\n      // the cursor is now initialized, even if it is dead\n      this[kInitialized] = true;\n    } catch (error) {\n      // the cursor is now initialized, even if an error occurred\n      this[kInitialized] = true;\n      await cleanupCursor(this, { error });\n      throw error;\n    }\n\n    if (this.isDead) {\n      await cleanupCursor(this, undefined);\n    }\n\n    return;\n  }\n}\n\n/**\n * @param cursor - the cursor on which to call `next`\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\n *     not indicate the end of the cursor.\n * @param transform - if true, the cursor's transform function is applied to the result document (if the transform exists)\n * @returns the next document in the cursor, or `null`.  When `blocking` is `true`, a `null` document means\n * the cursor has been exhausted.  Otherwise, it means that there is no document available in the cursor's buffer.\n */\nasync function next<T>(\n  cursor: AbstractCursor<T>,\n  {\n    blocking,\n    transform\n  }: {\n    blocking: boolean;\n    transform: boolean;\n  }\n): Promise<T | null> {\n  if (cursor.closed) {\n    return null;\n  }\n\n  do {\n    if (cursor[kId] == null) {\n      // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n      await cursor[kInit]();\n    }\n\n    if (cursor[kDocuments].length !== 0) {\n      const doc = cursor[kDocuments].shift();\n\n      if (doc != null && transform && cursor[kTransform]) {\n        try {\n          return cursor[kTransform](doc);\n        } catch (error) {\n          // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n          // error instead.\n          await cleanupCursor(cursor, { error, needsToEmitClosed: true }).catch(() => null);\n          throw error;\n        }\n      }\n\n      return doc;\n    }\n\n    if (cursor.isDead) {\n      // if the cursor is dead, we clean it up\n      // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n      // and we should surface the error\n      await cleanupCursor(cursor, {});\n      return null;\n    }\n\n    // otherwise need to call getMore\n    const batchSize = cursor[kOptions].batchSize || 1000;\n\n    try {\n      const response = await cursor.getMore(batchSize);\n\n      if (response) {\n        const cursorId =\n          typeof response.cursor.id === 'number'\n            ? Long.fromNumber(response.cursor.id)\n            : typeof response.cursor.id === 'bigint'\n            ? Long.fromBigInt(response.cursor.id)\n            : response.cursor.id;\n\n        cursor[kDocuments].pushMany(response.cursor.nextBatch);\n        cursor[kId] = cursorId;\n      }\n    } catch (error) {\n      // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n      // error instead.\n      await cleanupCursor(cursor, { error }).catch(() => null);\n      throw error;\n    }\n\n    if (cursor.isDead) {\n      // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\n      // we intentionally clean up the cursor to release its session back into the pool before the cursor\n      // is iterated.  This prevents a cursor that is exhausted on the server from holding\n      // onto a session indefinitely until the AbstractCursor is iterated.\n      //\n      // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n      // and we should surface the error\n      await cleanupCursor(cursor, {});\n    }\n\n    if (cursor[kDocuments].length === 0 && blocking === false) {\n      return null;\n    }\n  } while (!cursor.isDead || cursor[kDocuments].length !== 0);\n\n  return null;\n}\n\nasync function cleanupCursor(\n  cursor: AbstractCursor,\n  options: { error?: AnyError | undefined; needsToEmitClosed?: boolean } | undefined\n): Promise<void> {\n  const cursorId = cursor[kId];\n  const cursorNs = cursor[kNamespace];\n  const server = cursor[kServer];\n  const session = cursor[kSession];\n  const error = options?.error;\n\n  // Cursors only emit closed events once the client-side cursor has been exhausted fully or there\n  // was an error.  Notably, when the server returns a cursor id of 0 and a non-empty batch, we\n  // cleanup the cursor but don't emit a `close` event.\n  const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n\n  if (error) {\n    if (cursor.loadBalanced && error instanceof MongoNetworkError) {\n      return completeCleanup();\n    }\n  }\n\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n    if (needsToEmitClosed) {\n      cursor[kClosed] = true;\n      cursor[kId] = Long.ZERO;\n      cursor.emit(AbstractCursor.CLOSE);\n    }\n\n    if (session) {\n      if (session.owner === cursor) {\n        await session.endSession({ error });\n        return;\n      }\n\n      if (!session.inTransaction()) {\n        maybeClearPinnedConnection(session, { error });\n      }\n    }\n\n    return;\n  }\n\n  async function completeCleanup() {\n    if (session) {\n      if (session.owner === cursor) {\n        try {\n          await session.endSession({ error });\n        } finally {\n          cursor.emit(AbstractCursor.CLOSE);\n        }\n        return;\n      }\n\n      if (!session.inTransaction()) {\n        maybeClearPinnedConnection(session, { error });\n      }\n    }\n\n    cursor.emit(AbstractCursor.CLOSE);\n    return;\n  }\n\n  cursor[kKilled] = true;\n\n  if (session.hasEnded) {\n    return completeCleanup();\n  }\n\n  try {\n    await executeOperation(\n      cursor[kClient],\n      new KillCursorsOperation(cursorId, cursorNs, server, { session })\n    ).catch(() => null);\n  } finally {\n    await completeCleanup();\n  }\n}\n\n/** @internal */\nexport function assertUninitialized(cursor: AbstractCursor): void {\n  if (cursor[kInitialized]) {\n    throw new MongoCursorInUseError();\n  }\n}\n\nclass ReadableCursorStream extends Readable {\n  private _cursor: AbstractCursor;\n  private _readInProgress = false;\n\n  constructor(cursor: AbstractCursor) {\n    super({\n      objectMode: true,\n      autoDestroy: false,\n      highWaterMark: 1\n    });\n    this._cursor = cursor;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override _read(size: number): void {\n    if (!this._readInProgress) {\n      this._readInProgress = true;\n      this._readNext();\n    }\n  }\n\n  override _destroy(error: Error | null, callback: (error?: Error | null) => void): void {\n    this._cursor.close().then(\n      () => callback(error),\n      closeError => callback(closeError)\n    );\n  }\n\n  private _readNext() {\n    next(this._cursor, { blocking: true, transform: true }).then(\n      result => {\n        if (result == null) {\n          this.push(null);\n        } else if (this.destroyed) {\n          this._cursor.close().catch(() => null);\n        } else {\n          if (this.push(result)) {\n            return this._readNext();\n          }\n\n          this._readInProgress = false;\n        }\n      },\n      err => {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          this._cursor.close().catch(() => null);\n          return this.push(null);\n        }\n\n        // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n        if (err.message.match(/operation was interrupted/)) {\n          return this.push(null);\n        }\n\n        // NOTE: The two above checks on the message of the error will cause a null to be pushed\n        //       to the stream, thus closing the stream before the destroy call happens. This means\n        //       that either of those error messages on a change stream will not get a proper\n        //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n        //       relies on that error event to be emitted to create its new cursor and thus was not\n        //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n        //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n        //       See NODE-4475.\n        return this.destroy(err);\n      }\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}