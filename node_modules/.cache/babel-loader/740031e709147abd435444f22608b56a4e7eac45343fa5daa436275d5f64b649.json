{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collection = void 0;\nconst bson_1 = require(\"./bson\");\nconst ordered_1 = require(\"./bulk/ordered\");\nconst unordered_1 = require(\"./bulk/unordered\");\nconst change_stream_1 = require(\"./change_stream\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst find_cursor_1 = require(\"./cursor/find_cursor\");\nconst list_indexes_cursor_1 = require(\"./cursor/list_indexes_cursor\");\nconst list_search_indexes_cursor_1 = require(\"./cursor/list_search_indexes_cursor\");\nconst error_1 = require(\"./error\");\nconst bulk_write_1 = require(\"./operations/bulk_write\");\nconst count_1 = require(\"./operations/count\");\nconst count_documents_1 = require(\"./operations/count_documents\");\nconst delete_1 = require(\"./operations/delete\");\nconst distinct_1 = require(\"./operations/distinct\");\nconst drop_1 = require(\"./operations/drop\");\nconst estimated_document_count_1 = require(\"./operations/estimated_document_count\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst find_and_modify_1 = require(\"./operations/find_and_modify\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst insert_1 = require(\"./operations/insert\");\nconst is_capped_1 = require(\"./operations/is_capped\");\nconst options_operation_1 = require(\"./operations/options_operation\");\nconst rename_1 = require(\"./operations/rename\");\nconst create_1 = require(\"./operations/search_indexes/create\");\nconst drop_2 = require(\"./operations/search_indexes/drop\");\nconst update_1 = require(\"./operations/search_indexes/update\");\nconst update_2 = require(\"./operations/update\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nclass Collection {\n  /**\n   * Create a new Collection instance\n   * @internal\n   */\n  constructor(db, name, options) {\n    (0, utils_1.checkCollectionName)(name);\n    // Internal state\n    this.s = {\n      db,\n      options,\n      namespace: new utils_1.MongoDBCollectionNamespace(db.databaseName, name),\n      pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n    };\n    this.client = db.client;\n  }\n  /**\n   * The name of the database this collection belongs to\n   */\n  get dbName() {\n    return this.s.namespace.db;\n  }\n  /**\n   * The name of this collection\n   */\n  get collectionName() {\n    return this.s.namespace.collection;\n  }\n  /**\n   * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n   */\n  get namespace() {\n    return this.fullNamespace.toString();\n  }\n  /**\n   *  @internal\n   *\n   * The `MongoDBNamespace` for the collection.\n   */\n  get fullNamespace() {\n    return this.s.namespace;\n  }\n  /**\n   * The current readConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get readConcern() {\n    if (this.s.readConcern == null) {\n      return this.s.db.readConcern;\n    }\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.db.readPreference;\n    }\n    return this.s.readPreference;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  /**\n   * The current writeConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get writeConcern() {\n    if (this.s.writeConcern == null) {\n      return this.s.db.writeConcern;\n    }\n    return this.s.writeConcern;\n  }\n  /** The current index hint for the collection */\n  get hint() {\n    return this.s.collectionHint;\n  }\n  set hint(v) {\n    this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n  }\n  /**\n   * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param doc - The document to insert\n   * @param options - Optional settings for the command\n   */\n  async insertOne(doc, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param docs - The documents to insert\n   * @param options - Optional settings for the command\n   */\n  async insertMany(docs, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options ?? {\n      ordered: true\n    })));\n  }\n  /**\n   * Perform a bulkWrite operation without a fluent API\n   *\n   * Legal operation types are\n   * - `insertOne`\n   * - `replaceOne`\n   * - `updateOne`\n   * - `updateMany`\n   * - `deleteOne`\n   * - `deleteMany`\n   *\n   * If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param operations - Bulk operations to perform\n   * @param options - Optional settings for the command\n   * @throws MongoDriverError if operations is not an array\n   */\n  async bulkWrite(operations, options) {\n    if (!Array.isArray(operations)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n    }\n    return (0, execute_operation_1.executeOperation)(this.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options ?? {\n      ordered: true\n    })));\n  }\n  /**\n   * Update a single document in a collection\n   *\n   * @param filter - The filter used to select the document to update\n   * @param update - The update operations to be applied to the document\n   * @param options - Optional settings for the command\n   */\n  async updateOne(filter, update, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Replace a document in a collection with another document\n   *\n   * @param filter - The filter used to select the document to replace\n   * @param replacement - The Document that replaces the matching document\n   * @param options - Optional settings for the command\n   */\n  async replaceOne(filter, replacement, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new update_2.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Update multiple documents in a collection\n   *\n   * @param filter - The filter used to select the documents to update\n   * @param update - The update operations to be applied to the documents\n   * @param options - Optional settings for the command\n   */\n  async updateMany(filter, update, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Delete a document from a collection\n   *\n   * @param filter - The filter used to select the document to remove\n   * @param options - Optional settings for the command\n   */\n  async deleteOne(filter = {}, options = {}) {\n    return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Delete multiple documents from a collection\n   *\n   * @param filter - The filter used to select the documents to remove\n   * @param options - Optional settings for the command\n   */\n  async deleteMany(filter = {}, options = {}) {\n    return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Rename the collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the Db or MongoClient.\n   *\n   * @param newName - New name of of the collection.\n   * @param options - Optional settings for the command\n   */\n  async rename(newName, options) {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this, newName, {\n      ...options,\n      readPreference: read_preference_1.ReadPreference.PRIMARY\n    }));\n  }\n  /**\n   * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  async drop(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options));\n  }\n  async findOne(filter = {}, options = {}) {\n    return this.find(filter, options).limit(-1).batchSize(1).next();\n  }\n  find(filter = {}, options = {}) {\n    return new find_cursor_1.FindCursor(this.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Returns the options of the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  async options(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Returns if the collection is a capped collection\n   *\n   * @param options - Optional settings for the command\n   */\n  async isCapped(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Creates an index on the db and collection collection.\n   *\n   * @param indexSpec - The field name or index specification to create an index for\n   * @param options - Optional settings for the command\n   *\n   * @example\n   * ```ts\n   * const collection = client.db('foo').collection('bar');\n   *\n   * await collection.createIndex({ a: 1, b: -1 });\n   *\n   * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n   * await collection.createIndex([ [c, 1], [d, -1] ]);\n   *\n   * // Equivalent to { e: 1 }\n   * await collection.createIndex('e');\n   *\n   * // Equivalent to { f: 1, g: 1 }\n   * await collection.createIndex(['f', 'g'])\n   *\n   * // Equivalent to { h: 1, i: -1 }\n   * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n   *\n   * // Equivalent to { j: 1, k: -1, l: 2d }\n   * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n   * ```\n   */\n  async createIndex(indexSpec, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Creates multiple indexes in the collection, this method is only supported for\n   * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n   * error.\n   *\n   * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n   * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n   *\n   * @param indexSpecs - An array of index specifications to be created\n   * @param options - Optional settings for the command\n   *\n   * @example\n   * ```ts\n   * const collection = client.db('foo').collection('bar');\n   * await collection.createIndexes([\n   *   // Simple index on field fizz\n   *   {\n   *     key: { fizz: 1 },\n   *   }\n   *   // wildcard index\n   *   {\n   *     key: { '$**': 1 }\n   *   },\n   *   // named index on darmok and jalad\n   *   {\n   *     key: { darmok: 1, jalad: -1 }\n   *     name: 'tanagra'\n   *   }\n   * ]);\n   * ```\n   */\n  async createIndexes(indexSpecs, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexesOperation(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, {\n      ...options,\n      maxTimeMS: undefined\n    })));\n  }\n  /**\n   * Drops an index from this collection.\n   *\n   * @param indexName - Name of the index to drop.\n   * @param options - Optional settings for the command\n   */\n  async dropIndex(indexName, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, indexName, {\n      ...(0, utils_1.resolveOptions)(this, options),\n      readPreference: read_preference_1.ReadPreference.primary\n    }));\n  }\n  /**\n   * Drops all indexes from this collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  async dropIndexes(options) {\n    try {\n      await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, '*', (0, utils_1.resolveOptions)(this, options)));\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  /**\n   * Get the list of all indexes information for the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  listIndexes(options) {\n    return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Checks if one or more indexes exist on the collection, fails on first non-existing index\n   *\n   * @param indexes - One or more index names to check.\n   * @param options - Optional settings for the command\n   */\n  async indexExists(indexes, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexExistsOperation(this, indexes, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param options - Optional settings for the command\n   */\n  async indexInformation(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this.s.db, this.collectionName, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Gets an estimate of the count of documents in a collection using collection metadata.\n   * This will always run a count command on all server versions.\n   *\n   * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n   * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n   * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n   * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n   * encountering errors.\n   *\n   * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n   * @param options - Optional settings for the command\n   */\n  async estimatedDocumentCount(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Gets the number of documents matching the filter.\n   * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n   * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n   * the following query operators must be replaced:\n   *\n   * | Operator | Replacement |\n   * | -------- | ----------- |\n   * | `$where`   | [`$expr`][1] |\n   * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n   * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n   *\n   * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n   * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n   * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n   * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n   *\n   * @param filter - The filter for the count\n   * @param options - Optional settings for the command\n   *\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n   */\n  async countDocuments(filter = {}, options = {}) {\n    return (0, execute_operation_1.executeOperation)(this.client, new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n  }\n  async distinct(key, filter = {}, options = {}) {\n    return (0, execute_operation_1.executeOperation)(this.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Retrieve all the indexes on the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  async indexes(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexesOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  async findOneAndDelete(filter, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n  }\n  async findOneAndReplace(filter, replacement, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n  }\n  async findOneAndUpdate(filter, update, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n   *\n   * @param pipeline - An array of aggregation pipelines to execute\n   * @param options - Optional settings for the command\n   */\n  aggregate(pipeline = [], options) {\n    if (!Array.isArray(pipeline)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n    }\n    return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to override the schema that may be defined for this specific collection\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   * @example\n   * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n   * ```ts\n   * collection.watch<{ _id: number }>()\n   *   .on('change', change => console.log(change._id.toFixed(4)));\n   * ```\n   *\n   * @example\n   * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n   * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n   * No need start from scratch on the ChangeStreamInsertDocument type!\n   * By using an intersection we can save time and ensure defaults remain the same type!\n   * ```ts\n   * collection\n   *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n   *     { $addFields: { comment: 'big changes' } },\n   *     { $match: { operationType: 'insert' } }\n   *   ])\n   *   .on('change', change => {\n   *     change.comment.startsWith('big');\n   *     change.operationType === 'insert';\n   *     // No need to narrow in code because the generics did that for us!\n   *     expectType<Schema>(change.fullDocument);\n   *   });\n   * ```\n   *\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TLocal - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch(pipeline = [], options = {}) {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n   *\n   * @throws MongoNotConnectedError\n   * @remarks\n   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n   */\n  initializeUnorderedBulkOp(options) {\n    return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n   *\n   * @throws MongoNotConnectedError\n   * @remarks\n   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n   */\n  initializeOrderedBulkOp(options) {\n    return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * An estimated count of matching documents in the db to a filter.\n   *\n   * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n   * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n   * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n   *\n   * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n   *\n   * @param filter - The filter for the count.\n   * @param options - Optional settings for the command\n   */\n  async count(filter = {}, options = {}) {\n    return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.fullNamespace, filter, (0, utils_1.resolveOptions)(this, options)));\n  }\n  listSearchIndexes(indexNameOrOptions, options) {\n    options = typeof indexNameOrOptions === 'object' ? indexNameOrOptions : options == null ? {} : options;\n    const indexName = indexNameOrOptions == null ? null : typeof indexNameOrOptions === 'object' ? null : indexNameOrOptions;\n    return new list_search_indexes_cursor_1.ListSearchIndexesCursor(this, indexName, options);\n  }\n  /**\n   * Creates a single search index for the collection.\n   *\n   * @param description - The index description for the new search index.\n   * @returns A promise that resolves to the name of the new search index.\n   *\n   * @remarks Only available when used against a 7.0+ Atlas cluster.\n   */\n  async createSearchIndex(description) {\n    const [index] = await this.createSearchIndexes([description]);\n    return index;\n  }\n  /**\n   * Creates multiple search indexes for the current collection.\n   *\n   * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n   * @returns A promise that resolves to an array of the newly created search index names.\n   *\n   * @remarks Only available when used against a 7.0+ Atlas cluster.\n   * @returns\n   */\n  async createSearchIndexes(descriptions) {\n    return (0, execute_operation_1.executeOperation)(this.client, new create_1.CreateSearchIndexesOperation(this, descriptions));\n  }\n  /**\n   * Deletes a search index by index name.\n   *\n   * @param name - The name of the search index to be deleted.\n   *\n   * @remarks Only available when used against a 7.0+ Atlas cluster.\n   */\n  async dropSearchIndex(name) {\n    return (0, execute_operation_1.executeOperation)(this.client, new drop_2.DropSearchIndexOperation(this, name));\n  }\n  /**\n   * Updates a search index by replacing the existing index definition with the provided definition.\n   *\n   * @param name - The name of the search index to update.\n   * @param definition - The new search index definition.\n   *\n   * @remarks Only available when used against a 7.0+ Atlas cluster.\n   */\n  async updateSearchIndex(name, definition) {\n    return (0, execute_operation_1.executeOperation)(this.client, new update_1.UpdateSearchIndexOperation(this, name, definition));\n  }\n}\nexports.Collection = Collection;","map":{"version":3,"names":["bson_1","require","ordered_1","unordered_1","change_stream_1","aggregation_cursor_1","find_cursor_1","list_indexes_cursor_1","list_search_indexes_cursor_1","error_1","bulk_write_1","count_1","count_documents_1","delete_1","distinct_1","drop_1","estimated_document_count_1","execute_operation_1","find_and_modify_1","indexes_1","insert_1","is_capped_1","options_operation_1","rename_1","create_1","drop_2","update_1","update_2","read_concern_1","read_preference_1","utils_1","write_concern_1","Collection","constructor","db","name","options","checkCollectionName","s","namespace","MongoDBCollectionNamespace","databaseName","pkFactory","DEFAULT_PK_FACTORY","readPreference","ReadPreference","fromOptions","bsonOptions","resolveBSONOptions","readConcern","ReadConcern","writeConcern","WriteConcern","client","dbName","collectionName","collection","fullNamespace","toString","hint","collectionHint","v","normalizeHintField","insertOne","doc","executeOperation","InsertOneOperation","resolveOptions","insertMany","docs","InsertManyOperation","ordered","bulkWrite","operations","Array","isArray","MongoInvalidArgumentError","BulkWriteOperation","updateOne","filter","update","UpdateOneOperation","replaceOne","replacement","ReplaceOneOperation","updateMany","UpdateManyOperation","deleteOne","DeleteOneOperation","deleteMany","DeleteManyOperation","rename","newName","RenameOperation","PRIMARY","drop","DropCollectionOperation","findOne","find","limit","batchSize","next","FindCursor","OptionsOperation","isCapped","IsCappedOperation","createIndex","indexSpec","CreateIndexOperation","createIndexes","indexSpecs","CreateIndexesOperation","maxTimeMS","undefined","dropIndex","indexName","DropIndexOperation","primary","dropIndexes","listIndexes","ListIndexesCursor","indexExists","indexes","IndexExistsOperation","indexInformation","IndexInformationOperation","estimatedDocumentCount","EstimatedDocumentCountOperation","countDocuments","CountDocumentsOperation","distinct","key","DistinctOperation","IndexesOperation","findOneAndDelete","FindOneAndDeleteOperation","findOneAndReplace","FindOneAndReplaceOperation","findOneAndUpdate","FindOneAndUpdateOperation","aggregate","pipeline","AggregationCursor","watch","ChangeStream","initializeUnorderedBulkOp","UnorderedBulkOperation","initializeOrderedBulkOp","OrderedBulkOperation","count","CountOperation","listSearchIndexes","indexNameOrOptions","ListSearchIndexesCursor","createSearchIndex","description","index","createSearchIndexes","descriptions","CreateSearchIndexesOperation","dropSearchIndex","DropSearchIndexOperation","updateSearchIndex","definition","UpdateSearchIndexOperation","exports"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\collection.ts"],"sourcesContent":["import { type BSONSerializeOptions, type Document, resolveBSONOptions } from './bson';\nimport type { AnyBulkWriteOperation, BulkWriteOptions, BulkWriteResult } from './bulk/common';\nimport { OrderedBulkOperation } from './bulk/ordered';\nimport { UnorderedBulkOperation } from './bulk/unordered';\nimport { ChangeStream, type ChangeStreamDocument, type ChangeStreamOptions } from './change_stream';\nimport { AggregationCursor } from './cursor/aggregation_cursor';\nimport { FindCursor } from './cursor/find_cursor';\nimport { ListIndexesCursor } from './cursor/list_indexes_cursor';\nimport {\n  ListSearchIndexesCursor,\n  type ListSearchIndexesOptions\n} from './cursor/list_search_indexes_cursor';\nimport type { Db } from './db';\nimport { MongoInvalidArgumentError } from './error';\nimport type { MongoClient, PkFactory } from './mongo_client';\nimport type {\n  Filter,\n  Flatten,\n  OptionalUnlessRequiredId,\n  TODO_NODE_3286,\n  UpdateFilter,\n  WithId,\n  WithoutId\n} from './mongo_types';\nimport type { AggregateOptions } from './operations/aggregate';\nimport { BulkWriteOperation } from './operations/bulk_write';\nimport type { IndexInformationOptions } from './operations/common_functions';\nimport { CountOperation, type CountOptions } from './operations/count';\nimport { CountDocumentsOperation, type CountDocumentsOptions } from './operations/count_documents';\nimport {\n  DeleteManyOperation,\n  DeleteOneOperation,\n  type DeleteOptions,\n  type DeleteResult\n} from './operations/delete';\nimport { DistinctOperation, type DistinctOptions } from './operations/distinct';\nimport { DropCollectionOperation, type DropCollectionOptions } from './operations/drop';\nimport {\n  EstimatedDocumentCountOperation,\n  type EstimatedDocumentCountOptions\n} from './operations/estimated_document_count';\nimport { executeOperation } from './operations/execute_operation';\nimport type { FindOptions } from './operations/find';\nimport {\n  FindOneAndDeleteOperation,\n  type FindOneAndDeleteOptions,\n  FindOneAndReplaceOperation,\n  type FindOneAndReplaceOptions,\n  FindOneAndUpdateOperation,\n  type FindOneAndUpdateOptions\n} from './operations/find_and_modify';\nimport {\n  CreateIndexesOperation,\n  type CreateIndexesOptions,\n  CreateIndexOperation,\n  type DropIndexesOptions,\n  DropIndexOperation,\n  type IndexDescription,\n  IndexesOperation,\n  IndexExistsOperation,\n  IndexInformationOperation,\n  type IndexSpecification,\n  type ListIndexesOptions\n} from './operations/indexes';\nimport {\n  InsertManyOperation,\n  type InsertManyResult,\n  InsertOneOperation,\n  type InsertOneOptions,\n  type InsertOneResult\n} from './operations/insert';\nimport { IsCappedOperation } from './operations/is_capped';\nimport type { Hint, OperationOptions } from './operations/operation';\nimport { OptionsOperation } from './operations/options_operation';\nimport { RenameOperation, type RenameOptions } from './operations/rename';\nimport {\n  CreateSearchIndexesOperation,\n  type SearchIndexDescription\n} from './operations/search_indexes/create';\nimport { DropSearchIndexOperation } from './operations/search_indexes/drop';\nimport { UpdateSearchIndexOperation } from './operations/search_indexes/update';\nimport {\n  ReplaceOneOperation,\n  type ReplaceOptions,\n  UpdateManyOperation,\n  UpdateOneOperation,\n  type UpdateOptions,\n  type UpdateResult\n} from './operations/update';\nimport { ReadConcern, type ReadConcernLike } from './read_concern';\nimport { ReadPreference, type ReadPreferenceLike } from './read_preference';\nimport {\n  checkCollectionName,\n  DEFAULT_PK_FACTORY,\n  MongoDBCollectionNamespace,\n  normalizeHintField,\n  resolveOptions\n} from './utils';\nimport { WriteConcern, type WriteConcernOptions } from './write_concern';\n\n/** @public */\nexport interface ModifyResult<TSchema = Document> {\n  value: WithId<TSchema> | null;\n  lastErrorObject?: Document;\n  ok: 0 | 1;\n}\n\n/** @public */\nexport interface CollectionOptions extends BSONSerializeOptions, WriteConcernOptions {\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcernLike;\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n  readPreference?: ReadPreferenceLike;\n}\n\n/** @internal */\nexport interface CollectionPrivate {\n  pkFactory: PkFactory;\n  db: Db;\n  options: any;\n  namespace: MongoDBCollectionNamespace;\n  readPreference?: ReadPreference;\n  bsonOptions: BSONSerializeOptions;\n  collectionHint?: Hint;\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n}\n\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nexport class Collection<TSchema extends Document = Document> {\n  /** @internal */\n  s: CollectionPrivate;\n\n  /** @internal */\n  client: MongoClient;\n\n  /**\n   * Create a new Collection instance\n   * @internal\n   */\n  constructor(db: Db, name: string, options?: CollectionOptions) {\n    checkCollectionName(name);\n\n    // Internal state\n    this.s = {\n      db,\n      options,\n      namespace: new MongoDBCollectionNamespace(db.databaseName, name),\n      pkFactory: db.options?.pkFactory ?? DEFAULT_PK_FACTORY,\n      readPreference: ReadPreference.fromOptions(options),\n      bsonOptions: resolveBSONOptions(options, db),\n      readConcern: ReadConcern.fromOptions(options),\n      writeConcern: WriteConcern.fromOptions(options)\n    };\n\n    this.client = db.client;\n  }\n\n  /**\n   * The name of the database this collection belongs to\n   */\n  get dbName(): string {\n    return this.s.namespace.db;\n  }\n\n  /**\n   * The name of this collection\n   */\n  get collectionName(): string {\n    return this.s.namespace.collection;\n  }\n\n  /**\n   * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n   */\n  get namespace(): string {\n    return this.fullNamespace.toString();\n  }\n\n  /**\n   *  @internal\n   *\n   * The `MongoDBNamespace` for the collection.\n   */\n  get fullNamespace(): MongoDBCollectionNamespace {\n    return this.s.namespace;\n  }\n\n  /**\n   * The current readConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get readConcern(): ReadConcern | undefined {\n    if (this.s.readConcern == null) {\n      return this.s.db.readConcern;\n    }\n    return this.s.readConcern;\n  }\n\n  /**\n   * The current readPreference of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get readPreference(): ReadPreference | undefined {\n    if (this.s.readPreference == null) {\n      return this.s.db.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  /**\n   * The current writeConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get writeConcern(): WriteConcern | undefined {\n    if (this.s.writeConcern == null) {\n      return this.s.db.writeConcern;\n    }\n    return this.s.writeConcern;\n  }\n\n  /** The current index hint for the collection */\n  get hint(): Hint | undefined {\n    return this.s.collectionHint;\n  }\n\n  set hint(v: Hint | undefined) {\n    this.s.collectionHint = normalizeHintField(v);\n  }\n\n  /**\n   * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param doc - The document to insert\n   * @param options - Optional settings for the command\n   */\n  async insertOne(\n    doc: OptionalUnlessRequiredId<TSchema>,\n    options?: InsertOneOptions\n  ): Promise<InsertOneResult<TSchema>> {\n    return executeOperation(\n      this.client,\n      new InsertOneOperation(\n        this as TODO_NODE_3286,\n        doc,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param docs - The documents to insert\n   * @param options - Optional settings for the command\n   */\n  async insertMany(\n    docs: OptionalUnlessRequiredId<TSchema>[],\n    options?: BulkWriteOptions\n  ): Promise<InsertManyResult<TSchema>> {\n    return executeOperation(\n      this.client,\n      new InsertManyOperation(\n        this as TODO_NODE_3286,\n        docs,\n        resolveOptions(this, options ?? { ordered: true })\n      ) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Perform a bulkWrite operation without a fluent API\n   *\n   * Legal operation types are\n   * - `insertOne`\n   * - `replaceOne`\n   * - `updateOne`\n   * - `updateMany`\n   * - `deleteOne`\n   * - `deleteMany`\n   *\n   * If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param operations - Bulk operations to perform\n   * @param options - Optional settings for the command\n   * @throws MongoDriverError if operations is not an array\n   */\n  async bulkWrite(\n    operations: AnyBulkWriteOperation<TSchema>[],\n    options?: BulkWriteOptions\n  ): Promise<BulkWriteResult> {\n    if (!Array.isArray(operations)) {\n      throw new MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n    }\n\n    return executeOperation(\n      this.client,\n      new BulkWriteOperation(\n        this as TODO_NODE_3286,\n        operations as TODO_NODE_3286,\n        resolveOptions(this, options ?? { ordered: true })\n      )\n    );\n  }\n\n  /**\n   * Update a single document in a collection\n   *\n   * @param filter - The filter used to select the document to update\n   * @param update - The update operations to be applied to the document\n   * @param options - Optional settings for the command\n   */\n  async updateOne(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\n    options?: UpdateOptions\n  ): Promise<UpdateResult<TSchema>> {\n    return executeOperation(\n      this.client,\n      new UpdateOneOperation(\n        this as TODO_NODE_3286,\n        filter,\n        update,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Replace a document in a collection with another document\n   *\n   * @param filter - The filter used to select the document to replace\n   * @param replacement - The Document that replaces the matching document\n   * @param options - Optional settings for the command\n   */\n  async replaceOne(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options?: ReplaceOptions\n  ): Promise<UpdateResult<TSchema> | Document> {\n    return executeOperation(\n      this.client,\n      new ReplaceOneOperation(\n        this as TODO_NODE_3286,\n        filter,\n        replacement,\n        resolveOptions(this, options)\n      )\n    );\n  }\n\n  /**\n   * Update multiple documents in a collection\n   *\n   * @param filter - The filter used to select the documents to update\n   * @param update - The update operations to be applied to the documents\n   * @param options - Optional settings for the command\n   */\n  async updateMany(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options?: UpdateOptions\n  ): Promise<UpdateResult<TSchema>> {\n    return executeOperation(\n      this.client,\n      new UpdateManyOperation(\n        this as TODO_NODE_3286,\n        filter,\n        update,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Delete a document from a collection\n   *\n   * @param filter - The filter used to select the document to remove\n   * @param options - Optional settings for the command\n   */\n  async deleteOne(\n    filter: Filter<TSchema> = {},\n    options: DeleteOptions = {}\n  ): Promise<DeleteResult> {\n    return executeOperation(\n      this.client,\n      new DeleteOneOperation(this as TODO_NODE_3286, filter, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Delete multiple documents from a collection\n   *\n   * @param filter - The filter used to select the documents to remove\n   * @param options - Optional settings for the command\n   */\n  async deleteMany(\n    filter: Filter<TSchema> = {},\n    options: DeleteOptions = {}\n  ): Promise<DeleteResult> {\n    return executeOperation(\n      this.client,\n      new DeleteManyOperation(this as TODO_NODE_3286, filter, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Rename the collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the Db or MongoClient.\n   *\n   * @param newName - New name of of the collection.\n   * @param options - Optional settings for the command\n   */\n  async rename(newName: string, options?: RenameOptions): Promise<Collection> {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(\n      this.client,\n      new RenameOperation(this as TODO_NODE_3286, newName, {\n        ...options,\n        readPreference: ReadPreference.PRIMARY\n      }) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  async drop(options?: DropCollectionOptions): Promise<boolean> {\n    return executeOperation(\n      this.client,\n      new DropCollectionOperation(this.s.db, this.collectionName, options)\n    );\n  }\n\n  /**\n   * Fetches the first document that matches the filter\n   *\n   * @param filter - Query for find Operation\n   * @param options - Optional settings for the command\n   */\n  async findOne(): Promise<WithId<TSchema> | null>;\n  async findOne(filter: Filter<TSchema>): Promise<WithId<TSchema> | null>;\n  async findOne(filter: Filter<TSchema>, options: FindOptions): Promise<WithId<TSchema> | null>;\n\n  // allow an override of the schema.\n  async findOne<T = TSchema>(): Promise<T | null>;\n  async findOne<T = TSchema>(filter: Filter<TSchema>): Promise<T | null>;\n  async findOne<T = TSchema>(filter: Filter<TSchema>, options?: FindOptions): Promise<T | null>;\n\n  async findOne(\n    filter: Filter<TSchema> = {},\n    options: FindOptions = {}\n  ): Promise<WithId<TSchema> | null> {\n    return this.find(filter, options).limit(-1).batchSize(1).next();\n  }\n\n  /**\n   * Creates a cursor for a filter that can be used to iterate over results from MongoDB\n   *\n   * @param filter - The filter predicate. If unspecified, then all documents in the collection will match the predicate\n   */\n  find(): FindCursor<WithId<TSchema>>;\n  find(filter: Filter<TSchema>, options?: FindOptions): FindCursor<WithId<TSchema>>;\n  find<T extends Document>(filter: Filter<TSchema>, options?: FindOptions): FindCursor<T>;\n  find(filter: Filter<TSchema> = {}, options: FindOptions = {}): FindCursor<WithId<TSchema>> {\n    return new FindCursor<WithId<TSchema>>(\n      this.client,\n      this.s.namespace,\n      filter,\n      resolveOptions(this as TODO_NODE_3286, options)\n    );\n  }\n\n  /**\n   * Returns the options of the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  async options(options?: OperationOptions): Promise<Document> {\n    return executeOperation(\n      this.client,\n      new OptionsOperation(this as TODO_NODE_3286, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Returns if the collection is a capped collection\n   *\n   * @param options - Optional settings for the command\n   */\n  async isCapped(options?: OperationOptions): Promise<boolean> {\n    return executeOperation(\n      this.client,\n      new IsCappedOperation(this as TODO_NODE_3286, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Creates an index on the db and collection collection.\n   *\n   * @param indexSpec - The field name or index specification to create an index for\n   * @param options - Optional settings for the command\n   *\n   * @example\n   * ```ts\n   * const collection = client.db('foo').collection('bar');\n   *\n   * await collection.createIndex({ a: 1, b: -1 });\n   *\n   * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n   * await collection.createIndex([ [c, 1], [d, -1] ]);\n   *\n   * // Equivalent to { e: 1 }\n   * await collection.createIndex('e');\n   *\n   * // Equivalent to { f: 1, g: 1 }\n   * await collection.createIndex(['f', 'g'])\n   *\n   * // Equivalent to { h: 1, i: -1 }\n   * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n   *\n   * // Equivalent to { j: 1, k: -1, l: 2d }\n   * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n   * ```\n   */\n  async createIndex(\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ): Promise<string> {\n    return executeOperation(\n      this.client,\n      new CreateIndexOperation(\n        this as TODO_NODE_3286,\n        this.collectionName,\n        indexSpec,\n        resolveOptions(this, options)\n      )\n    );\n  }\n\n  /**\n   * Creates multiple indexes in the collection, this method is only supported for\n   * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n   * error.\n   *\n   * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n   * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n   *\n   * @param indexSpecs - An array of index specifications to be created\n   * @param options - Optional settings for the command\n   *\n   * @example\n   * ```ts\n   * const collection = client.db('foo').collection('bar');\n   * await collection.createIndexes([\n   *   // Simple index on field fizz\n   *   {\n   *     key: { fizz: 1 },\n   *   }\n   *   // wildcard index\n   *   {\n   *     key: { '$**': 1 }\n   *   },\n   *   // named index on darmok and jalad\n   *   {\n   *     key: { darmok: 1, jalad: -1 }\n   *     name: 'tanagra'\n   *   }\n   * ]);\n   * ```\n   */\n  async createIndexes(\n    indexSpecs: IndexDescription[],\n    options?: CreateIndexesOptions\n  ): Promise<string[]> {\n    return executeOperation(\n      this.client,\n      new CreateIndexesOperation(\n        this as TODO_NODE_3286,\n        this.collectionName,\n        indexSpecs,\n        resolveOptions(this, { ...options, maxTimeMS: undefined })\n      )\n    );\n  }\n\n  /**\n   * Drops an index from this collection.\n   *\n   * @param indexName - Name of the index to drop.\n   * @param options - Optional settings for the command\n   */\n  async dropIndex(indexName: string, options?: DropIndexesOptions): Promise<Document> {\n    return executeOperation(\n      this.client,\n      new DropIndexOperation(this as TODO_NODE_3286, indexName, {\n        ...resolveOptions(this, options),\n        readPreference: ReadPreference.primary\n      })\n    );\n  }\n\n  /**\n   * Drops all indexes from this collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  async dropIndexes(options?: DropIndexesOptions): Promise<boolean> {\n    try {\n      await executeOperation(\n        this.client,\n        new DropIndexOperation(this as TODO_NODE_3286, '*', resolveOptions(this, options))\n      );\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get the list of all indexes information for the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  listIndexes(options?: ListIndexesOptions): ListIndexesCursor {\n    return new ListIndexesCursor(this as TODO_NODE_3286, resolveOptions(this, options));\n  }\n\n  /**\n   * Checks if one or more indexes exist on the collection, fails on first non-existing index\n   *\n   * @param indexes - One or more index names to check.\n   * @param options - Optional settings for the command\n   */\n  async indexExists(\n    indexes: string | string[],\n    options?: IndexInformationOptions\n  ): Promise<boolean> {\n    return executeOperation(\n      this.client,\n      new IndexExistsOperation(this as TODO_NODE_3286, indexes, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param options - Optional settings for the command\n   */\n  async indexInformation(options?: IndexInformationOptions): Promise<Document> {\n    return executeOperation(\n      this.client,\n      new IndexInformationOperation(this.s.db, this.collectionName, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Gets an estimate of the count of documents in a collection using collection metadata.\n   * This will always run a count command on all server versions.\n   *\n   * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n   * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n   * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n   * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n   * encountering errors.\n   *\n   * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n   * @param options - Optional settings for the command\n   */\n  async estimatedDocumentCount(options?: EstimatedDocumentCountOptions): Promise<number> {\n    return executeOperation(\n      this.client,\n      new EstimatedDocumentCountOperation(this as TODO_NODE_3286, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Gets the number of documents matching the filter.\n   * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n   * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n   * the following query operators must be replaced:\n   *\n   * | Operator | Replacement |\n   * | -------- | ----------- |\n   * | `$where`   | [`$expr`][1] |\n   * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n   * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n   *\n   * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n   * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n   * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n   * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n   *\n   * @param filter - The filter for the count\n   * @param options - Optional settings for the command\n   *\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n   */\n  async countDocuments(\n    filter: Document = {},\n    options: CountDocumentsOptions = {}\n  ): Promise<number> {\n    return executeOperation(\n      this.client,\n      new CountDocumentsOperation(this as TODO_NODE_3286, filter, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * The distinct command returns a list of distinct values for the given key across a collection.\n   *\n   * @param key - Field of the document to find distinct values for\n   * @param filter - The filter for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings for the command\n   */\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter: Filter<TSchema>\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter: Filter<TSchema>,\n    options: DistinctOptions\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n\n  // Embedded documents overload\n  distinct(key: string): Promise<any[]>;\n  distinct(key: string, filter: Filter<TSchema>): Promise<any[]>;\n  distinct(key: string, filter: Filter<TSchema>, options: DistinctOptions): Promise<any[]>;\n\n  async distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter: Filter<TSchema> = {},\n    options: DistinctOptions = {}\n  ): Promise<any[]> {\n    return executeOperation(\n      this.client,\n      new DistinctOperation(\n        this as TODO_NODE_3286,\n        key as TODO_NODE_3286,\n        filter,\n        resolveOptions(this, options)\n      )\n    );\n  }\n\n  /**\n   * Retrieve all the indexes on the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  async indexes(options?: IndexInformationOptions): Promise<Document[]> {\n    return executeOperation(\n      this.client,\n      new IndexesOperation(this as TODO_NODE_3286, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Find a document and delete it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to remove\n   * @param options - Optional settings for the command\n   */\n  async findOneAndDelete(\n    filter: Filter<TSchema>,\n    options: FindOneAndDeleteOptions & { includeResultMetadata: true }\n  ): Promise<ModifyResult<TSchema>>;\n  async findOneAndDelete(\n    filter: Filter<TSchema>,\n    options: FindOneAndDeleteOptions & { includeResultMetadata: false }\n  ): Promise<WithId<TSchema> | null>;\n  async findOneAndDelete(\n    filter: Filter<TSchema>,\n    options: FindOneAndDeleteOptions\n  ): Promise<WithId<TSchema> | null>;\n  async findOneAndDelete(filter: Filter<TSchema>): Promise<WithId<TSchema> | null>;\n  async findOneAndDelete(\n    filter: Filter<TSchema>,\n    options?: FindOneAndDeleteOptions\n  ): Promise<WithId<TSchema> | ModifyResult<TSchema> | null> {\n    return executeOperation(\n      this.client,\n      new FindOneAndDeleteOperation(\n        this as TODO_NODE_3286,\n        filter,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Find a document and replace it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to replace\n   * @param replacement - The Document that replaces the matching document\n   * @param options - Optional settings for the command\n   */\n  async findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options: FindOneAndReplaceOptions & { includeResultMetadata: true }\n  ): Promise<ModifyResult<TSchema>>;\n  async findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options: FindOneAndReplaceOptions & { includeResultMetadata: false }\n  ): Promise<WithId<TSchema> | null>;\n  async findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options: FindOneAndReplaceOptions\n  ): Promise<WithId<TSchema> | null>;\n  async findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>\n  ): Promise<WithId<TSchema> | null>;\n  async findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options?: FindOneAndReplaceOptions\n  ): Promise<WithId<TSchema> | ModifyResult<TSchema> | null> {\n    return executeOperation(\n      this.client,\n      new FindOneAndReplaceOperation(\n        this as TODO_NODE_3286,\n        filter,\n        replacement,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to update\n   * @param update - Update operations to be performed on the document\n   * @param options - Optional settings for the command\n   */\n  async findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: FindOneAndUpdateOptions & { includeResultMetadata: true }\n  ): Promise<ModifyResult<TSchema>>;\n  async findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: FindOneAndUpdateOptions & { includeResultMetadata: false }\n  ): Promise<WithId<TSchema> | null>;\n  async findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: FindOneAndUpdateOptions\n  ): Promise<WithId<TSchema> | null>;\n  async findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>\n  ): Promise<WithId<TSchema> | null>;\n  async findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options?: FindOneAndUpdateOptions\n  ): Promise<WithId<TSchema> | ModifyResult<TSchema> | null> {\n    return executeOperation(\n      this.client,\n      new FindOneAndUpdateOperation(\n        this as TODO_NODE_3286,\n        filter,\n        update,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n   *\n   * @param pipeline - An array of aggregation pipelines to execute\n   * @param options - Optional settings for the command\n   */\n  aggregate<T extends Document = Document>(\n    pipeline: Document[] = [],\n    options?: AggregateOptions\n  ): AggregationCursor<T> {\n    if (!Array.isArray(pipeline)) {\n      throw new MongoInvalidArgumentError(\n        'Argument \"pipeline\" must be an array of aggregation stages'\n      );\n    }\n\n    return new AggregationCursor(\n      this.client,\n      this.s.namespace,\n      pipeline,\n      resolveOptions(this, options)\n    );\n  }\n\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to override the schema that may be defined for this specific collection\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   * @example\n   * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n   * ```ts\n   * collection.watch<{ _id: number }>()\n   *   .on('change', change => console.log(change._id.toFixed(4)));\n   * ```\n   *\n   * @example\n   * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n   * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n   * No need start from scratch on the ChangeStreamInsertDocument type!\n   * By using an intersection we can save time and ensure defaults remain the same type!\n   * ```ts\n   * collection\n   *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n   *     { $addFields: { comment: 'big changes' } },\n   *     { $match: { operationType: 'insert' } }\n   *   ])\n   *   .on('change', change => {\n   *     change.comment.startsWith('big');\n   *     change.operationType === 'insert';\n   *     // No need to narrow in code because the generics did that for us!\n   *     expectType<Schema>(change.fullDocument);\n   *   });\n   * ```\n   *\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TLocal - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch<TLocal extends Document = TSchema, TChange extends Document = ChangeStreamDocument<TLocal>>(\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ): ChangeStream<TLocal, TChange> {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new ChangeStream<TLocal, TChange>(this, pipeline, resolveOptions(this, options));\n  }\n\n  /**\n   * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n   *\n   * @throws MongoNotConnectedError\n   * @remarks\n   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n   */\n  initializeUnorderedBulkOp(options?: BulkWriteOptions): UnorderedBulkOperation {\n    return new UnorderedBulkOperation(this as TODO_NODE_3286, resolveOptions(this, options));\n  }\n\n  /**\n   * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n   *\n   * @throws MongoNotConnectedError\n   * @remarks\n   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n   */\n  initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation {\n    return new OrderedBulkOperation(this as TODO_NODE_3286, resolveOptions(this, options));\n  }\n\n  /**\n   * An estimated count of matching documents in the db to a filter.\n   *\n   * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n   * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n   * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n   *\n   * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n   *\n   * @param filter - The filter for the count.\n   * @param options - Optional settings for the command\n   */\n  async count(filter: Filter<TSchema> = {}, options: CountOptions = {}): Promise<number> {\n    return executeOperation(\n      this.client,\n      new CountOperation(this.fullNamespace, filter, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Returns all search indexes for the current collection.\n   *\n   * @param options - The options for the list indexes operation.\n   *\n   * @remarks Only available when used against a 7.0+ Atlas cluster.\n   */\n  listSearchIndexes(options?: ListSearchIndexesOptions): ListSearchIndexesCursor;\n  /**\n   * Returns all search indexes for the current collection.\n   *\n   * @param name - The name of the index to search for.  Only indexes with matching index names will be returned.\n   * @param options - The options for the list indexes operation.\n   *\n   * @remarks Only available when used against a 7.0+ Atlas cluster.\n   */\n  listSearchIndexes(name: string, options?: ListSearchIndexesOptions): ListSearchIndexesCursor;\n  listSearchIndexes(\n    indexNameOrOptions?: string | ListSearchIndexesOptions,\n    options?: ListSearchIndexesOptions\n  ): ListSearchIndexesCursor {\n    options =\n      typeof indexNameOrOptions === 'object' ? indexNameOrOptions : options == null ? {} : options;\n    const indexName =\n      indexNameOrOptions == null\n        ? null\n        : typeof indexNameOrOptions === 'object'\n        ? null\n        : indexNameOrOptions;\n\n    return new ListSearchIndexesCursor(this as TODO_NODE_3286, indexName, options);\n  }\n\n  /**\n   * Creates a single search index for the collection.\n   *\n   * @param description - The index description for the new search index.\n   * @returns A promise that resolves to the name of the new search index.\n   *\n   * @remarks Only available when used against a 7.0+ Atlas cluster.\n   */\n  async createSearchIndex(description: SearchIndexDescription): Promise<string> {\n    const [index] = await this.createSearchIndexes([description]);\n    return index;\n  }\n\n  /**\n   * Creates multiple search indexes for the current collection.\n   *\n   * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n   * @returns A promise that resolves to an array of the newly created search index names.\n   *\n   * @remarks Only available when used against a 7.0+ Atlas cluster.\n   * @returns\n   */\n  async createSearchIndexes(descriptions: SearchIndexDescription[]): Promise<string[]> {\n    return executeOperation(\n      this.client,\n      new CreateSearchIndexesOperation(this as TODO_NODE_3286, descriptions)\n    );\n  }\n\n  /**\n   * Deletes a search index by index name.\n   *\n   * @param name - The name of the search index to be deleted.\n   *\n   * @remarks Only available when used against a 7.0+ Atlas cluster.\n   */\n  async dropSearchIndex(name: string): Promise<void> {\n    return executeOperation(\n      this.client,\n      new DropSearchIndexOperation(this as TODO_NODE_3286, name)\n    );\n  }\n\n  /**\n   * Updates a search index by replacing the existing index definition with the provided definition.\n   *\n   * @param name - The name of the search index to update.\n   * @param definition - The new search index definition.\n   *\n   * @remarks Only available when used against a 7.0+ Atlas cluster.\n   */\n  async updateSearchIndex(name: string, definition: Document): Promise<void> {\n    return executeOperation(\n      this.client,\n      new UpdateSearchIndexOperation(this as TODO_NODE_3286, name, definition)\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}