{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _defineProperty = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _stateMachine;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nvar error_1 = require(\"./error\");\nvar read_concern_1 = require(\"./read_concern\");\nvar read_preference_1 = require(\"./read_preference\");\nvar write_concern_1 = require(\"./write_concern\");\n/** @internal */\nexports.TxnState = Object.freeze({\n  NO_TRANSACTION: 'NO_TRANSACTION',\n  STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n  TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n  TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n  TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n  TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nvar stateMachine = (_stateMachine = {}, _defineProperty(_stateMachine, exports.TxnState.NO_TRANSACTION, [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION]), _defineProperty(_stateMachine, exports.TxnState.STARTING_TRANSACTION, [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED]), _defineProperty(_stateMachine, exports.TxnState.TRANSACTION_IN_PROGRESS, [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_ABORTED]), _defineProperty(_stateMachine, exports.TxnState.TRANSACTION_COMMITTED, [exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION]), _defineProperty(_stateMachine, exports.TxnState.TRANSACTION_ABORTED, [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION]), _defineProperty(_stateMachine, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, [exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.NO_TRANSACTION]), _stateMachine);\nvar ACTIVE_STATES = new Set([exports.TxnState.STARTING_TRANSACTION, exports.TxnState.TRANSACTION_IN_PROGRESS]);\nvar COMMITTED_STATES = new Set([exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nvar Transaction = /*#__PURE__*/function () {\n  /** Create a transaction @internal */\n  function Transaction(options) {\n    var _options;\n    _classCallCheck(this, Transaction);\n    options = (_options = options) !== null && _options !== void 0 ? _options : {};\n    this.state = exports.TxnState.NO_TRANSACTION;\n    this.options = {};\n    var writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      if (writeConcern.w === 0) {\n        throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n      }\n      this.options.writeConcern = writeConcern;\n    }\n    if (options.readConcern) {\n      this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    }\n    if (options.readPreference) {\n      this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n    }\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    }\n    // TODO: This isn't technically necessary\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n  /** @internal */\n  _createClass(Transaction, [{\n    key: \"server\",\n    get: function get() {\n      return this._pinnedServer;\n    }\n  }, {\n    key: \"recoveryToken\",\n    get: function get() {\n      return this._recoveryToken;\n    }\n  }, {\n    key: \"isPinned\",\n    get: function get() {\n      return !!this.server;\n    }\n    /** @returns Whether the transaction has started */\n  }, {\n    key: \"isStarting\",\n    get: function get() {\n      return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      return ACTIVE_STATES.has(this.state);\n    }\n  }, {\n    key: \"isCommitted\",\n    get: function get() {\n      return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n  }, {\n    key: \"transition\",\n    value: function transition(nextState) {\n      var nextStates = stateMachine[this.state];\n      if (nextStates && nextStates.includes(nextState)) {\n        this.state = nextState;\n        if (this.state === exports.TxnState.NO_TRANSACTION || this.state === exports.TxnState.STARTING_TRANSACTION || this.state === exports.TxnState.TRANSACTION_ABORTED) {\n          this.unpinServer();\n        }\n        return;\n      }\n      throw new error_1.MongoRuntimeError(\"Attempted illegal state transition from [\".concat(this.state, \"] to [\").concat(nextState, \"]\"));\n    }\n    /** @internal */\n  }, {\n    key: \"pinServer\",\n    value: function pinServer(server) {\n      if (this.isActive) {\n        this._pinnedServer = server;\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"unpinServer\",\n    value: function unpinServer() {\n      this._pinnedServer = undefined;\n    }\n  }]);\n  return Transaction;\n}();\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand;","map":{"version":3,"names":["error_1","require","read_concern_1","read_preference_1","write_concern_1","exports","TxnState","Object","freeze","NO_TRANSACTION","STARTING_TRANSACTION","TRANSACTION_IN_PROGRESS","TRANSACTION_COMMITTED","TRANSACTION_COMMITTED_EMPTY","TRANSACTION_ABORTED","stateMachine","_stateMachine","_defineProperty","ACTIVE_STATES","Set","COMMITTED_STATES","Transaction","options","_options","_classCallCheck","state","writeConcern","WriteConcern","fromOptions","w","MongoTransactionError","readConcern","ReadConcern","readPreference","ReadPreference","maxCommitTimeMS","maxTimeMS","_pinnedServer","undefined","_recoveryToken","_createClass","key","get","server","has","value","transition","nextState","nextStates","includes","unpinServer","MongoRuntimeError","concat","pinServer","isActive","isTransactionCommand","command","commitTransaction","abortTransaction"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\transactions.ts"],"sourcesContent":["import type { Document } from './bson';\nimport { MongoRuntimeError, MongoTransactionError } from './error';\nimport type { CommandOperationOptions } from './operations/command';\nimport { ReadConcern, type ReadConcernLike } from './read_concern';\nimport type { ReadPreferenceLike } from './read_preference';\nimport { ReadPreference } from './read_preference';\nimport type { Server } from './sdam/server';\nimport { WriteConcern } from './write_concern';\n\n/** @internal */\nexport const TxnState = Object.freeze({\n  NO_TRANSACTION: 'NO_TRANSACTION',\n  STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n  TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n  TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n  TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n  TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n} as const);\n\n/** @internal */\nexport type TxnState = (typeof TxnState)[keyof typeof TxnState];\n\nconst stateMachine: { [state in TxnState]: TxnState[] } = {\n  [TxnState.NO_TRANSACTION]: [TxnState.NO_TRANSACTION, TxnState.STARTING_TRANSACTION],\n  [TxnState.STARTING_TRANSACTION]: [\n    TxnState.TRANSACTION_IN_PROGRESS,\n    TxnState.TRANSACTION_COMMITTED,\n    TxnState.TRANSACTION_COMMITTED_EMPTY,\n    TxnState.TRANSACTION_ABORTED\n  ],\n  [TxnState.TRANSACTION_IN_PROGRESS]: [\n    TxnState.TRANSACTION_IN_PROGRESS,\n    TxnState.TRANSACTION_COMMITTED,\n    TxnState.TRANSACTION_ABORTED\n  ],\n  [TxnState.TRANSACTION_COMMITTED]: [\n    TxnState.TRANSACTION_COMMITTED,\n    TxnState.TRANSACTION_COMMITTED_EMPTY,\n    TxnState.STARTING_TRANSACTION,\n    TxnState.NO_TRANSACTION\n  ],\n  [TxnState.TRANSACTION_ABORTED]: [TxnState.STARTING_TRANSACTION, TxnState.NO_TRANSACTION],\n  [TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n    TxnState.TRANSACTION_COMMITTED_EMPTY,\n    TxnState.NO_TRANSACTION\n  ]\n};\n\nconst ACTIVE_STATES: Set<TxnState> = new Set([\n  TxnState.STARTING_TRANSACTION,\n  TxnState.TRANSACTION_IN_PROGRESS\n]);\n\nconst COMMITTED_STATES: Set<TxnState> = new Set([\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_COMMITTED_EMPTY,\n  TxnState.TRANSACTION_ABORTED\n]);\n\n/**\n * Configuration options for a transaction.\n * @public\n */\nexport interface TransactionOptions extends CommandOperationOptions {\n  // TODO(NODE-3344): These options use the proper class forms of these settings, it should accept the basic enum values too\n  /** A default read concern for commands in this transaction */\n  readConcern?: ReadConcernLike;\n  /** A default writeConcern for commands in this transaction */\n  writeConcern?: WriteConcern;\n  /** A default read preference for commands in this transaction */\n  readPreference?: ReadPreferenceLike;\n  /** Specifies the maximum amount of time to allow a commit action on a transaction to run in milliseconds */\n  maxCommitTimeMS?: number;\n}\n\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nexport class Transaction {\n  /** @internal */\n  state: TxnState;\n  options: TransactionOptions;\n  /** @internal */\n  _pinnedServer?: Server;\n  /** @internal */\n  _recoveryToken?: Document;\n\n  /** Create a transaction @internal */\n  constructor(options?: TransactionOptions) {\n    options = options ?? {};\n    this.state = TxnState.NO_TRANSACTION;\n    this.options = {};\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      if (writeConcern.w === 0) {\n        throw new MongoTransactionError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = writeConcern;\n    }\n\n    if (options.readConcern) {\n      this.options.readConcern = ReadConcern.fromOptions(options);\n    }\n\n    if (options.readPreference) {\n      this.options.readPreference = ReadPreference.fromOptions(options);\n    }\n\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    }\n\n    // TODO: This isn't technically necessary\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n\n  /** @internal */\n  get server(): Server | undefined {\n    return this._pinnedServer;\n  }\n\n  get recoveryToken(): Document | undefined {\n    return this._recoveryToken;\n  }\n\n  get isPinned(): boolean {\n    return !!this.server;\n  }\n\n  /** @returns Whether the transaction has started */\n  get isStarting(): boolean {\n    return this.state === TxnState.STARTING_TRANSACTION;\n  }\n\n  /**\n   * @returns Whether this session is presently in a transaction\n   */\n  get isActive(): boolean {\n    return ACTIVE_STATES.has(this.state);\n  }\n\n  get isCommitted(): boolean {\n    return COMMITTED_STATES.has(this.state);\n  }\n  /**\n   * Transition the transaction in the state machine\n   * @internal\n   * @param nextState - The new state to transition to\n   */\n  transition(nextState: TxnState): void {\n    const nextStates = stateMachine[this.state];\n    if (nextStates && nextStates.includes(nextState)) {\n      this.state = nextState;\n      if (\n        this.state === TxnState.NO_TRANSACTION ||\n        this.state === TxnState.STARTING_TRANSACTION ||\n        this.state === TxnState.TRANSACTION_ABORTED\n      ) {\n        this.unpinServer();\n      }\n      return;\n    }\n\n    throw new MongoRuntimeError(\n      `Attempted illegal state transition from [${this.state}] to [${nextState}]`\n    );\n  }\n\n  /** @internal */\n  pinServer(server: Server): void {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n\n  /** @internal */\n  unpinServer(): void {\n    this._pinnedServer = undefined;\n  }\n}\n\nexport function isTransactionCommand(command: Document): boolean {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}