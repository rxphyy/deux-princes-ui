{"ast":null,"code":"var fs = require('fs');\nvar path = require('path');\nvar os = require('os');\nvar crypto = require('crypto');\nvar packageJson = require('../package.json');\nvar version = packageJson.version;\nvar LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n\n// Parse src into an Object\nfunction parse(src) {\n  var obj = {};\n\n  // Convert buffer to string\n  var lines = src.toString();\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n');\n  var match;\n  while ((match = LINE.exec(lines)) != null) {\n    var key = match[1];\n\n    // Default undefined or null to empty string\n    var value = match[2] || '';\n\n    // Remove whitespace\n    value = value.trim();\n\n    // Check if double quoted\n    var maybeQuote = value[0];\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2');\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n');\n      value = value.replace(/\\\\r/g, '\\r');\n    }\n\n    // Add to object\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _parseVault(options) {\n  var vaultPath = _vaultPath(options);\n\n  // Parse .env.vault\n  var result = DotenvModule.configDotenv({\n    path: vaultPath\n  });\n  if (!result.parsed) {\n    throw new Error(\"MISSING_DATA: Cannot parse \".concat(vaultPath, \" for an unknown reason\"));\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod\"\n  var keys = _dotenvKey(options).split(',');\n  var length = keys.length;\n  var decrypted;\n  for (var i = 0; i < length; i++) {\n    try {\n      // Get full key\n      var key = keys[i].trim();\n\n      // Get instructions for decrypt\n      var attrs = _instructions(result, key);\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);\n      break;\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error;\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted);\n}\nfunction _log(message) {\n  console.log(\"[dotenv@\".concat(version, \"][INFO] \").concat(message));\n}\nfunction _warn(message) {\n  console.log(\"[dotenv@\".concat(version, \"][WARN] \").concat(message));\n}\nfunction _debug(message) {\n  console.log(\"[dotenv@\".concat(version, \"][DEBUG] \").concat(message));\n}\nfunction _dotenvKey(options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY;\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY;\n  }\n\n  // fallback to empty string\n  return '';\n}\nfunction _instructions(result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  var uri;\n  try {\n    uri = new URL(dotenvKey);\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      throw new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development');\n    }\n    throw error;\n  }\n\n  // Get decrypt key\n  var key = uri.password;\n  if (!key) {\n    throw new Error('INVALID_DOTENV_KEY: Missing key part');\n  }\n\n  // Get environment\n  var environment = uri.searchParams.get('environment');\n  if (!environment) {\n    throw new Error('INVALID_DOTENV_KEY: Missing environment part');\n  }\n\n  // Get ciphertext payload\n  var environmentKey = \"DOTENV_VAULT_\".concat(environment.toUpperCase());\n  var ciphertext = result.parsed[environmentKey]; // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    throw new Error(\"NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment \".concat(environmentKey, \" in your .env.vault file.\"));\n  }\n  return {\n    ciphertext: ciphertext,\n    key: key\n  };\n}\nfunction _vaultPath(options) {\n  var dotenvPath = path.resolve(process.cwd(), '.env');\n  if (options && options.path && options.path.length > 0) {\n    dotenvPath = options.path;\n  }\n\n  // Locate .env.vault\n  return dotenvPath.endsWith('.vault') ? dotenvPath : \"\".concat(dotenvPath, \".vault\");\n}\nfunction _resolveHome(envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath;\n}\nfunction _configVault(options) {\n  _log('Loading env from encrypted .env.vault');\n  var parsed = DotenvModule._parseVault(options);\n  var processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n  DotenvModule.populate(processEnv, parsed, options);\n  return {\n    parsed: parsed\n  };\n}\nfunction configDotenv(options) {\n  var dotenvPath = path.resolve(process.cwd(), '.env');\n  var encoding = 'utf8';\n  var debug = Boolean(options && options.debug);\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path);\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n  }\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    var parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, {\n      encoding: encoding\n    }));\n    var processEnv = process.env;\n    if (options && options.processEnv != null) {\n      processEnv = options.processEnv;\n    }\n    DotenvModule.populate(processEnv, parsed, options);\n    return {\n      parsed: parsed\n    };\n  } catch (e) {\n    if (debug) {\n      _debug(\"Failed to load \".concat(dotenvPath, \" \").concat(e.message));\n    }\n    return {\n      error: e\n    };\n  }\n}\n\n// Populates process.env from .env file\nfunction config(options) {\n  var vaultPath = _vaultPath(options);\n\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options);\n  }\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!fs.existsSync(vaultPath)) {\n    _warn(\"You set DOTENV_KEY but you are missing a .env.vault file at \".concat(vaultPath, \". Did you forget to build it?\"));\n    return DotenvModule.configDotenv(options);\n  }\n  return DotenvModule._configVault(options);\n}\nfunction decrypt(encrypted, keyStr) {\n  var key = Buffer.from(keyStr.slice(-64), 'hex');\n  var ciphertext = Buffer.from(encrypted, 'base64');\n  var nonce = ciphertext.slice(0, 12);\n  var authTag = ciphertext.slice(-16);\n  ciphertext = ciphertext.slice(12, -16);\n  try {\n    var aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce);\n    aesgcm.setAuthTag(authTag);\n    return \"\".concat(aesgcm.update(ciphertext)).concat(aesgcm.final());\n  } catch (error) {\n    var isRange = error instanceof RangeError;\n    var invalidKeyLength = error.message === 'Invalid key length';\n    var decryptionFailed = error.message === 'Unsupported state or unable to authenticate data';\n    if (isRange || invalidKeyLength) {\n      var msg = 'INVALID_DOTENV_KEY: It must be 64 characters long (or more)';\n      throw new Error(msg);\n    } else if (decryptionFailed) {\n      var _msg = 'DECRYPTION_FAILED: Please check your DOTENV_KEY';\n      throw new Error(_msg);\n    } else {\n      console.error('Error: ', error.code);\n      console.error('Error: ', error.message);\n      throw error;\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate(processEnv, parsed) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var debug = Boolean(options && options.debug);\n  var override = Boolean(options && options.override);\n  if (typeof parsed !== 'object') {\n    throw new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate');\n  }\n\n  // Set process.env\n  for (var _i = 0, _Object$keys = Object.keys(parsed); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key];\n      }\n      if (debug) {\n        if (override === true) {\n          _debug(\"\\\"\".concat(key, \"\\\" is already defined and WAS overwritten\"));\n        } else {\n          _debug(\"\\\"\".concat(key, \"\\\" is already defined and was NOT overwritten\"));\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key];\n    }\n  }\n}\nvar DotenvModule = {\n  configDotenv: configDotenv,\n  _configVault: _configVault,\n  _parseVault: _parseVault,\n  config: config,\n  decrypt: decrypt,\n  parse: parse,\n  populate: populate\n};\nmodule.exports.configDotenv = DotenvModule.configDotenv;\nmodule.exports._configVault = DotenvModule._configVault;\nmodule.exports._parseVault = DotenvModule._parseVault;\nmodule.exports.config = DotenvModule.config;\nmodule.exports.decrypt = DotenvModule.decrypt;\nmodule.exports.parse = DotenvModule.parse;\nmodule.exports.populate = DotenvModule.populate;\nmodule.exports = DotenvModule;","map":{"version":3,"names":["fs","require","path","os","crypto","packageJson","version","LINE","parse","src","obj","lines","toString","replace","match","exec","key","value","trim","maybeQuote","_parseVault","options","vaultPath","_vaultPath","result","DotenvModule","configDotenv","parsed","Error","concat","keys","_dotenvKey","split","length","decrypted","i","attrs","_instructions","decrypt","ciphertext","error","_log","message","console","log","_warn","_debug","DOTENV_KEY","process","env","dotenvKey","uri","URL","code","password","environment","searchParams","get","environmentKey","toUpperCase","dotenvPath","resolve","cwd","endsWith","_resolveHome","envPath","join","homedir","slice","_configVault","processEnv","populate","encoding","debug","Boolean","readFileSync","e","config","existsSync","encrypted","keyStr","Buffer","from","nonce","authTag","aesgcm","createDecipheriv","setAuthTag","update","final","isRange","RangeError","invalidKeyLength","decryptionFailed","msg","arguments","undefined","override","_i","_Object$keys","Object","prototype","hasOwnProperty","call","module","exports"],"sources":["C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/dotenv/lib/main.js"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    throw new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      throw new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development')\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    throw new Error('INVALID_DOTENV_KEY: Missing key part')\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    throw new Error('INVALID_DOTENV_KEY: Missing environment part')\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n\n  if (options && options.path && options.path.length > 0) {\n    dotenvPath = options.path\n  }\n\n  // Locate .env.vault\n  return dotenvPath.endsWith('.vault') ? dotenvPath : `${dotenvPath}.vault`\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault')\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    let processEnv = process.env\n    if (options && options.processEnv != null) {\n      processEnv = options.processEnv\n    }\n\n    DotenvModule.populate(processEnv, parsed, options)\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _debug(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  const vaultPath = _vaultPath(options)\n\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!fs.existsSync(vaultPath)) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.slice(0, 12)\n  const authTag = ciphertext.slice(-16)\n  ciphertext = ciphertext.slice(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const msg = 'INVALID_DOTENV_KEY: It must be 64 characters long (or more)'\n      throw new Error(msg)\n    } else if (decryptionFailed) {\n      const msg = 'DECRYPTION_FAILED: Please check your DOTENV_KEY'\n      throw new Error(msg)\n    } else {\n      console.error('Error: ', error.code)\n      console.error('Error: ', error.message)\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    throw new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}