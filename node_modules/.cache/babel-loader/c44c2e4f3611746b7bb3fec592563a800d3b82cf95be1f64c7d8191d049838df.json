{"ast":null,"code":"'use strict';\n\nconst isStream = require('is-stream');\nconst getStream = require('get-stream');\nconst mergeStream = require('merge-stream');\n\n// `input` option\nconst handleInput = (spawned, input) => {\n  // Checking for stdin is workaround for https://github.com/nodejs/node/issues/26852\n  // @todo remove `|| spawned.stdin === undefined` once we drop support for Node.js <=12.2.0\n  if (input === undefined || spawned.stdin === undefined) {\n    return;\n  }\n  if (isStream(input)) {\n    input.pipe(spawned.stdin);\n  } else {\n    spawned.stdin.end(input);\n  }\n};\n\n// `all` interleaves `stdout` and `stderr`\nconst makeAllStream = (spawned, {\n  all\n}) => {\n  if (!all || !spawned.stdout && !spawned.stderr) {\n    return;\n  }\n  const mixed = mergeStream();\n  if (spawned.stdout) {\n    mixed.add(spawned.stdout);\n  }\n  if (spawned.stderr) {\n    mixed.add(spawned.stderr);\n  }\n  return mixed;\n};\n\n// On failure, `result.stdout|stderr|all` should contain the currently buffered stream\nconst getBufferedData = async (stream, streamPromise) => {\n  if (!stream) {\n    return;\n  }\n  stream.destroy();\n  try {\n    return await streamPromise;\n  } catch (error) {\n    return error.bufferedData;\n  }\n};\nconst getStreamPromise = (stream, {\n  encoding,\n  buffer,\n  maxBuffer\n}) => {\n  if (!stream || !buffer) {\n    return;\n  }\n  if (encoding) {\n    return getStream(stream, {\n      encoding,\n      maxBuffer\n    });\n  }\n  return getStream.buffer(stream, {\n    maxBuffer\n  });\n};\n\n// Retrieve result of child process: exit code, signal, error, streams (stdout/stderr/all)\nconst getSpawnedResult = async ({\n  stdout,\n  stderr,\n  all\n}, {\n  encoding,\n  buffer,\n  maxBuffer\n}, processDone) => {\n  const stdoutPromise = getStreamPromise(stdout, {\n    encoding,\n    buffer,\n    maxBuffer\n  });\n  const stderrPromise = getStreamPromise(stderr, {\n    encoding,\n    buffer,\n    maxBuffer\n  });\n  const allPromise = getStreamPromise(all, {\n    encoding,\n    buffer,\n    maxBuffer: maxBuffer * 2\n  });\n  try {\n    return await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);\n  } catch (error) {\n    return Promise.all([{\n      error,\n      signal: error.signal,\n      timedOut: error.timedOut\n    }, getBufferedData(stdout, stdoutPromise), getBufferedData(stderr, stderrPromise), getBufferedData(all, allPromise)]);\n  }\n};\nconst validateInputSync = ({\n  input\n}) => {\n  if (isStream(input)) {\n    throw new TypeError('The `input` option cannot be a stream in sync mode');\n  }\n};\nmodule.exports = {\n  handleInput,\n  makeAllStream,\n  getSpawnedResult,\n  validateInputSync\n};","map":{"version":3,"names":["isStream","require","getStream","mergeStream","handleInput","spawned","input","undefined","stdin","pipe","end","makeAllStream","all","stdout","stderr","mixed","add","getBufferedData","stream","streamPromise","destroy","error","bufferedData","getStreamPromise","encoding","buffer","maxBuffer","getSpawnedResult","processDone","stdoutPromise","stderrPromise","allPromise","Promise","signal","timedOut","validateInputSync","TypeError","module","exports"],"sources":["C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/execa/lib/stream.js"],"sourcesContent":["'use strict';\nconst isStream = require('is-stream');\nconst getStream = require('get-stream');\nconst mergeStream = require('merge-stream');\n\n// `input` option\nconst handleInput = (spawned, input) => {\n\t// Checking for stdin is workaround for https://github.com/nodejs/node/issues/26852\n\t// @todo remove `|| spawned.stdin === undefined` once we drop support for Node.js <=12.2.0\n\tif (input === undefined || spawned.stdin === undefined) {\n\t\treturn;\n\t}\n\n\tif (isStream(input)) {\n\t\tinput.pipe(spawned.stdin);\n\t} else {\n\t\tspawned.stdin.end(input);\n\t}\n};\n\n// `all` interleaves `stdout` and `stderr`\nconst makeAllStream = (spawned, {all}) => {\n\tif (!all || (!spawned.stdout && !spawned.stderr)) {\n\t\treturn;\n\t}\n\n\tconst mixed = mergeStream();\n\n\tif (spawned.stdout) {\n\t\tmixed.add(spawned.stdout);\n\t}\n\n\tif (spawned.stderr) {\n\t\tmixed.add(spawned.stderr);\n\t}\n\n\treturn mixed;\n};\n\n// On failure, `result.stdout|stderr|all` should contain the currently buffered stream\nconst getBufferedData = async (stream, streamPromise) => {\n\tif (!stream) {\n\t\treturn;\n\t}\n\n\tstream.destroy();\n\n\ttry {\n\t\treturn await streamPromise;\n\t} catch (error) {\n\t\treturn error.bufferedData;\n\t}\n};\n\nconst getStreamPromise = (stream, {encoding, buffer, maxBuffer}) => {\n\tif (!stream || !buffer) {\n\t\treturn;\n\t}\n\n\tif (encoding) {\n\t\treturn getStream(stream, {encoding, maxBuffer});\n\t}\n\n\treturn getStream.buffer(stream, {maxBuffer});\n};\n\n// Retrieve result of child process: exit code, signal, error, streams (stdout/stderr/all)\nconst getSpawnedResult = async ({stdout, stderr, all}, {encoding, buffer, maxBuffer}, processDone) => {\n\tconst stdoutPromise = getStreamPromise(stdout, {encoding, buffer, maxBuffer});\n\tconst stderrPromise = getStreamPromise(stderr, {encoding, buffer, maxBuffer});\n\tconst allPromise = getStreamPromise(all, {encoding, buffer, maxBuffer: maxBuffer * 2});\n\n\ttry {\n\t\treturn await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);\n\t} catch (error) {\n\t\treturn Promise.all([\n\t\t\t{error, signal: error.signal, timedOut: error.timedOut},\n\t\t\tgetBufferedData(stdout, stdoutPromise),\n\t\t\tgetBufferedData(stderr, stderrPromise),\n\t\t\tgetBufferedData(all, allPromise)\n\t\t]);\n\t}\n};\n\nconst validateInputSync = ({input}) => {\n\tif (isStream(input)) {\n\t\tthrow new TypeError('The `input` option cannot be a stream in sync mode');\n\t}\n};\n\nmodule.exports = {\n\thandleInput,\n\tmakeAllStream,\n\tgetSpawnedResult,\n\tvalidateInputSync\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}