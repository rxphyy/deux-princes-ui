{"ast":null,"code":"const isWindows = process.platform === 'win32' || process.env.OSTYPE === 'cygwin' || process.env.OSTYPE === 'msys';\nconst path = require('path');\nconst COLON = isWindows ? ';' : ':';\nconst isexe = require('isexe');\nconst getNotFoundError = cmd => Object.assign(new Error(`not found: ${cmd}`), {\n  code: 'ENOENT'\n});\nconst getPathInfo = (cmd, opt) => {\n  const colon = opt.colon || COLON;\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv = cmd.match(/\\//) || isWindows && cmd.match(/\\\\/) ? [''] : [\n  // windows always checks the cwd first\n  ...(isWindows ? [process.cwd()] : []), ...(opt.path || process.env.PATH || /* istanbul ignore next: very unusual */'').split(colon)];\n  const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM' : '';\n  const pathExt = isWindows ? pathExtExe.split(colon) : [''];\n  if (isWindows) {\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '') pathExt.unshift('');\n  }\n  return {\n    pathEnv,\n    pathExt,\n    pathExtExe\n  };\n};\nconst which = (cmd, opt, cb) => {\n  if (typeof opt === 'function') {\n    cb = opt;\n    opt = {};\n  }\n  if (!opt) opt = {};\n  const {\n    pathEnv,\n    pathExt,\n    pathExtExe\n  } = getPathInfo(cmd, opt);\n  const found = [];\n  const step = i => new Promise((resolve, reject) => {\n    if (i === pathEnv.length) return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));\n    const ppRaw = pathEnv[i];\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;\n    const pCmd = path.join(pathPart, cmd);\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;\n    resolve(subStep(p, i, 0));\n  });\n  const subStep = (p, i, ii) => new Promise((resolve, reject) => {\n    if (ii === pathExt.length) return resolve(step(i + 1));\n    const ext = pathExt[ii];\n    isexe(p + ext, {\n      pathExt: pathExtExe\n    }, (er, is) => {\n      if (!er && is) {\n        if (opt.all) found.push(p + ext);else return resolve(p + ext);\n      }\n      return resolve(subStep(p, i, ii + 1));\n    });\n  });\n  return cb ? step(0).then(res => cb(null, res), cb) : step(0);\n};\nconst whichSync = (cmd, opt) => {\n  opt = opt || {};\n  const {\n    pathEnv,\n    pathExt,\n    pathExtExe\n  } = getPathInfo(cmd, opt);\n  const found = [];\n  for (let i = 0; i < pathEnv.length; i++) {\n    const ppRaw = pathEnv[i];\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;\n    const pCmd = path.join(pathPart, cmd);\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;\n    for (let j = 0; j < pathExt.length; j++) {\n      const cur = p + pathExt[j];\n      try {\n        const is = isexe.sync(cur, {\n          pathExt: pathExtExe\n        });\n        if (is) {\n          if (opt.all) found.push(cur);else return cur;\n        }\n      } catch (ex) {}\n    }\n  }\n  if (opt.all && found.length) return found;\n  if (opt.nothrow) return null;\n  throw getNotFoundError(cmd);\n};\nmodule.exports = which;\nwhich.sync = whichSync;","map":{"version":3,"names":["isWindows","process","platform","env","OSTYPE","path","require","COLON","isexe","getNotFoundError","cmd","Object","assign","Error","code","getPathInfo","opt","colon","pathEnv","match","cwd","PATH","split","pathExtExe","pathExt","PATHEXT","indexOf","unshift","which","cb","found","step","i","Promise","resolve","reject","length","all","ppRaw","pathPart","test","slice","pCmd","join","p","subStep","ii","ext","er","is","push","then","res","whichSync","j","cur","sync","ex","nothrow","module","exports"],"sources":["C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/which/which.js"],"sourcesContent":["const isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nconst path = require('path')\nconst COLON = isWindows ? ';' : ':'\nconst isexe = require('isexe')\n\nconst getNotFoundError = (cmd) =>\n  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' })\n\nconst getPathInfo = (cmd, opt) => {\n  const colon = opt.colon || COLON\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv = cmd.match(/\\//) || isWindows && cmd.match(/\\\\/) ? ['']\n    : (\n      [\n        // windows always checks the cwd first\n        ...(isWindows ? [process.cwd()] : []),\n        ...(opt.path || process.env.PATH ||\n          /* istanbul ignore next: very unusual */ '').split(colon),\n      ]\n    )\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'\n    : ''\n  const pathExt = isWindows ? pathExtExe.split(colon) : ['']\n\n  if (isWindows) {\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  return {\n    pathEnv,\n    pathExt,\n    pathExtExe,\n  }\n}\n\nconst which = (cmd, opt, cb) => {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n  if (!opt)\n    opt = {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  const step = i => new Promise((resolve, reject) => {\n    if (i === pathEnv.length)\n      return opt.all && found.length ? resolve(found)\n        : reject(getNotFoundError(cmd))\n\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    resolve(subStep(p, i, 0))\n  })\n\n  const subStep = (p, i, ii) => new Promise((resolve, reject) => {\n    if (ii === pathExt.length)\n      return resolve(step(i + 1))\n    const ext = pathExt[ii]\n    isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {\n      if (!er && is) {\n        if (opt.all)\n          found.push(p + ext)\n        else\n          return resolve(p + ext)\n      }\n      return resolve(subStep(p, i, ii + 1))\n    })\n  })\n\n  return cb ? step(0).then(res => cb(null, res), cb) : step(0)\n}\n\nconst whichSync = (cmd, opt) => {\n  opt = opt || {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (let i = 0; i < pathEnv.length; i ++) {\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    for (let j = 0; j < pathExt.length; j ++) {\n      const cur = p + pathExt[j]\n      try {\n        const is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n\nmodule.exports = which\nwhich.sync = whichSync\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}