{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nvar error_1 = require(\"../error\");\nvar write_concern_1 = require(\"../write_concern\");\nvar bulk_write_1 = require(\"./bulk_write\");\nvar command_1 = require(\"./command\");\nvar common_functions_1 = require(\"./common_functions\");\nvar operation_1 = require(\"./operation\");\n/** @internal */\nvar InsertOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(InsertOperation, _command_1$CommandOpe);\n  var _super = _createSuper(InsertOperation);\n  function InsertOperation(ns, documents, options) {\n    var _options$checkKeys;\n    var _this;\n    _classCallCheck(this, InsertOperation);\n    _this = _super.call(this, undefined, options);\n    _this.options = _objectSpread(_objectSpread({}, options), {}, {\n      checkKeys: (_options$checkKeys = options.checkKeys) !== null && _options$checkKeys !== void 0 ? _options$checkKeys : false\n    });\n    _this.ns = ns;\n    _this.documents = documents;\n    return _this;\n  }\n  _createClass(InsertOperation, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(server, session) {\n        var _this$options;\n        var options, ordered, command;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              options = (_this$options = this.options) !== null && _this$options !== void 0 ? _this$options : {};\n              ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n              command = {\n                insert: this.ns.collection,\n                documents: this.documents,\n                ordered: ordered\n              };\n              if (typeof options.bypassDocumentValidation === 'boolean') {\n                command.bypassDocumentValidation = options.bypassDocumentValidation;\n              }\n              // we check for undefined specifically here to allow falsy values\n              // eslint-disable-next-line no-restricted-syntax\n              if (options.comment !== undefined) {\n                command.comment = options.comment;\n              }\n              return _context.abrupt(\"return\", _get(_getPrototypeOf(InsertOperation.prototype), \"executeCommand\", this).call(this, server, session, command));\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function execute(_x, _x2) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return InsertOperation;\n}(command_1.CommandOperation);\nexports.InsertOperation = InsertOperation;\nvar InsertOneOperation = /*#__PURE__*/function (_InsertOperation) {\n  _inherits(InsertOneOperation, _InsertOperation);\n  var _super2 = _createSuper(InsertOneOperation);\n  function InsertOneOperation(collection, doc, options) {\n    _classCallCheck(this, InsertOneOperation);\n    return _super2.call(this, collection.s.namespace, (0, common_functions_1.prepareDocs)(collection, [doc], options), options);\n  }\n  _createClass(InsertOneOperation, [{\n    key: \"execute\",\n    value: function () {\n      var _execute2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(server, session) {\n        var _this$writeConcern;\n        var res;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _get(_getPrototypeOf(InsertOneOperation.prototype), \"execute\", this).call(this, server, session);\n            case 2:\n              res = _context2.sent;\n              if (!res.code) {\n                _context2.next = 5;\n                break;\n              }\n              throw new error_1.MongoServerError(res);\n            case 5:\n              if (!res.writeErrors) {\n                _context2.next = 7;\n                break;\n              }\n              throw new error_1.MongoServerError(res.writeErrors[0]);\n            case 7:\n              return _context2.abrupt(\"return\", {\n                acknowledged: ((_this$writeConcern = this.writeConcern) === null || _this$writeConcern === void 0 ? void 0 : _this$writeConcern.w) !== 0,\n                insertedId: this.documents[0]._id\n              });\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function execute(_x3, _x4) {\n        return _execute2.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return InsertOneOperation;\n}(InsertOperation);\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */\nvar InsertManyOperation = /*#__PURE__*/function (_operation_1$Abstract) {\n  _inherits(InsertManyOperation, _operation_1$Abstract);\n  var _super3 = _createSuper(InsertManyOperation);\n  function InsertManyOperation(collection, docs, options) {\n    var _this2;\n    _classCallCheck(this, InsertManyOperation);\n    _this2 = _super3.call(this, options);\n    if (!Array.isArray(docs)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n    }\n    _this2.options = options;\n    _this2.collection = collection;\n    _this2.docs = docs;\n    return _this2;\n  }\n  _createClass(InsertManyOperation, [{\n    key: \"execute\",\n    value: function () {\n      var _execute3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(server, session) {\n        var coll, options, writeConcern, bulkWriteOperation, res;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              coll = this.collection;\n              options = _objectSpread(_objectSpread(_objectSpread({}, this.options), this.bsonOptions), {}, {\n                readPreference: this.readPreference\n              });\n              writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n              bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, (0, common_functions_1.prepareDocs)(coll, this.docs, options).map(function (document) {\n                return {\n                  insertOne: {\n                    document: document\n                  }\n                };\n              }), options);\n              _context3.prev = 4;\n              _context3.next = 7;\n              return bulkWriteOperation.execute(server, session);\n            case 7:\n              res = _context3.sent;\n              return _context3.abrupt(\"return\", {\n                acknowledged: (writeConcern === null || writeConcern === void 0 ? void 0 : writeConcern.w) !== 0,\n                insertedCount: res.insertedCount,\n                insertedIds: res.insertedIds\n              });\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](4);\n              if (!(_context3.t0 && _context3.t0.message === 'Operation must be an object with an operation key')) {\n                _context3.next = 15;\n                break;\n              }\n              throw new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');\n            case 15:\n              throw _context3.t0;\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[4, 11]]);\n      }));\n      function execute(_x5, _x6) {\n        return _execute3.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return InsertManyOperation;\n}(operation_1.AbstractOperation);\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["error_1","require","write_concern_1","bulk_write_1","command_1","common_functions_1","operation_1","InsertOperation","_command_1$CommandOpe","_inherits","_super","_createSuper","ns","documents","options","_options$checkKeys","_this","_classCallCheck","call","undefined","_objectSpread","checkKeys","_createClass","key","value","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","server","session","_this$options","ordered","command","wrap","_callee$","_context","prev","next","insert","collection","bypassDocumentValidation","comment","abrupt","_get","_getPrototypeOf","prototype","stop","execute","_x","_x2","apply","arguments","CommandOperation","exports","InsertOneOperation","_InsertOperation","_super2","doc","s","namespace","prepareDocs","_execute2","_callee2","_this$writeConcern","res","_callee2$","_context2","sent","code","MongoServerError","writeErrors","acknowledged","writeConcern","w","insertedId","_id","_x3","_x4","InsertManyOperation","_operation_1$Abstract","_super3","docs","_this2","Array","isArray","MongoInvalidArgumentError","_execute3","_callee3","coll","bulkWriteOperation","_callee3$","_context3","bsonOptions","readPreference","WriteConcern","fromOptions","BulkWriteOperation","map","document","insertOne","insertedCount","insertedIds","t0","message","_x5","_x6","AbstractOperation","defineAspects","Aspect","RETRYABLE","WRITE_OPERATION"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\operations\\insert.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { BulkWriteOptions } from '../bulk/common';\nimport type { Collection } from '../collection';\nimport { MongoInvalidArgumentError, MongoServerError } from '../error';\nimport type { InferIdType } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { MongoDBNamespace } from '../utils';\nimport { WriteConcern } from '../write_concern';\nimport { BulkWriteOperation } from './bulk_write';\nimport { CommandOperation, type CommandOperationOptions } from './command';\nimport { prepareDocs } from './common_functions';\nimport { AbstractOperation, Aspect, defineAspects } from './operation';\n\n/** @internal */\nexport class InsertOperation extends CommandOperation<Document> {\n  override options: BulkWriteOptions;\n  documents: Document[];\n\n  constructor(ns: MongoDBNamespace, documents: Document[], options: BulkWriteOptions) {\n    super(undefined, options);\n    this.options = { ...options, checkKeys: options.checkKeys ?? false };\n    this.ns = ns;\n    this.documents = documents;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<Document> {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command: Document = {\n      insert: this.ns.collection,\n      documents: this.documents,\n      ordered\n    };\n\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    return super.executeCommand(server, session, command);\n  }\n}\n\n/** @public */\nexport interface InsertOneOptions extends CommandOperationOptions {\n  /** Allow driver to bypass schema validation. */\n  bypassDocumentValidation?: boolean;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n}\n\n/** @public */\nexport interface InsertOneResult<TSchema = Document> {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The identifier that was inserted. If the server generated the identifier, this value will be null as the driver does not have access to that data */\n  insertedId: InferIdType<TSchema>;\n}\n\nexport class InsertOneOperation extends InsertOperation {\n  constructor(collection: Collection, doc: Document, options: InsertOneOptions) {\n    super(collection.s.namespace, prepareDocs(collection, [doc], options), options);\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<InsertOneResult> {\n    const res = await super.execute(server, session);\n    if (res.code) throw new MongoServerError(res);\n    if (res.writeErrors) {\n      // This should be a WriteError but we can't change it now because of error hierarchy\n      throw new MongoServerError(res.writeErrors[0]);\n    }\n\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      insertedId: this.documents[0]._id\n    };\n  }\n}\n\n/** @public */\nexport interface InsertManyResult<TSchema = Document> {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The number of inserted documents for this operations */\n  insertedCount: number;\n  /** Map of the index of the inserted document to the id of the inserted document */\n  insertedIds: { [key: number]: InferIdType<TSchema> };\n}\n\n/** @internal */\nexport class InsertManyOperation extends AbstractOperation<InsertManyResult> {\n  override options: BulkWriteOptions;\n  collection: Collection;\n  docs: Document[];\n\n  constructor(collection: Collection, docs: Document[], options: BulkWriteOptions) {\n    super(options);\n\n    if (!Array.isArray(docs)) {\n      throw new MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n    }\n\n    this.options = options;\n    this.collection = collection;\n    this.docs = docs;\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<InsertManyResult> {\n    const coll = this.collection;\n    const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n    const writeConcern = WriteConcern.fromOptions(options);\n    const bulkWriteOperation = new BulkWriteOperation(\n      coll,\n      prepareDocs(coll, this.docs, options).map(document => ({ insertOne: { document } })),\n      options\n    );\n\n    try {\n      const res = await bulkWriteOperation.execute(server, session);\n      return {\n        acknowledged: writeConcern?.w !== 0,\n        insertedCount: res.insertedCount,\n        insertedIds: res.insertedIds\n      };\n    } catch (err) {\n      if (err && err.message === 'Operation must be an object with an operation key') {\n        throw new MongoInvalidArgumentError(\n          'Collection.insertMany() cannot be called with an array that has null/undefined values'\n        );\n      }\n      throw err;\n    }\n  }\n}\n\ndefineAspects(InsertOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION]);\ndefineAspects(InsertOneOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION]);\ndefineAspects(InsertManyOperation, [Aspect.WRITE_OPERATION]);\n"],"mappings":";;;;;;;;;;;;;;;AAGA,IAAAA,OAAA,GAAAC,OAAA;AAKA,IAAAC,eAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,SAAA,GAAAH,OAAA;AACA,IAAAI,kBAAA,GAAAJ,OAAA;AACA,IAAAK,WAAA,GAAAL,OAAA;AAEA;AAAA,IACaM,eAAgB,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,eAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,eAAA;EAI3B,SAAAA,gBAAYK,EAAoB,EAAEC,SAAqB,EAAEC,OAAyB;IAAA,IAAAC,kBAAA;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAV,eAAA;IAChFS,KAAA,GAAAN,MAAA,CAAAQ,IAAA,OAAMC,SAAS,EAAEL,OAAO;IACxBE,KAAA,CAAKF,OAAO,GAAAM,aAAA,CAAAA,aAAA,KAAQN,OAAO;MAAEO,SAAS,GAAAN,kBAAA,GAAED,OAAO,CAACO,SAAS,cAAAN,kBAAA,cAAAA,kBAAA,GAAI;IAAK,EAAE;IACpEC,KAAA,CAAKJ,EAAE,GAAGA,EAAE;IACZI,KAAA,CAAKH,SAAS,GAAGA,SAAS;IAAC,OAAAG,KAAA;EAC7B;EAACM,YAAA,CAAAf,eAAA;IAAAgB,GAAA;IAAAC,KAAA;MAAA,IAAAC,QAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAEQ,SAAAC,QAAcC,MAAc,EAAEC,OAAkC;QAAA,IAAAC,aAAA;QAAA,IAAAlB,OAAA,EAAAmB,OAAA,EAAAC,OAAA;QAAA,OAAAP,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACjEzB,OAAO,IAAAkB,aAAA,GAAG,IAAI,CAAClB,OAAO,cAAAkB,aAAA,cAAAA,aAAA,GAAI,EAAE;cAC5BC,OAAO,GAAG,OAAOnB,OAAO,CAACmB,OAAO,KAAK,SAAS,GAAGnB,OAAO,CAACmB,OAAO,GAAG,IAAI;cACvEC,OAAO,GAAa;gBACxBM,MAAM,EAAE,IAAI,CAAC5B,EAAE,CAAC6B,UAAU;gBAC1B5B,SAAS,EAAE,IAAI,CAACA,SAAS;gBACzBoB,OAAO,EAAPA;eACD;cAED,IAAI,OAAOnB,OAAO,CAAC4B,wBAAwB,KAAK,SAAS,EAAE;gBACzDR,OAAO,CAACQ,wBAAwB,GAAG5B,OAAO,CAAC4B,wBAAwB;;cAGrE;cACA;cACA,IAAI5B,OAAO,CAAC6B,OAAO,KAAKxB,SAAS,EAAE;gBACjCe,OAAO,CAACS,OAAO,GAAG7B,OAAO,CAAC6B,OAAO;;cAClC,OAAAN,QAAA,CAAAO,MAAA,WAAAC,IAAA,CAAAC,eAAA,CAAAvC,eAAA,CAAAwC,SAAA,2BAAA7B,IAAA,OAE2BY,MAAM,EAAEC,OAAO,EAAEG,OAAO;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAW,IAAA;UAAA;QAAA,GAAAnB,OAAA;MAAA,CACrD;MAAA,SAAAoB,QAAAC,EAAA,EAAAC,GAAA;QAAA,OAAA1B,QAAA,CAAA2B,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,OAAA;IAAA;EAAA;EAAA,OAAA1C,eAAA;AAAA,EA/BkCH,SAAA,CAAAkD,gBAA0B;AAA/DC,OAAA,CAAAhD,eAAA,GAAAA,eAAA;AAgCC,IAkBYiD,kBAAmB,0BAAAC,gBAAA;EAAAhD,SAAA,CAAA+C,kBAAA,EAAAC,gBAAA;EAAA,IAAAC,OAAA,GAAA/C,YAAA,CAAA6C,kBAAA;EAC9B,SAAAA,mBAAYf,UAAsB,EAAEkB,GAAa,EAAE7C,OAAyB;IAAAG,eAAA,OAAAuC,kBAAA;IAAA,OAAAE,OAAA,CAAAxC,IAAA,OACpEuB,UAAU,CAACmB,CAAC,CAACC,SAAS,EAAE,IAAAxD,kBAAA,CAAAyD,WAAW,EAACrB,UAAU,EAAE,CAACkB,GAAG,CAAC,EAAE7C,OAAO,CAAC,EAAEA,OAAO;EAChF;EAACQ,YAAA,CAAAkC,kBAAA;IAAAjC,GAAA;IAAAC,KAAA;MAAA,IAAAuC,SAAA,GAAArC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAEQ,SAAAoC,SACPlC,MAAc,EACdC,OAAkC;QAAA,IAAAkC,kBAAA;QAAA,IAAAC,GAAA;QAAA,OAAAvC,mBAAA,GAAAQ,IAAA,UAAAgC,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA9B,IAAA,GAAA8B,SAAA,CAAA7B,IAAA;YAAA;cAAA6B,SAAA,CAAA7B,IAAA;cAAA,OAAAM,IAAA,CAAAC,eAAA,CAAAU,kBAAA,CAAAT,SAAA,oBAAA7B,IAAA,OAEFY,MAAM,EAAEC,OAAO;YAAA;cAAzCmC,GAAG,GAAAE,SAAA,CAAAC,IAAA;cAAA,KACLH,GAAG,CAACI,IAAI;gBAAAF,SAAA,CAAA7B,IAAA;gBAAA;cAAA;cAAA,MAAQ,IAAIvC,OAAA,CAAAuE,gBAAgB,CAACL,GAAG,CAAC;YAAA;cAAA,KACzCA,GAAG,CAACM,WAAW;gBAAAJ,SAAA,CAAA7B,IAAA;gBAAA;cAAA;cAAA,MAEX,IAAIvC,OAAA,CAAAuE,gBAAgB,CAACL,GAAG,CAACM,WAAW,CAAC,CAAC,CAAC,CAAC;YAAA;cAAA,OAAAJ,SAAA,CAAAxB,MAAA,WAGzC;gBACL6B,YAAY,EAAE,EAAAR,kBAAA,OAAI,CAACS,YAAY,cAAAT,kBAAA,uBAAjBA,kBAAA,CAAmBU,CAAC,MAAK,CAAC;gBACxCC,UAAU,EAAE,IAAI,CAAC/D,SAAS,CAAC,CAAC,CAAC,CAACgE;eAC/B;YAAA;YAAA;cAAA,OAAAT,SAAA,CAAApB,IAAA;UAAA;QAAA,GAAAgB,QAAA;MAAA,CACF;MAAA,SAAAf,QAAA6B,GAAA,EAAAC,GAAA;QAAA,OAAAhB,SAAA,CAAAX,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,OAAA;IAAA;EAAA;EAAA,OAAAO,kBAAA;AAAA,EApBqCjD,eAAe;AAAvDgD,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AAiCA;AAAA,IACawB,mBAAoB,0BAAAC,qBAAA;EAAAxE,SAAA,CAAAuE,mBAAA,EAAAC,qBAAA;EAAA,IAAAC,OAAA,GAAAvE,YAAA,CAAAqE,mBAAA;EAK/B,SAAAA,oBAAYvC,UAAsB,EAAE0C,IAAgB,EAAErE,OAAyB;IAAA,IAAAsE,MAAA;IAAAnE,eAAA,OAAA+D,mBAAA;IAC7EI,MAAA,GAAAF,OAAA,CAAAhE,IAAA,OAAMJ,OAAO;IAEb,IAAI,CAACuE,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;MACxB,MAAM,IAAInF,OAAA,CAAAuF,yBAAyB,CAAC,+CAA+C,CAAC;;IAGtFH,MAAA,CAAKtE,OAAO,GAAGA,OAAO;IACtBsE,MAAA,CAAK3C,UAAU,GAAGA,UAAU;IAC5B2C,MAAA,CAAKD,IAAI,GAAGA,IAAI;IAAC,OAAAC,MAAA;EACnB;EAAC9D,YAAA,CAAA0D,mBAAA;IAAAzD,GAAA;IAAAC,KAAA;MAAA,IAAAgE,SAAA,GAAA9D,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAEQ,SAAA6D,SACP3D,MAAc,EACdC,OAAkC;QAAA,IAAA2D,IAAA,EAAA5E,OAAA,EAAA4D,YAAA,EAAAiB,kBAAA,EAAAzB,GAAA;QAAA,OAAAvC,mBAAA,GAAAQ,IAAA,UAAAyD,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAvD,IAAA,GAAAuD,SAAA,CAAAtD,IAAA;YAAA;cAE5BmD,IAAI,GAAG,IAAI,CAACjD,UAAU;cACtB3B,OAAO,GAAAM,aAAA,CAAAA,aAAA,CAAAA,aAAA,KAAQ,IAAI,CAACN,OAAO,GAAK,IAAI,CAACgF,WAAW;gBAAEC,cAAc,EAAE,IAAI,CAACA;cAAc;cACrFrB,YAAY,GAAGxE,eAAA,CAAA8F,YAAY,CAACC,WAAW,CAACnF,OAAO,CAAC;cAChD6E,kBAAkB,GAAG,IAAIxF,YAAA,CAAA+F,kBAAkB,CAC/CR,IAAI,EACJ,IAAArF,kBAAA,CAAAyD,WAAW,EAAC4B,IAAI,EAAE,IAAI,CAACP,IAAI,EAAErE,OAAO,CAAC,CAACqF,GAAG,CAAC,UAAAC,QAAQ;gBAAA,OAAK;kBAAEC,SAAS,EAAE;oBAAED,QAAQ,EAARA;kBAAQ;gBAAE,CAAE;cAAA,CAAC,CAAC,EACpFtF,OAAO,CACR;cAAA+E,SAAA,CAAAvD,IAAA;cAAAuD,SAAA,CAAAtD,IAAA;cAAA,OAGmBoD,kBAAkB,CAAC1C,OAAO,CAACnB,MAAM,EAAEC,OAAO,CAAC;YAAA;cAAvDmC,GAAG,GAAA2B,SAAA,CAAAxB,IAAA;cAAA,OAAAwB,SAAA,CAAAjD,MAAA,WACF;gBACL6B,YAAY,EAAE,CAAAC,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEC,CAAC,MAAK,CAAC;gBACnC2B,aAAa,EAAEpC,GAAG,CAACoC,aAAa;gBAChCC,WAAW,EAAErC,GAAG,CAACqC;eAClB;YAAA;cAAAV,SAAA,CAAAvD,IAAA;cAAAuD,SAAA,CAAAW,EAAA,GAAAX,SAAA;cAAA,MAEGA,SAAA,CAAAW,EAAA,IAAOX,SAAA,CAAAW,EAAA,CAAIC,OAAO,KAAK,mDAAmD;gBAAAZ,SAAA,CAAAtD,IAAA;gBAAA;cAAA;cAAA,MACtE,IAAIvC,OAAA,CAAAuF,yBAAyB,CACjC,uFAAuF,CACxF;YAAA;cAAA,MAAAM,SAAA,CAAAW,EAAA;YAAA;YAAA;cAAA,OAAAX,SAAA,CAAA7C,IAAA;UAAA;QAAA,GAAAyC,QAAA;MAAA,CAIN;MAAA,SAAAxC,QAAAyD,GAAA,EAAAC,GAAA;QAAA,OAAAnB,SAAA,CAAApC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,OAAA;IAAA;EAAA;EAAA,OAAA+B,mBAAA;AAAA,EA7CsC1E,WAAA,CAAAsG,iBAAmC;AAA5ErD,OAAA,CAAAyB,mBAAA,GAAAA,mBAAA;AAgDA,IAAA1E,WAAA,CAAAuG,aAAa,EAACtG,eAAe,EAAE,CAACD,WAAA,CAAAwG,MAAM,CAACC,SAAS,EAAEzG,WAAA,CAAAwG,MAAM,CAACE,eAAe,CAAC,CAAC;AAC1E,IAAA1G,WAAA,CAAAuG,aAAa,EAACrD,kBAAkB,EAAE,CAAClD,WAAA,CAAAwG,MAAM,CAACC,SAAS,EAAEzG,WAAA,CAAAwG,MAAM,CAACE,eAAe,CAAC,CAAC;AAC7E,IAAA1G,WAAA,CAAAuG,aAAa,EAAC7B,mBAAmB,EAAE,CAAC1E,WAAA,CAAAwG,MAAM,CAACE,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}