{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._advanceClusterTime = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nvar timers_1 = require(\"timers\");\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown',\n  LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown',\n  LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\nfunction drainTimerQueue(queue) {\n  queue.forEach(timers_1.clearTimeout);\n  queue.clear();\n}\nexports.drainTimerQueue = drainTimerQueue;\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n  if (entity.clusterTime == null) {\n    entity.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n      entity.clusterTime = $clusterTime;\n    }\n  }\n}\nexports._advanceClusterTime = _advanceClusterTime;","map":{"version":3,"names":["timers_1","require","exports","STATE_CLOSING","STATE_CLOSED","STATE_CONNECTING","STATE_CONNECTED","TopologyType","Object","freeze","Single","ReplicaSetNoPrimary","ReplicaSetWithPrimary","Sharded","Unknown","LoadBalanced","ServerType","Standalone","Mongos","PossiblePrimary","RSPrimary","RSSecondary","RSArbiter","RSOther","RSGhost","LoadBalancer","drainTimerQueue","queue","forEach","clearTimeout","clear","_advanceClusterTime","entity","$clusterTime","clusterTime","greaterThan"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\sdam\\common.ts"],"sourcesContent":["import { clearTimeout } from 'timers';\n\nimport type { Binary, Long, Timestamp } from '../bson';\nimport type { ClientSession } from '../sessions';\nimport type { Topology } from './topology';\n\n// shared state names\nexport const STATE_CLOSING = 'closing';\nexport const STATE_CLOSED = 'closed';\nexport const STATE_CONNECTING = 'connecting';\nexport const STATE_CONNECTED = 'connected';\n\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexport const TopologyType = Object.freeze({\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown',\n  LoadBalanced: 'LoadBalanced'\n} as const);\n\n/** @public */\nexport type TopologyType = (typeof TopologyType)[keyof typeof TopologyType];\n\n/**\n * An enumeration of server types we know about\n * @public\n */\nexport const ServerType = Object.freeze({\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown',\n  LoadBalancer: 'LoadBalancer'\n} as const);\n\n/** @public */\nexport type ServerType = (typeof ServerType)[keyof typeof ServerType];\n\n/** @internal */\nexport type TimerQueue = Set<NodeJS.Timeout>;\n\n/** @internal */\nexport function drainTimerQueue(queue: TimerQueue): void {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\n\n/** @public */\nexport interface ClusterTime {\n  clusterTime: Timestamp;\n  signature: {\n    hash: Binary;\n    keyId: Long;\n  };\n}\n\n/** Shared function to determine clusterTime for a given topology or session */\nexport function _advanceClusterTime(\n  entity: Topology | ClientSession,\n  $clusterTime: ClusterTime\n): void {\n  if (entity.clusterTime == null) {\n    entity.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n      entity.clusterTime = $clusterTime;\n    }\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AAMA;AACaC,OAAA,CAAAC,aAAa,GAAG,SAAS;AACzBD,OAAA,CAAAE,YAAY,GAAG,QAAQ;AACvBF,OAAA,CAAAG,gBAAgB,GAAG,YAAY;AAC/BH,OAAA,CAAAI,eAAe,GAAG,WAAW;AAE1C;;;;AAIaJ,OAAA,CAAAK,YAAY,GAAGC,MAAM,CAACC,MAAM,CAAC;EACxCC,MAAM,EAAE,QAAQ;EAChBC,mBAAmB,EAAE,qBAAqB;EAC1CC,qBAAqB,EAAE,uBAAuB;EAC9CC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,SAAS;EAClBC,YAAY,EAAE;CACN,CAAC;AAKX;;;;AAIab,OAAA,CAAAc,UAAU,GAAGR,MAAM,CAACC,MAAM,CAAC;EACtCQ,UAAU,EAAE,YAAY;EACxBC,MAAM,EAAE,QAAQ;EAChBC,eAAe,EAAE,iBAAiB;EAClCC,SAAS,EAAE,WAAW;EACtBC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE,WAAW;EACtBC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,SAAS;EAClBV,OAAO,EAAE,SAAS;EAClBW,YAAY,EAAE;CACN,CAAC;AAQX;AACA,SAAgBC,eAAeA,CAACC,KAAiB;EAC/CA,KAAK,CAACC,OAAO,CAAC5B,QAAA,CAAA6B,YAAY,CAAC;EAC3BF,KAAK,CAACG,KAAK,EAAE;AACf;AAHA5B,OAAA,CAAAwB,eAAA,GAAAA,eAAA;AAcA;AACA,SAAgBK,mBAAmBA,CACjCC,MAAgC,EAChCC,YAAyB;EAEzB,IAAID,MAAM,CAACE,WAAW,IAAI,IAAI,EAAE;IAC9BF,MAAM,CAACE,WAAW,GAAGD,YAAY;GAClC,MAAM;IACL,IAAIA,YAAY,CAACC,WAAW,CAACC,WAAW,CAACH,MAAM,CAACE,WAAW,CAACA,WAAW,CAAC,EAAE;MACxEF,MAAM,CAACE,WAAW,GAAGD,YAAY;;;AAGvC;AAXA/B,OAAA,CAAA6B,mBAAA,GAAAA,mBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}