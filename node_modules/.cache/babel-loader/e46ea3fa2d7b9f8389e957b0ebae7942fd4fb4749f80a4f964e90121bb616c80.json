{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nvar util_1 = require(\"util\");\nvar zlib = require(\"zlib\");\nvar constants_1 = require(\"../../constants\");\nvar deps_1 = require(\"../../deps\");\nvar error_1 = require(\"../../error\");\n/** @public */\nexports.Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n});\nexports.uncompressibleCommands = new Set([constants_1.LEGACY_HELLO_COMMAND, 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']);\nvar ZSTD_COMPRESSION_LEVEL = 3;\nvar zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nvar zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nvar zstd;\nvar Snappy = null;\nfunction loadSnappy() {\n  if (Snappy == null) {\n    var snappyImport = (0, deps_1.getSnappy)();\n    if ('kModuleError' in snappyImport) {\n      throw snappyImport.kModuleError;\n    }\n    Snappy = snappyImport;\n  }\n  return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nfunction compress(_x, _x2) {\n  return _compress.apply(this, arguments);\n}\nfunction _compress() {\n  _compress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options, dataToBeCompressed) {\n    var zlibOptions, _Snappy;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          zlibOptions = {};\n          _context.t0 = options.agreedCompressor;\n          _context.next = _context.t0 === 'snappy' ? 4 : _context.t0 === 'zstd' ? 6 : _context.t0 === 'zlib' ? 10 : 12;\n          break;\n        case 4:\n          (_Snappy = Snappy) !== null && _Snappy !== void 0 ? _Snappy : Snappy = loadSnappy();\n          return _context.abrupt(\"return\", Snappy.compress(dataToBeCompressed));\n        case 6:\n          loadZstd();\n          if (!('kModuleError' in zstd)) {\n            _context.next = 9;\n            break;\n          }\n          throw zstd['kModuleError'];\n        case 9:\n          return _context.abrupt(\"return\", zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL));\n        case 10:\n          if (options.zlibCompressionLevel) {\n            zlibOptions.level = options.zlibCompressionLevel;\n          }\n          return _context.abrupt(\"return\", zlibDeflate(dataToBeCompressed, zlibOptions));\n        case 12:\n          throw new error_1.MongoInvalidArgumentError(\"Unknown compressor \".concat(options.agreedCompressor, \" failed to compress\"));\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _compress.apply(this, arguments);\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nfunction decompress(_x3, _x4) {\n  return _decompress.apply(this, arguments);\n}\nfunction _decompress() {\n  _decompress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(compressorID, compressedData) {\n    var _Snappy2;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(compressorID !== exports.Compressor.snappy && compressorID !== exports.Compressor.zstd && compressorID !== exports.Compressor.zlib && compressorID !== exports.Compressor.none)) {\n            _context2.next = 2;\n            break;\n          }\n          throw new error_1.MongoDecompressionError(\"Server sent message compressed using an unsupported compressor. (Received compressor ID \".concat(compressorID, \")\"));\n        case 2:\n          _context2.t0 = compressorID;\n          _context2.next = _context2.t0 === exports.Compressor.snappy ? 5 : _context2.t0 === exports.Compressor.zstd ? 7 : _context2.t0 === exports.Compressor.zlib ? 11 : 12;\n          break;\n        case 5:\n          (_Snappy2 = Snappy) !== null && _Snappy2 !== void 0 ? _Snappy2 : Snappy = loadSnappy();\n          return _context2.abrupt(\"return\", Snappy.uncompress(compressedData, {\n            asBuffer: true\n          }));\n        case 7:\n          loadZstd();\n          if (!('kModuleError' in zstd)) {\n            _context2.next = 10;\n            break;\n          }\n          throw zstd['kModuleError'];\n        case 10:\n          return _context2.abrupt(\"return\", zstd.decompress(compressedData));\n        case 11:\n          return _context2.abrupt(\"return\", zlibInflate(compressedData));\n        case 12:\n          return _context2.abrupt(\"return\", compressedData);\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _decompress.apply(this, arguments);\n}\nexports.decompress = decompress;\n/**\n * Load ZStandard if it is not already set.\n */\nfunction loadZstd() {\n  if (!zstd) {\n    zstd = (0, deps_1.getZstdLibrary)();\n  }\n}","map":{"version":3,"names":["util_1","require","zlib","constants_1","deps_1","error_1","exports","Compressor","Object","freeze","none","snappy","zstd","uncompressibleCommands","Set","LEGACY_HELLO_COMMAND","ZSTD_COMPRESSION_LEVEL","zlibInflate","promisify","inflate","bind","zlibDeflate","deflate","Snappy","loadSnappy","snappyImport","getSnappy","kModuleError","compress","_x","_x2","_compress","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","dataToBeCompressed","zlibOptions","_Snappy","wrap","_callee$","_context","prev","next","t0","agreedCompressor","abrupt","loadZstd","zlibCompressionLevel","level","MongoInvalidArgumentError","concat","stop","decompress","_x3","_x4","_decompress","_callee2","compressorID","compressedData","_Snappy2","_callee2$","_context2","MongoDecompressionError","uncompress","asBuffer","getZstdLibrary"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cmap\\wire_protocol\\compression.ts"],"sourcesContent":["import { promisify } from 'util';\nimport * as zlib from 'zlib';\n\nimport { LEGACY_HELLO_COMMAND } from '../../constants';\nimport { getSnappy, getZstdLibrary, type SnappyLib, type ZStandard } from '../../deps';\nimport { MongoDecompressionError, MongoInvalidArgumentError } from '../../error';\n\n/** @public */\nexport const Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n} as const);\n\n/** @public */\nexport type Compressor = (typeof Compressor)[CompressorName];\n\n/** @public */\nexport type CompressorName = keyof typeof Compressor;\n\nexport const uncompressibleCommands = new Set([\n  LEGACY_HELLO_COMMAND,\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'authenticate',\n  'createUser',\n  'updateUser',\n  'copydbSaslStart',\n  'copydbgetnonce',\n  'copydb'\n]);\n\nconst ZSTD_COMPRESSION_LEVEL = 3;\n\nconst zlibInflate = promisify(zlib.inflate.bind(zlib));\nconst zlibDeflate = promisify(zlib.deflate.bind(zlib));\n\nlet zstd: typeof ZStandard;\nlet Snappy: SnappyLib | null = null;\nfunction loadSnappy() {\n  if (Snappy == null) {\n    const snappyImport = getSnappy();\n    if ('kModuleError' in snappyImport) {\n      throw snappyImport.kModuleError;\n    }\n    Snappy = snappyImport;\n  }\n  return Snappy;\n}\n\n// Facilitate compressing a message using an agreed compressor\nexport async function compress(\n  options: { zlibCompressionLevel: number; agreedCompressor: CompressorName },\n  dataToBeCompressed: Buffer\n): Promise<Buffer> {\n  const zlibOptions = {} as zlib.ZlibOptions;\n  switch (options.agreedCompressor) {\n    case 'snappy': {\n      Snappy ??= loadSnappy();\n      return Snappy.compress(dataToBeCompressed);\n    }\n    case 'zstd': {\n      loadZstd();\n      if ('kModuleError' in zstd) {\n        throw zstd['kModuleError'];\n      }\n      return zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n    }\n    case 'zlib': {\n      if (options.zlibCompressionLevel) {\n        zlibOptions.level = options.zlibCompressionLevel;\n      }\n      return zlibDeflate(dataToBeCompressed, zlibOptions);\n    }\n    default: {\n      throw new MongoInvalidArgumentError(\n        `Unknown compressor ${options.agreedCompressor} failed to compress`\n      );\n    }\n  }\n}\n\n// Decompress a message using the given compressor\nexport async function decompress(compressorID: number, compressedData: Buffer): Promise<Buffer> {\n  if (\n    compressorID !== Compressor.snappy &&\n    compressorID !== Compressor.zstd &&\n    compressorID !== Compressor.zlib &&\n    compressorID !== Compressor.none\n  ) {\n    throw new MongoDecompressionError(\n      `Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`\n    );\n  }\n\n  switch (compressorID) {\n    case Compressor.snappy: {\n      Snappy ??= loadSnappy();\n      return Snappy.uncompress(compressedData, { asBuffer: true });\n    }\n    case Compressor.zstd: {\n      loadZstd();\n      if ('kModuleError' in zstd) {\n        throw zstd['kModuleError'];\n      }\n      return zstd.decompress(compressedData);\n    }\n    case Compressor.zlib: {\n      return zlibInflate(compressedData);\n    }\n    default: {\n      return compressedData;\n    }\n  }\n}\n\n/**\n * Load ZStandard if it is not already set.\n */\nfunction loadZstd() {\n  if (!zstd) {\n    zstd = getZstdLibrary();\n  }\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,IAAA,GAAAD,OAAA;AAEA,IAAAE,WAAA,GAAAF,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AACA,IAAAI,OAAA,GAAAJ,OAAA;AAEA;AACaK,OAAA,CAAAC,UAAU,GAAGC,MAAM,CAACC,MAAM,CAAC;EACtCC,IAAI,EAAE,CAAC;EACPC,MAAM,EAAE,CAAC;EACTT,IAAI,EAAE,CAAC;EACPU,IAAI,EAAE;CACE,CAAC;AAQEN,OAAA,CAAAO,sBAAsB,GAAG,IAAIC,GAAG,CAAC,CAC5CX,WAAA,CAAAY,oBAAoB,EACpB,WAAW,EACX,cAAc,EACd,UAAU,EACV,cAAc,EACd,YAAY,EACZ,YAAY,EACZ,iBAAiB,EACjB,gBAAgB,EAChB,QAAQ,CACT,CAAC;AAEF,IAAMC,sBAAsB,GAAG,CAAC;AAEhC,IAAMC,WAAW,GAAG,IAAAjB,MAAA,CAAAkB,SAAS,EAAChB,IAAI,CAACiB,OAAO,CAACC,IAAI,CAAClB,IAAI,CAAC,CAAC;AACtD,IAAMmB,WAAW,GAAG,IAAArB,MAAA,CAAAkB,SAAS,EAAChB,IAAI,CAACoB,OAAO,CAACF,IAAI,CAAClB,IAAI,CAAC,CAAC;AAEtD,IAAIU,IAAsB;AAC1B,IAAIW,MAAM,GAAqB,IAAI;AACnC,SAASC,UAAUA,CAAA;EACjB,IAAID,MAAM,IAAI,IAAI,EAAE;IAClB,IAAME,YAAY,GAAG,IAAArB,MAAA,CAAAsB,SAAS,GAAE;IAChC,IAAI,cAAc,IAAID,YAAY,EAAE;MAClC,MAAMA,YAAY,CAACE,YAAY;;IAEjCJ,MAAM,GAAGE,YAAY;;EAEvB,OAAOF,MAAM;AACf;AAEA;AAAA,SACsBK,QAAQA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,UAAA;EAAAA,SAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAvB,SAAAC,QACLC,OAA2E,EAC3EC,kBAA0B;IAAA,IAAAC,WAAA,EAAAC,OAAA;IAAA,OAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAEpBN,WAAW,GAAG,EAAsB;UAAAI,QAAA,CAAAG,EAAA,GAClCT,OAAO,CAACU,gBAAgB;UAAAJ,QAAA,CAAAE,IAAA,GAAAF,QAAA,CAAAG,EAAA,KACzB,QAAQ,OAAAH,QAAA,CAAAG,EAAA,KAIR,MAAM,OAAAH,QAAA,CAAAG,EAAA,KAON,MAAM;UAAA;QAAA;UAVT,CAAAN,OAAA,GAAAlB,MAAM,cAAAkB,OAAA,cAAAA,OAAA,GAANlB,MAAM,GAAKC,UAAU,EAAE;UAAC,OAAAoB,QAAA,CAAAK,MAAA,WACjB1B,MAAM,CAACK,QAAQ,CAACW,kBAAkB,CAAC;QAAA;UAG1CW,QAAQ,EAAE;UAAC,MACP,cAAc,IAAItC,IAAI;YAAAgC,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MAClBlC,IAAI,CAAC,cAAc,CAAC;QAAA;UAAA,OAAAgC,QAAA,CAAAK,MAAA,WAErBrC,IAAI,CAACgB,QAAQ,CAACW,kBAAkB,EAAEvB,sBAAsB,CAAC;QAAA;UAGhE,IAAIsB,OAAO,CAACa,oBAAoB,EAAE;YAChCX,WAAW,CAACY,KAAK,GAAGd,OAAO,CAACa,oBAAoB;;UACjD,OAAAP,QAAA,CAAAK,MAAA,WACM5B,WAAW,CAACkB,kBAAkB,EAAEC,WAAW,CAAC;QAAA;UAAA,MAG7C,IAAInC,OAAA,CAAAgD,yBAAyB,uBAAAC,MAAA,CACXhB,OAAO,CAACU,gBAAgB,wBAAqB,CACpE;QAAA;QAAA;UAAA,OAAAJ,QAAA,CAAAW,IAAA;MAAA;IAAA,GAAAlB,OAAA;EAAA,CAGN;EAAA,OAAAN,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA7BD3B,OAAA,CAAAsB,QAAA,GAAAA,QAAA;AA+BA;AAAA,SACsB4B,UAAUA,CAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,WAAA,CAAA3B,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAA0B,YAAA;EAAAA,WAAA,GAAAzB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAzB,SAAAwB,SAA0BC,YAAoB,EAAEC,cAAsB;IAAA,IAAAC,QAAA;IAAA,OAAA5B,mBAAA,GAAAO,IAAA,UAAAsB,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAApB,IAAA,GAAAoB,SAAA,CAAAnB,IAAA;QAAA;UAAA,MAEzEe,YAAY,KAAKvD,OAAA,CAAAC,UAAU,CAACI,MAAM,IAClCkD,YAAY,KAAKvD,OAAA,CAAAC,UAAU,CAACK,IAAI,IAChCiD,YAAY,KAAKvD,OAAA,CAAAC,UAAU,CAACL,IAAI,IAChC2D,YAAY,KAAKvD,OAAA,CAAAC,UAAU,CAACG,IAAI;YAAAuD,SAAA,CAAAnB,IAAA;YAAA;UAAA;UAAA,MAE1B,IAAIzC,OAAA,CAAA6D,uBAAuB,4FAAAZ,MAAA,CAC4DO,YAAY,MAAG,CAC3G;QAAA;UAAAI,SAAA,CAAAlB,EAAA,GAGKc,YAAY;UAAAI,SAAA,CAAAnB,IAAA,GAAAmB,SAAA,CAAAlB,EAAA,KACbzC,OAAA,CAAAC,UAAU,CAACI,MAAM,OAAAsD,SAAA,CAAAlB,EAAA,KAIjBzC,OAAA,CAAAC,UAAU,CAACK,IAAI,OAAAqD,SAAA,CAAAlB,EAAA,KAOfzC,OAAA,CAAAC,UAAU,CAACL,IAAI;UAAA;QAAA;UAVlB,CAAA6D,QAAA,GAAAxC,MAAM,cAAAwC,QAAA,cAAAA,QAAA,GAANxC,MAAM,GAAKC,UAAU,EAAE;UAAC,OAAAyC,SAAA,CAAAhB,MAAA,WACjB1B,MAAM,CAAC4C,UAAU,CAACL,cAAc,EAAE;YAAEM,QAAQ,EAAE;UAAI,CAAE,CAAC;QAAA;UAG5DlB,QAAQ,EAAE;UAAC,MACP,cAAc,IAAItC,IAAI;YAAAqD,SAAA,CAAAnB,IAAA;YAAA;UAAA;UAAA,MAClBlC,IAAI,CAAC,cAAc,CAAC;QAAA;UAAA,OAAAqD,SAAA,CAAAhB,MAAA,WAErBrC,IAAI,CAAC4C,UAAU,CAACM,cAAc,CAAC;QAAA;UAAA,OAAAG,SAAA,CAAAhB,MAAA,WAG/BhC,WAAW,CAAC6C,cAAc,CAAC;QAAA;UAAA,OAAAG,SAAA,CAAAhB,MAAA,WAG3Ba,cAAc;QAAA;QAAA;UAAA,OAAAG,SAAA,CAAAV,IAAA;MAAA;IAAA,GAAAK,QAAA;EAAA,CAG1B;EAAA,OAAAD,WAAA,CAAA3B,KAAA,OAAAC,SAAA;AAAA;AA/BD3B,OAAA,CAAAkD,UAAA,GAAAA,UAAA;AAiCA;;;AAGA,SAASN,QAAQA,CAAA;EACf,IAAI,CAACtC,IAAI,EAAE;IACTA,IAAI,GAAG,IAAAR,MAAA,CAAAiE,cAAc,GAAE;;AAE3B"},"metadata":{},"sourceType":"script","externalDependencies":[]}