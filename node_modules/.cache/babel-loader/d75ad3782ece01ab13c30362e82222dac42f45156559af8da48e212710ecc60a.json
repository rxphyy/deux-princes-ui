{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _possibleConstructorReturn = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableReadError = exports.isRetryableWriteError = exports.needsRetryableWriteLabel = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\n/** @internal */\nvar kErrorLabels = Symbol('errorLabels');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp('not master or secondary', 'i');\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotWritablePrimary: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotPrimaryNoSecondaryOk: 13435,\n  NotPrimaryOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100,\n  Reauthenticate: 391\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ExceededTimeLimit, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary, exports.MONGODB_ERROR_CODES.StaleShardVersion, exports.MONGODB_ERROR_CODES.StaleEpoch, exports.MONGODB_ERROR_CODES.StaleConfig, exports.MONGODB_ERROR_CODES.RetryChangeStream, exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference, exports.MONGODB_ERROR_CODES.CursorNotFound]);\n/** @public */\nexports.MongoErrorLabel = Object.freeze({\n  RetryableWriteError: 'RetryableWriteError',\n  TransientTransactionError: 'TransientTransactionError',\n  UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n  ResumableChangeStreamError: 'ResumableChangeStreamError',\n  HandshakeError: 'HandshakeError',\n  ResetPool: 'ResetPool',\n  InterruptInUseConnections: 'InterruptInUseConnections',\n  NoWritesPerformed: 'NoWritesPerformed'\n});\nfunction isAggregateError(e) {\n  return 'errors' in e && Array.isArray(e.errors);\n}\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nvar MongoError = /*#__PURE__*/function (_Error) {\n  _inherits(MongoError, _Error);\n  var _super = _createSuper(MongoError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoError(message, options) {\n    var _this;\n    _classCallCheck(this, MongoError);\n    _this = _super.call(this, message, options);\n    _this[kErrorLabels] = new Set();\n    return _this;\n  }\n  /** @internal */\n  _createClass(MongoError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoError';\n    }\n    /** Legacy name for server error responses */\n  }, {\n    key: \"errmsg\",\n    get: function get() {\n      return this.message;\n    }\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */\n  }, {\n    key: \"hasErrorLabel\",\n    value: function hasErrorLabel(label) {\n      return this[kErrorLabels].has(label);\n    }\n  }, {\n    key: \"addErrorLabel\",\n    value: function addErrorLabel(label) {\n      this[kErrorLabels].add(label);\n    }\n  }, {\n    key: \"errorLabels\",\n    get: function get() {\n      return Array.from(this[kErrorLabels]);\n    }\n  }], [{\n    key: \"buildErrorMessage\",\n    value: function buildErrorMessage(e) {\n      if (typeof e === 'string') {\n        return e;\n      }\n      if (isAggregateError(e) && e.message.length === 0) {\n        return e.errors.length === 0 ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.' : e.errors.map(function (_ref) {\n          var message = _ref.message;\n          return message;\n        }).join(', ');\n      }\n      return e.message;\n    }\n  }]);\n  return MongoError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nvar MongoServerError = /*#__PURE__*/function (_MongoError) {\n  _inherits(MongoServerError, _MongoError);\n  var _super2 = _createSuper(MongoServerError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoServerError(message) {\n    var _this2;\n    _classCallCheck(this, MongoServerError);\n    _this2 = _super2.call(this, message.message || message.errmsg || message.$err || 'n/a');\n    if (message.errorLabels) {\n      _this2[kErrorLabels] = new Set(message.errorLabels);\n    }\n    for (var name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message') _this2[name] = message[name];\n    }\n    return _this2;\n  }\n  _createClass(MongoServerError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoServerError';\n    }\n  }]);\n  return MongoServerError;\n}(MongoError);\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nvar MongoDriverError = /*#__PURE__*/function (_MongoError2) {\n  _inherits(MongoDriverError, _MongoError2);\n  var _super3 = _createSuper(MongoDriverError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoDriverError(message, options) {\n    _classCallCheck(this, MongoDriverError);\n    return _super3.call(this, message, options);\n  }\n  _createClass(MongoDriverError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoDriverError';\n    }\n  }]);\n  return MongoDriverError;\n}(MongoError);\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nvar MongoAPIError = /*#__PURE__*/function (_MongoDriverError) {\n  _inherits(MongoAPIError, _MongoDriverError);\n  var _super4 = _createSuper(MongoAPIError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoAPIError(message, options) {\n    _classCallCheck(this, MongoAPIError);\n    return _super4.call(this, message, options);\n  }\n  _createClass(MongoAPIError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoAPIError';\n    }\n  }]);\n  return MongoAPIError;\n}(MongoDriverError);\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nvar MongoRuntimeError = /*#__PURE__*/function (_MongoDriverError2) {\n  _inherits(MongoRuntimeError, _MongoDriverError2);\n  var _super5 = _createSuper(MongoRuntimeError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoRuntimeError(message, options) {\n    _classCallCheck(this, MongoRuntimeError);\n    return _super5.call(this, message, options);\n  }\n  _createClass(MongoRuntimeError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoRuntimeError';\n    }\n  }]);\n  return MongoRuntimeError;\n}(MongoDriverError);\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nvar MongoBatchReExecutionError = /*#__PURE__*/function (_MongoAPIError) {\n  _inherits(MongoBatchReExecutionError, _MongoAPIError);\n  var _super6 = _createSuper(MongoBatchReExecutionError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoBatchReExecutionError() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'This batch has already been executed, create new batch to execute';\n    _classCallCheck(this, MongoBatchReExecutionError);\n    return _super6.call(this, message);\n  }\n  _createClass(MongoBatchReExecutionError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoBatchReExecutionError';\n    }\n  }]);\n  return MongoBatchReExecutionError;\n}(MongoAPIError);\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nvar MongoDecompressionError = /*#__PURE__*/function (_MongoRuntimeError) {\n  _inherits(MongoDecompressionError, _MongoRuntimeError);\n  var _super7 = _createSuper(MongoDecompressionError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoDecompressionError(message) {\n    _classCallCheck(this, MongoDecompressionError);\n    return _super7.call(this, message);\n  }\n  _createClass(MongoDecompressionError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoDecompressionError';\n    }\n  }]);\n  return MongoDecompressionError;\n}(MongoRuntimeError);\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nvar MongoNotConnectedError = /*#__PURE__*/function (_MongoAPIError2) {\n  _inherits(MongoNotConnectedError, _MongoAPIError2);\n  var _super8 = _createSuper(MongoNotConnectedError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoNotConnectedError(message) {\n    _classCallCheck(this, MongoNotConnectedError);\n    return _super8.call(this, message);\n  }\n  _createClass(MongoNotConnectedError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoNotConnectedError';\n    }\n  }]);\n  return MongoNotConnectedError;\n}(MongoAPIError);\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nvar MongoTransactionError = /*#__PURE__*/function (_MongoAPIError3) {\n  _inherits(MongoTransactionError, _MongoAPIError3);\n  var _super9 = _createSuper(MongoTransactionError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoTransactionError(message) {\n    _classCallCheck(this, MongoTransactionError);\n    return _super9.call(this, message);\n  }\n  _createClass(MongoTransactionError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoTransactionError';\n    }\n  }]);\n  return MongoTransactionError;\n}(MongoAPIError);\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nvar MongoExpiredSessionError = /*#__PURE__*/function (_MongoAPIError4) {\n  _inherits(MongoExpiredSessionError, _MongoAPIError4);\n  var _super10 = _createSuper(MongoExpiredSessionError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoExpiredSessionError() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cannot use a session that has ended';\n    _classCallCheck(this, MongoExpiredSessionError);\n    return _super10.call(this, message);\n  }\n  _createClass(MongoExpiredSessionError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoExpiredSessionError';\n    }\n  }]);\n  return MongoExpiredSessionError;\n}(MongoAPIError);\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nvar MongoKerberosError = /*#__PURE__*/function (_MongoRuntimeError2) {\n  _inherits(MongoKerberosError, _MongoRuntimeError2);\n  var _super11 = _createSuper(MongoKerberosError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoKerberosError(message) {\n    _classCallCheck(this, MongoKerberosError);\n    return _super11.call(this, message);\n  }\n  _createClass(MongoKerberosError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoKerberosError';\n    }\n  }]);\n  return MongoKerberosError;\n}(MongoRuntimeError);\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nvar MongoAWSError = /*#__PURE__*/function (_MongoRuntimeError3) {\n  _inherits(MongoAWSError, _MongoRuntimeError3);\n  var _super12 = _createSuper(MongoAWSError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoAWSError(message) {\n    _classCallCheck(this, MongoAWSError);\n    return _super12.call(this, message);\n  }\n  _createClass(MongoAWSError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoAWSError';\n    }\n  }]);\n  return MongoAWSError;\n}(MongoRuntimeError);\nexports.MongoAWSError = MongoAWSError;\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */\nvar MongoAzureError = /*#__PURE__*/function (_MongoRuntimeError4) {\n  _inherits(MongoAzureError, _MongoRuntimeError4);\n  var _super13 = _createSuper(MongoAzureError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoAzureError(message) {\n    _classCallCheck(this, MongoAzureError);\n    return _super13.call(this, message);\n  }\n  _createClass(MongoAzureError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoAzureError';\n    }\n  }]);\n  return MongoAzureError;\n}(MongoRuntimeError);\nexports.MongoAzureError = MongoAzureError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nvar MongoChangeStreamError = /*#__PURE__*/function (_MongoRuntimeError5) {\n  _inherits(MongoChangeStreamError, _MongoRuntimeError5);\n  var _super14 = _createSuper(MongoChangeStreamError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoChangeStreamError(message) {\n    _classCallCheck(this, MongoChangeStreamError);\n    return _super14.call(this, message);\n  }\n  _createClass(MongoChangeStreamError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoChangeStreamError';\n    }\n  }]);\n  return MongoChangeStreamError;\n}(MongoRuntimeError);\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nvar MongoTailableCursorError = /*#__PURE__*/function (_MongoAPIError5) {\n  _inherits(MongoTailableCursorError, _MongoAPIError5);\n  var _super15 = _createSuper(MongoTailableCursorError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoTailableCursorError() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Tailable cursor does not support this operation';\n    _classCallCheck(this, MongoTailableCursorError);\n    return _super15.call(this, message);\n  }\n  _createClass(MongoTailableCursorError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoTailableCursorError';\n    }\n  }]);\n  return MongoTailableCursorError;\n}(MongoAPIError);\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nvar MongoGridFSStreamError = /*#__PURE__*/function (_MongoRuntimeError6) {\n  _inherits(MongoGridFSStreamError, _MongoRuntimeError6);\n  var _super16 = _createSuper(MongoGridFSStreamError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoGridFSStreamError(message) {\n    _classCallCheck(this, MongoGridFSStreamError);\n    return _super16.call(this, message);\n  }\n  _createClass(MongoGridFSStreamError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoGridFSStreamError';\n    }\n  }]);\n  return MongoGridFSStreamError;\n}(MongoRuntimeError);\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nvar MongoGridFSChunkError = /*#__PURE__*/function (_MongoRuntimeError7) {\n  _inherits(MongoGridFSChunkError, _MongoRuntimeError7);\n  var _super17 = _createSuper(MongoGridFSChunkError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoGridFSChunkError(message) {\n    _classCallCheck(this, MongoGridFSChunkError);\n    return _super17.call(this, message);\n  }\n  _createClass(MongoGridFSChunkError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoGridFSChunkError';\n    }\n  }]);\n  return MongoGridFSChunkError;\n}(MongoRuntimeError);\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nvar MongoUnexpectedServerResponseError = /*#__PURE__*/function (_MongoRuntimeError8) {\n  _inherits(MongoUnexpectedServerResponseError, _MongoRuntimeError8);\n  var _super18 = _createSuper(MongoUnexpectedServerResponseError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoUnexpectedServerResponseError(message) {\n    _classCallCheck(this, MongoUnexpectedServerResponseError);\n    return _super18.call(this, message);\n  }\n  _createClass(MongoUnexpectedServerResponseError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoUnexpectedServerResponseError';\n    }\n  }]);\n  return MongoUnexpectedServerResponseError;\n}(MongoRuntimeError);\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nvar MongoCursorInUseError = /*#__PURE__*/function (_MongoAPIError6) {\n  _inherits(MongoCursorInUseError, _MongoAPIError6);\n  var _super19 = _createSuper(MongoCursorInUseError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoCursorInUseError() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cursor is already initialized';\n    _classCallCheck(this, MongoCursorInUseError);\n    return _super19.call(this, message);\n  }\n  _createClass(MongoCursorInUseError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoCursorInUseError';\n    }\n  }]);\n  return MongoCursorInUseError;\n}(MongoAPIError);\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nvar MongoServerClosedError = /*#__PURE__*/function (_MongoAPIError7) {\n  _inherits(MongoServerClosedError, _MongoAPIError7);\n  var _super20 = _createSuper(MongoServerClosedError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoServerClosedError() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Server is closed';\n    _classCallCheck(this, MongoServerClosedError);\n    return _super20.call(this, message);\n  }\n  _createClass(MongoServerClosedError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoServerClosedError';\n    }\n  }]);\n  return MongoServerClosedError;\n}(MongoAPIError);\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nvar MongoCursorExhaustedError = /*#__PURE__*/function (_MongoAPIError8) {\n  _inherits(MongoCursorExhaustedError, _MongoAPIError8);\n  var _super21 = _createSuper(MongoCursorExhaustedError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoCursorExhaustedError(message) {\n    _classCallCheck(this, MongoCursorExhaustedError);\n    return _super21.call(this, message || 'Cursor is exhausted');\n  }\n  _createClass(MongoCursorExhaustedError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoCursorExhaustedError';\n    }\n  }]);\n  return MongoCursorExhaustedError;\n}(MongoAPIError);\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nvar MongoTopologyClosedError = /*#__PURE__*/function (_MongoAPIError9) {\n  _inherits(MongoTopologyClosedError, _MongoAPIError9);\n  var _super22 = _createSuper(MongoTopologyClosedError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoTopologyClosedError() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Topology is closed';\n    _classCallCheck(this, MongoTopologyClosedError);\n    return _super22.call(this, message);\n  }\n  _createClass(MongoTopologyClosedError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoTopologyClosedError';\n    }\n  }]);\n  return MongoTopologyClosedError;\n}(MongoAPIError);\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\nvar kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nvar MongoNetworkError = /*#__PURE__*/function (_MongoError3) {\n  _inherits(MongoNetworkError, _MongoError3);\n  var _super23 = _createSuper(MongoNetworkError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoNetworkError(message, options) {\n    var _this3;\n    _classCallCheck(this, MongoNetworkError);\n    _this3 = _super23.call(this, message, {\n      cause: options === null || options === void 0 ? void 0 : options.cause\n    });\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      _this3[kBeforeHandshake] = options.beforeHandshake;\n    }\n    return _this3;\n  }\n  _createClass(MongoNetworkError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoNetworkError';\n    }\n  }]);\n  return MongoNetworkError;\n}(MongoError);\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nvar MongoNetworkTimeoutError = /*#__PURE__*/function (_MongoNetworkError) {\n  _inherits(MongoNetworkTimeoutError, _MongoNetworkError);\n  var _super24 = _createSuper(MongoNetworkTimeoutError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoNetworkTimeoutError(message, options) {\n    _classCallCheck(this, MongoNetworkTimeoutError);\n    return _super24.call(this, message, options);\n  }\n  _createClass(MongoNetworkTimeoutError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoNetworkTimeoutError';\n    }\n  }]);\n  return MongoNetworkTimeoutError;\n}(MongoNetworkError);\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nvar MongoParseError = /*#__PURE__*/function (_MongoDriverError3) {\n  _inherits(MongoParseError, _MongoDriverError3);\n  var _super25 = _createSuper(MongoParseError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoParseError(message) {\n    _classCallCheck(this, MongoParseError);\n    return _super25.call(this, message);\n  }\n  _createClass(MongoParseError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoParseError';\n    }\n  }]);\n  return MongoParseError;\n}(MongoDriverError);\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nvar MongoInvalidArgumentError = /*#__PURE__*/function (_MongoAPIError10) {\n  _inherits(MongoInvalidArgumentError, _MongoAPIError10);\n  var _super26 = _createSuper(MongoInvalidArgumentError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoInvalidArgumentError(message) {\n    _classCallCheck(this, MongoInvalidArgumentError);\n    return _super26.call(this, message);\n  }\n  _createClass(MongoInvalidArgumentError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoInvalidArgumentError';\n    }\n  }]);\n  return MongoInvalidArgumentError;\n}(MongoAPIError);\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nvar MongoCompatibilityError = /*#__PURE__*/function (_MongoAPIError11) {\n  _inherits(MongoCompatibilityError, _MongoAPIError11);\n  var _super27 = _createSuper(MongoCompatibilityError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoCompatibilityError(message) {\n    _classCallCheck(this, MongoCompatibilityError);\n    return _super27.call(this, message);\n  }\n  _createClass(MongoCompatibilityError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoCompatibilityError';\n    }\n  }]);\n  return MongoCompatibilityError;\n}(MongoAPIError);\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nvar MongoMissingCredentialsError = /*#__PURE__*/function (_MongoAPIError12) {\n  _inherits(MongoMissingCredentialsError, _MongoAPIError12);\n  var _super28 = _createSuper(MongoMissingCredentialsError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoMissingCredentialsError(message) {\n    _classCallCheck(this, MongoMissingCredentialsError);\n    return _super28.call(this, message);\n  }\n  _createClass(MongoMissingCredentialsError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoMissingCredentialsError';\n    }\n  }]);\n  return MongoMissingCredentialsError;\n}(MongoAPIError);\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nvar MongoMissingDependencyError = /*#__PURE__*/function (_MongoAPIError13) {\n  _inherits(MongoMissingDependencyError, _MongoAPIError13);\n  var _super29 = _createSuper(MongoMissingDependencyError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoMissingDependencyError(message) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, MongoMissingDependencyError);\n    return _super29.call(this, message, options);\n  }\n  _createClass(MongoMissingDependencyError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoMissingDependencyError';\n    }\n  }]);\n  return MongoMissingDependencyError;\n}(MongoAPIError);\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nvar MongoSystemError = /*#__PURE__*/function (_MongoError4) {\n  _inherits(MongoSystemError, _MongoError4);\n  var _super30 = _createSuper(MongoSystemError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoSystemError(message, reason) {\n    var _reason$error;\n    var _this4;\n    _classCallCheck(this, MongoSystemError);\n    if (reason && reason.error) {\n      _this4 = _super30.call(this, MongoError.buildErrorMessage(reason.error.message || reason.error), {\n        cause: reason.error\n      });\n    } else {\n      _this4 = _super30.call(this, message);\n    }\n    if (reason) {\n      _this4.reason = reason;\n    }\n    _this4.code = (_reason$error = reason.error) === null || _reason$error === void 0 ? void 0 : _reason$error.code;\n    return _possibleConstructorReturn(_this4);\n  }\n  _createClass(MongoSystemError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoSystemError';\n    }\n  }]);\n  return MongoSystemError;\n}(MongoError);\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nvar MongoServerSelectionError = /*#__PURE__*/function (_MongoSystemError) {\n  _inherits(MongoServerSelectionError, _MongoSystemError);\n  var _super31 = _createSuper(MongoServerSelectionError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoServerSelectionError(message, reason) {\n    _classCallCheck(this, MongoServerSelectionError);\n    return _super31.call(this, message, reason);\n  }\n  _createClass(MongoServerSelectionError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoServerSelectionError';\n    }\n  }]);\n  return MongoServerSelectionError;\n}(MongoSystemError);\nexports.MongoServerSelectionError = MongoServerSelectionError;\nfunction makeWriteConcernResultObject(input) {\n  var output = Object.assign({}, input);\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nvar MongoWriteConcernError = /*#__PURE__*/function (_MongoServerError) {\n  _inherits(MongoWriteConcernError, _MongoServerError);\n  var _super32 = _createSuper(MongoWriteConcernError);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoWriteConcernError(message, result) {\n    var _this5;\n    _classCallCheck(this, MongoWriteConcernError);\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n    _this5 = _super32.call(this, message);\n    _this5.errInfo = message.errInfo;\n    if (result != null) {\n      _this5.result = makeWriteConcernResultObject(result);\n    }\n    return _this5;\n  }\n  _createClass(MongoWriteConcernError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoWriteConcernError';\n    }\n  }]);\n  return MongoWriteConcernError;\n}(MongoServerError);\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nvar RETRYABLE_READ_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary]);\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nvar RETRYABLE_WRITE_ERROR_CODES = new Set([].concat(_toConsumableArray(RETRYABLE_READ_ERROR_CODES), [exports.MONGODB_ERROR_CODES.ExceededTimeLimit]));\nfunction needsRetryableWriteLabel(error, maxWireVersion) {\n  // pre-4.4 server, then the driver adds an error label for every valid case\n  // execute operation will only inspect the label, code/message logic is handled here\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n  if (error instanceof MongoError) {\n    if ((maxWireVersion >= 9 || error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError)) && !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n      // If we already have the error label no need to add it again. 4.4+ servers add the label.\n      // In the case where we have a handshake error, need to fall down to the logic checking\n      // the codes.\n      return false;\n    }\n  }\n  if (error instanceof MongoWriteConcernError) {\n    var _ref2, _error$result$code, _error$result;\n    return RETRYABLE_WRITE_ERROR_CODES.has((_ref2 = (_error$result$code = (_error$result = error.result) === null || _error$result === void 0 ? void 0 : _error$result.code) !== null && _error$result$code !== void 0 ? _error$result$code : error.code) !== null && _ref2 !== void 0 ? _ref2 : 0);\n  }\n  if (error instanceof MongoError && typeof error.code === 'number') {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n  }\n  var isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n  var isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n  return false;\n}\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\nfunction isRetryableWriteError(error) {\n  return error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError);\n}\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableReadError(error) {\n  var hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n  if (hasRetryableErrorCode) {\n    return true;\n  }\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n  var isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n  var isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n  return false;\n}\nexports.isRetryableReadError = isRetryableReadError;\nvar SDAM_RECOVERING_CODES = new Set([exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary]);\nvar SDAM_NOT_PRIMARY_CODES = new Set([exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.LegacyNotPrimary]);\nvar SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.ShutdownInProgress]);\nfunction isRecoveringError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n  return exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) || exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message);\n}\nfunction isNotWritablePrimaryError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOT_PRIMARY_CODES.has(err.code);\n  }\n  if (isRecoveringError(err)) {\n    return false;\n  }\n  return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n  return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nfunction isNetworkTimeoutError(err) {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\nfunction isResumableError(error, wireVersion) {\n  if (error == null || !(error instanceof MongoError)) {\n    return false;\n  }\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n      return true;\n    }\n    return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n  }\n  if (typeof error.code === 'number') {\n    return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n  return false;\n}\nexports.isResumableError = isResumableError;","map":{"version":3,"names":["kErrorLabels","Symbol","exports","LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE","RegExp","LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE","NODE_IS_RECOVERING_ERROR_MESSAGE","MONGODB_ERROR_CODES","Object","freeze","HostUnreachable","HostNotFound","NetworkTimeout","ShutdownInProgress","PrimarySteppedDown","ExceededTimeLimit","SocketException","NotWritablePrimary","InterruptedAtShutdown","InterruptedDueToReplStateChange","NotPrimaryNoSecondaryOk","NotPrimaryOrSecondary","StaleShardVersion","StaleEpoch","StaleConfig","RetryChangeStream","FailedToSatisfyReadPreference","CursorNotFound","LegacyNotPrimary","WriteConcernFailed","NamespaceNotFound","IllegalOperation","MaxTimeMSExpired","UnknownReplWriteConcern","UnsatisfiableWriteConcern","Reauthenticate","GET_MORE_RESUMABLE_CODES","Set","MongoErrorLabel","RetryableWriteError","TransientTransactionError","UnknownTransactionCommitResult","ResumableChangeStreamError","HandshakeError","ResetPool","InterruptInUseConnections","NoWritesPerformed","isAggregateError","e","Array","isArray","errors","MongoError","_Error","_inherits","_super","_createSuper","message","options","_this","_classCallCheck","call","_createClass","key","get","value","hasErrorLabel","label","has","addErrorLabel","add","from","buildErrorMessage","length","map","_ref","join","_wrapNativeSuper","Error","MongoServerError","_MongoError","_super2","_this2","errmsg","$err","errorLabels","name","MongoDriverError","_MongoError2","_super3","MongoAPIError","_MongoDriverError","_super4","MongoRuntimeError","_MongoDriverError2","_super5","MongoBatchReExecutionError","_MongoAPIError","_super6","arguments","undefined","MongoDecompressionError","_MongoRuntimeError","_super7","MongoNotConnectedError","_MongoAPIError2","_super8","MongoTransactionError","_MongoAPIError3","_super9","MongoExpiredSessionError","_MongoAPIError4","_super10","MongoKerberosError","_MongoRuntimeError2","_super11","MongoAWSError","_MongoRuntimeError3","_super12","MongoAzureError","_MongoRuntimeError4","_super13","MongoChangeStreamError","_MongoRuntimeError5","_super14","MongoTailableCursorError","_MongoAPIError5","_super15","MongoGridFSStreamError","_MongoRuntimeError6","_super16","MongoGridFSChunkError","_MongoRuntimeError7","_super17","MongoUnexpectedServerResponseError","_MongoRuntimeError8","_super18","MongoCursorInUseError","_MongoAPIError6","_super19","MongoServerClosedError","_MongoAPIError7","_super20","MongoCursorExhaustedError","_MongoAPIError8","_super21","MongoTopologyClosedError","_MongoAPIError9","_super22","kBeforeHandshake","isNetworkErrorBeforeHandshake","err","MongoNetworkError","_MongoError3","_super23","_this3","cause","beforeHandshake","MongoNetworkTimeoutError","_MongoNetworkError","_super24","MongoParseError","_MongoDriverError3","_super25","MongoInvalidArgumentError","_MongoAPIError10","_super26","MongoCompatibilityError","_MongoAPIError11","_super27","MongoMissingCredentialsError","_MongoAPIError12","_super28","MongoMissingDependencyError","_MongoAPIError13","_super29","MongoSystemError","_MongoError4","_super30","reason","_reason$error","_this4","error","code","_possibleConstructorReturn","MongoServerSelectionError","_MongoSystemError","_super31","makeWriteConcernResultObject","input","output","assign","ok","codeName","MongoWriteConcernError","_MongoServerError","_super32","result","_this5","errInfo","RETRYABLE_READ_ERROR_CODES","RETRYABLE_WRITE_ERROR_CODES","concat","_toConsumableArray","needsRetryableWriteLabel","maxWireVersion","_ref2","_error$result$code","_error$result","isNotWritablePrimaryError","test","isNodeIsRecoveringError","isRetryableWriteError","isRetryableReadError","hasRetryableErrorCode","SDAM_RECOVERING_CODES","SDAM_NOT_PRIMARY_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","isNodeShuttingDownError","isSDAMUnrecoverableError","isNetworkTimeoutError","match","isResumableError","wireVersion"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\error.ts"],"sourcesContent":["import type { Document } from './bson';\nimport type { TopologyVersion } from './sdam/server_description';\nimport type { TopologyDescription } from './sdam/topology_description';\n\n/** @public */\nexport type AnyError = MongoError | Error;\n\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp(\n  'not master or secondary',\n  'i'\n);\n\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n\n/** @internal MongoDB Error Codes */\nexport const MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotWritablePrimary: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotPrimaryNoSecondaryOk: 13435,\n  NotPrimaryOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100,\n  Reauthenticate: 391\n} as const);\n\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexport const GET_MORE_RESUMABLE_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.ExceededTimeLimit,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n  MONGODB_ERROR_CODES.StaleShardVersion,\n  MONGODB_ERROR_CODES.StaleEpoch,\n  MONGODB_ERROR_CODES.StaleConfig,\n  MONGODB_ERROR_CODES.RetryChangeStream,\n  MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n  MONGODB_ERROR_CODES.CursorNotFound\n]);\n\n/** @public */\nexport const MongoErrorLabel = Object.freeze({\n  RetryableWriteError: 'RetryableWriteError',\n  TransientTransactionError: 'TransientTransactionError',\n  UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n  ResumableChangeStreamError: 'ResumableChangeStreamError',\n  HandshakeError: 'HandshakeError',\n  ResetPool: 'ResetPool',\n  InterruptInUseConnections: 'InterruptInUseConnections',\n  NoWritesPerformed: 'NoWritesPerformed'\n} as const);\n\n/** @public */\nexport type MongoErrorLabel = (typeof MongoErrorLabel)[keyof typeof MongoErrorLabel];\n\n/** @public */\nexport interface ErrorDescription extends Document {\n  message?: string;\n  errmsg?: string;\n  $err?: string;\n  errorLabels?: string[];\n  errInfo?: Document;\n}\n\nfunction isAggregateError(e: Error): e is Error & { errors: Error[] } {\n  return 'errors' in e && Array.isArray(e.errors);\n}\n\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nexport class MongoError extends Error {\n  /** @internal */\n  [kErrorLabels]: Set<string>;\n  /**\n   * This is a number in MongoServerError and a string in MongoDriverError\n   * @privateRemarks\n   * Define the type override on the subclasses when we can use the override keyword\n   */\n  code?: number | string;\n  topologyVersion?: TopologyVersion;\n  connectionGeneration?: number;\n  override cause?: Error;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n    this[kErrorLabels] = new Set();\n  }\n\n  /** @internal */\n  static buildErrorMessage(e: Error | string): string {\n    if (typeof e === 'string') {\n      return e;\n    }\n    if (isAggregateError(e) && e.message.length === 0) {\n      return e.errors.length === 0\n        ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.'\n        : e.errors.map(({ message }) => message).join(', ');\n    }\n\n    return e.message;\n  }\n\n  override get name(): string {\n    return 'MongoError';\n  }\n\n  /** Legacy name for server error responses */\n  get errmsg(): string {\n    return this.message;\n  }\n\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n  hasErrorLabel(label: string): boolean {\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label: string): void {\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels(): string[] {\n    return Array.from(this[kErrorLabels]);\n  }\n}\n\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nexport class MongoServerError extends MongoError {\n  codeName?: string;\n  writeConcernError?: Document;\n  errInfo?: Document;\n  ok?: number;\n  [key: string]: any;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: ErrorDescription) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message')\n        this[name] = message[name];\n    }\n  }\n\n  override get name(): string {\n    return 'MongoServerError';\n  }\n}\n\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nexport class MongoDriverError extends MongoError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoDriverError';\n  }\n}\n\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\n\nexport class MongoAPIError extends MongoDriverError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoAPIError';\n  }\n}\n\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nexport class MongoRuntimeError extends MongoDriverError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoRuntimeError';\n  }\n}\n\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nexport class MongoBatchReExecutionError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'This batch has already been executed, create new batch to execute') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoBatchReExecutionError';\n  }\n}\n\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nexport class MongoDecompressionError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoDecompressionError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nexport class MongoNotConnectedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoNotConnectedError';\n  }\n}\n\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nexport class MongoTransactionError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTransactionError';\n  }\n}\n\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nexport class MongoExpiredSessionError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'Cannot use a session that has ended') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoExpiredSessionError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nexport class MongoKerberosError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoKerberosError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nexport class MongoAWSError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoAWSError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */\nexport class MongoAzureError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoAzureError';\n  }\n}\n\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoChangeStreamError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoChangeStreamError';\n  }\n}\n\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nexport class MongoTailableCursorError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'Tailable cursor does not support this operation') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTailableCursorError';\n  }\n}\n\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSStreamError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoGridFSStreamError';\n  }\n}\n\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSChunkError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoGridFSChunkError';\n  }\n}\n\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nexport class MongoUnexpectedServerResponseError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoUnexpectedServerResponseError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nexport class MongoCursorInUseError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'Cursor is already initialized') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoCursorInUseError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nexport class MongoServerClosedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'Server is closed') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoServerClosedError';\n  }\n}\n\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nexport class MongoCursorExhaustedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message?: string) {\n    super(message || 'Cursor is exhausted');\n  }\n\n  override get name(): string {\n    return 'MongoCursorExhaustedError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nexport class MongoTopologyClosedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'Topology is closed') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTopologyClosedError';\n  }\n}\n\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nexport function isNetworkErrorBeforeHandshake(err: MongoNetworkError): boolean {\n  return err[kBeforeHandshake] === true;\n}\n\n/** @public */\nexport interface MongoNetworkErrorOptions {\n  /** Indicates the timeout happened before a connection handshake completed */\n  beforeHandshake?: boolean;\n  cause?: Error;\n}\n\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nexport class MongoNetworkError extends MongoError {\n  /** @internal */\n  [kBeforeHandshake]?: boolean;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: MongoNetworkErrorOptions) {\n    super(message, { cause: options?.cause });\n\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n\n  override get name(): string {\n    return 'MongoNetworkError';\n  }\n}\n\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nexport class MongoNetworkTimeoutError extends MongoNetworkError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: MongoNetworkErrorOptions) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoNetworkTimeoutError';\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nexport class MongoParseError extends MongoDriverError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoParseError';\n  }\n}\n\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoInvalidArgumentError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoInvalidArgumentError';\n  }\n}\n\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nexport class MongoCompatibilityError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoCompatibilityError';\n  }\n}\n\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoMissingCredentialsError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoMissingCredentialsError';\n  }\n}\n\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nexport class MongoMissingDependencyError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options: { cause?: Error } = {}) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoMissingDependencyError';\n  }\n}\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nexport class MongoSystemError extends MongoError {\n  /** An optional reason context, such as an error saved during flow of monitoring and selecting servers */\n  reason?: TopologyDescription;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, reason: TopologyDescription) {\n    if (reason && reason.error) {\n      super(MongoError.buildErrorMessage(reason.error.message || reason.error), {\n        cause: reason.error\n      });\n    } else {\n      super(message);\n    }\n\n    if (reason) {\n      this.reason = reason;\n    }\n\n    this.code = reason.error?.code;\n  }\n\n  override get name(): string {\n    return 'MongoSystemError';\n  }\n}\n\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nexport class MongoServerSelectionError extends MongoSystemError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, reason: TopologyDescription) {\n    super(message, reason);\n  }\n\n  override get name(): string {\n    return 'MongoServerSelectionError';\n  }\n}\n\nfunction makeWriteConcernResultObject(input: any) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nexport class MongoWriteConcernError extends MongoServerError {\n  /** The result document (provided if ok: 1) */\n  result?: Document;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: ErrorDescription, result?: Document) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n\n    super(message);\n    this.errInfo = message.errInfo;\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n  override get name(): string {\n    return 'MongoWriteConcernError';\n  }\n}\n\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_WRITE_ERROR_CODES = new Set<number>([\n  ...RETRYABLE_READ_ERROR_CODES,\n  MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\n\nexport function needsRetryableWriteLabel(error: Error, maxWireVersion: number): boolean {\n  // pre-4.4 server, then the driver adds an error label for every valid case\n  // execute operation will only inspect the label, code/message logic is handled here\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (error instanceof MongoError) {\n    if (\n      (maxWireVersion >= 9 || error.hasErrorLabel(MongoErrorLabel.RetryableWriteError)) &&\n      !error.hasErrorLabel(MongoErrorLabel.HandshakeError)\n    ) {\n      // If we already have the error label no need to add it again. 4.4+ servers add the label.\n      // In the case where we have a handshake error, need to fall down to the logic checking\n      // the codes.\n      return false;\n    }\n  }\n\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n  }\n\n  if (error instanceof MongoError && typeof error.code === 'number') {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n  }\n\n  const isNotWritablePrimaryError = LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n\n  const isNodeIsRecoveringError = NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function isRetryableWriteError(error: MongoError): boolean {\n  return error.hasErrorLabel(MongoErrorLabel.RetryableWriteError);\n}\n\n/** Determines whether an error is something the driver should attempt to retry */\nexport function isRetryableReadError(error: MongoError): boolean {\n  const hasRetryableErrorCode =\n    typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n  if (hasRetryableErrorCode) {\n    return true;\n  }\n\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  const isNotWritablePrimaryError = LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n\n  const isNodeIsRecoveringError = NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n\n  return false;\n}\n\nconst SDAM_RECOVERING_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n\nconst SDAM_NOT_PRIMARY_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.ShutdownInProgress\n]);\n\nfunction isRecoveringError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n\n  return (\n    LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||\n    NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message)\n  );\n}\n\nfunction isNotWritablePrimaryError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOT_PRIMARY_CODES.has(err.code);\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\n\nexport function isNodeShuttingDownError(err: MongoError): boolean {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nexport function isSDAMUnrecoverableError(error: MongoError): boolean {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\n\nexport function isNetworkTimeoutError(err: MongoError): err is MongoNetworkError {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\n\nexport function isResumableError(error?: Error, wireVersion?: number): boolean {\n  if (error == null || !(error instanceof MongoError)) {\n    return false;\n  }\n\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error.code === MONGODB_ERROR_CODES.CursorNotFound) {\n      return true;\n    }\n    return error.hasErrorLabel(MongoErrorLabel.ResumableChangeStreamError);\n  }\n\n  if (typeof error.code === 'number') {\n    return GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n\n  return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}