{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/raphm/Documents/Projects/youtube-transcript/youtube-transcript/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\nvar bson_1 = require(\"../bson\");\nvar error_1 = require(\"../error\");\nvar count_1 = require(\"../operations/count\");\nvar execute_operation_1 = require(\"../operations/execute_operation\");\nvar find_1 = require(\"../operations/find\");\nvar sort_1 = require(\"../sort\");\nvar utils_1 = require(\"../utils\");\nvar abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nvar kFilter = Symbol('filter');\n/** @internal */\nvar kNumReturned = Symbol('numReturned');\n/** @internal */\nvar kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nvar FindCursor = /*#__PURE__*/function (_abstract_cursor_1$Ab) {\n  _inherits(FindCursor, _abstract_cursor_1$Ab);\n  var _super = _createSuper(FindCursor);\n  /** @internal */\n  function FindCursor(client, namespace) {\n    var _this;\n    var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, FindCursor);\n    _this = _super.call(this, client, namespace, options);\n    _this[kFilter] = filter;\n    _this[kBuiltOptions] = options;\n    if (options.sort != null) {\n      _this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n    }\n    return _this;\n  }\n  _createClass(FindCursor, [{\n    key: \"clone\",\n    value: function clone() {\n      var clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n      delete clonedOptions.session;\n      return new FindCursor(this.client, this.namespace, this[kFilter], _objectSpread({}, clonedOptions));\n    }\n  }, {\n    key: \"map\",\n    value: function map(transform) {\n      return _get(_getPrototypeOf(FindCursor.prototype), \"map\", this).call(this, transform);\n    }\n    /** @internal */\n  }, {\n    key: \"_initialize\",\n    value: function () {\n      var _initialize2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(session) {\n        var _response$cursor;\n        var findOperation, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], _objectSpread(_objectSpread(_objectSpread({}, this[kBuiltOptions]), this.cursorOptions), {}, {\n                session: session\n              }));\n              _context.next = 3;\n              return (0, execute_operation_1.executeOperation)(this.client, findOperation);\n            case 3:\n              response = _context.sent;\n              // the response is not a cursor when `explain` is enabled\n              this[kNumReturned] = (_response$cursor = response.cursor) === null || _response$cursor === void 0 || (_response$cursor = _response$cursor.firstBatch) === null || _response$cursor === void 0 ? void 0 : _response$cursor.length;\n              // TODO: NODE-2882\n              return _context.abrupt(\"return\", {\n                server: findOperation.server,\n                session: session,\n                response: response\n              });\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _initialize(_x) {\n        return _initialize2.apply(this, arguments);\n      }\n      return _initialize;\n    }() /** @internal */\n  }, {\n    key: \"getMore\",\n    value: function () {\n      var _getMore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(batchSize) {\n        var numReturned, limit, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              numReturned = this[kNumReturned];\n              if (!numReturned) {\n                _context2.next = 8;\n                break;\n              }\n              // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n              limit = this[kBuiltOptions].limit;\n              batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n              if (!(batchSize <= 0)) {\n                _context2.next = 8;\n                break;\n              }\n              _context2.next = 7;\n              return this.close().catch(function () {\n                return null;\n              });\n            case 7:\n              return _context2.abrupt(\"return\", {\n                cursor: {\n                  id: bson_1.Long.ZERO,\n                  nextBatch: []\n                }\n              });\n            case 8:\n              _context2.next = 10;\n              return _get(_getPrototypeOf(FindCursor.prototype), \"getMore\", this).call(this, batchSize);\n            case 10:\n              response = _context2.sent;\n              // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n              if (response) {\n                this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n              }\n              return _context2.abrupt(\"return\", response);\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getMore(_x2) {\n        return _getMore.apply(this, arguments);\n      }\n      return getMore;\n    }()\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n  }, {\n    key: \"count\",\n    value: function () {\n      var _count = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(options) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n              if (!(typeof options === 'boolean')) {\n                _context3.next = 3;\n                break;\n              }\n              throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n            case 3:\n              return _context3.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], _objectSpread(_objectSpread(_objectSpread({}, this[kBuiltOptions]), this.cursorOptions), options))));\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function count(_x3) {\n        return _count.apply(this, arguments);\n      }\n      return count;\n    }() /** Execute the explain for the cursor */\n  }, {\n    key: \"explain\",\n    value: function () {\n      var _explain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(verbosity) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], _objectSpread(_objectSpread(_objectSpread({}, this[kBuiltOptions]), this.cursorOptions), {}, {\n                explain: verbosity !== null && verbosity !== void 0 ? verbosity : true\n              }))));\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function explain(_x4) {\n        return _explain.apply(this, arguments);\n      }\n      return explain;\n    }() /** Set the cursor query */\n  }, {\n    key: \"filter\",\n    value: function filter(_filter) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kFilter] = _filter;\n      return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n  }, {\n    key: \"hint\",\n    value: function hint(_hint) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].hint = _hint;\n      return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n  }, {\n    key: \"min\",\n    value: function min(_min) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].min = _min;\n      return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n  }, {\n    key: \"max\",\n    value: function max(_max) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].max = _max;\n      return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n  }, {\n    key: \"returnKey\",\n    value: function returnKey(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].returnKey = value;\n      return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n  }, {\n    key: \"showRecordId\",\n    value: function showRecordId(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].showRecordId = value;\n      return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n  }, {\n    key: \"addQueryModifier\",\n    value: function addQueryModifier(name, value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (name[0] !== '$') {\n        throw new error_1.MongoInvalidArgumentError(\"\".concat(name, \" is not a valid query modifier\"));\n      }\n      // Strip of the $\n      var field = name.substr(1);\n      // NOTE: consider some TS magic for this\n      switch (field) {\n        case 'comment':\n          this[kBuiltOptions].comment = value;\n          break;\n        case 'explain':\n          this[kBuiltOptions].explain = value;\n          break;\n        case 'hint':\n          this[kBuiltOptions].hint = value;\n          break;\n        case 'max':\n          this[kBuiltOptions].max = value;\n          break;\n        case 'maxTimeMS':\n          this[kBuiltOptions].maxTimeMS = value;\n          break;\n        case 'min':\n          this[kBuiltOptions].min = value;\n          break;\n        case 'orderby':\n          this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n          break;\n        case 'query':\n          this[kFilter] = value;\n          break;\n        case 'returnKey':\n          this[kBuiltOptions].returnKey = value;\n          break;\n        case 'showDiskLoc':\n          this[kBuiltOptions].showRecordId = value;\n          break;\n        default:\n          throw new error_1.MongoInvalidArgumentError(\"Invalid query modifier: \".concat(name));\n      }\n      return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n  }, {\n    key: \"comment\",\n    value: function comment(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].comment = value;\n      return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n  }, {\n    key: \"maxAwaitTimeMS\",\n    value: function maxAwaitTimeMS(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n      }\n      this[kBuiltOptions].maxAwaitTimeMS = value;\n      return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n  }, {\n    key: \"maxTimeMS\",\n    value: function maxTimeMS(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n      }\n      this[kBuiltOptions].maxTimeMS = value;\n      return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n  }, {\n    key: \"project\",\n    value: function project(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].projection = value;\n      return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n  }, {\n    key: \"sort\",\n    value: function sort(_sort, direction) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n      }\n      this[kBuiltOptions].sort = (0, sort_1.formatSort)(_sort, direction);\n      return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n  }, {\n    key: \"allowDiskUse\",\n    value: function allowDiskUse() {\n      var allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (!this[kBuiltOptions].sort) {\n        throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n      }\n      // As of 6.0 the default is true. This allows users to get back to the old behavior.\n      if (!allow) {\n        this[kBuiltOptions].allowDiskUse = false;\n        return this;\n      }\n      this[kBuiltOptions].allowDiskUse = true;\n      return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n  }, {\n    key: \"collation\",\n    value: function collation(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].collation = value;\n      return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n  }, {\n    key: \"limit\",\n    value: function limit(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n      }\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n      }\n      this[kBuiltOptions].limit = value;\n      return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n  }, {\n    key: \"skip\",\n    value: function skip(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n      }\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n      }\n      this[kBuiltOptions].skip = value;\n      return this;\n    }\n  }]);\n  return FindCursor;\n}(abstract_cursor_1.AbstractCursor);\nexports.FindCursor = FindCursor;","map":{"version":3,"names":["bson_1","require","error_1","count_1","execute_operation_1","find_1","sort_1","utils_1","abstract_cursor_1","kFilter","Symbol","kNumReturned","kBuiltOptions","exports","FLAGS","FindCursor","_abstract_cursor_1$Ab","_inherits","_super","_createSuper","client","namespace","_this","filter","arguments","length","undefined","options","_classCallCheck","call","sort","formatSort","_createClass","key","value","clone","clonedOptions","mergeOptions","session","_objectSpread","map","transform","_get","_getPrototypeOf","prototype","_initialize2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_response$cursor","findOperation","response","wrap","_callee$","_context","prev","next","FindOperation","cursorOptions","executeOperation","sent","cursor","firstBatch","abrupt","server","stop","_initialize","_x","apply","_getMore","_callee2","batchSize","numReturned","limit","_callee2$","_context2","close","catch","id","Long","ZERO","nextBatch","getMore","_x2","_count","_callee3","_callee3$","_context3","emitWarningOnce","MongoInvalidArgumentError","CountOperation","count","_x3","_explain","_callee4","verbosity","_callee4$","_context4","explain","_x4","assertUninitialized","hint","min","max","returnKey","showRecordId","addQueryModifier","name","concat","field","substr","comment","maxTimeMS","maxAwaitTimeMS","project","projection","direction","tailable","MongoTailableCursorError","allowDiskUse","allow","collation","skip","AbstractCursor"],"sources":["C:\\Users\\raphm\\Documents\\Projects\\youtube-transcript\\youtube-transcript\\node_modules\\mongodb\\src\\cursor\\find_cursor.ts"],"sourcesContent":["import { type Document, Long } from '../bson';\nimport { MongoInvalidArgumentError, MongoTailableCursorError } from '../error';\nimport { type ExplainVerbosityLike } from '../explain';\nimport type { MongoClient } from '../mongo_client';\nimport type { CollationOptions } from '../operations/command';\nimport { CountOperation, type CountOptions } from '../operations/count';\nimport { executeOperation, type ExecutionResult } from '../operations/execute_operation';\nimport { FindOperation, type FindOptions } from '../operations/find';\nimport type { Hint } from '../operations/operation';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, type Sort, type SortDirection } from '../sort';\nimport { emitWarningOnce, mergeOptions, type MongoDBNamespace } from '../utils';\nimport { AbstractCursor, assertUninitialized } from './abstract_cursor';\n\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n\n/** @public Flags allowed for cursor */\nexport const FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public */\nexport class FindCursor<TSchema = any> extends AbstractCursor<TSchema> {\n  /** @internal */\n  [kFilter]: Document;\n  /** @internal */\n  [kNumReturned]?: number;\n  /** @internal */\n  [kBuiltOptions]: FindOptions;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    filter: Document = {},\n    options: FindOptions = {}\n  ) {\n    super(client, namespace, options);\n\n    this[kFilter] = filter;\n    this[kBuiltOptions] = options;\n\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = formatSort(options.sort);\n    }\n  }\n\n  clone(): FindCursor<TSchema> {\n    const clonedOptions = mergeOptions({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], {\n      ...clonedOptions\n    });\n  }\n\n  override map<T>(transform: (doc: TSchema) => T): FindCursor<T> {\n    return super.map(transform) as FindCursor<T>;\n  }\n\n  /** @internal */\n  async _initialize(session: ClientSession): Promise<ExecutionResult> {\n    const findOperation = new FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n      ...this.cursorOptions,\n      session\n    });\n\n    const response = await executeOperation(this.client, findOperation);\n\n    // the response is not a cursor when `explain` is enabled\n    this[kNumReturned] = response.cursor?.firstBatch?.length;\n\n    // TODO: NODE-2882\n    return { server: findOperation.server, session, response };\n  }\n\n  /** @internal */\n  override async getMore(batchSize: number): Promise<Document | null> {\n    const numReturned = this[kNumReturned];\n    if (numReturned) {\n      // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n      const limit = this[kBuiltOptions].limit;\n      batchSize =\n        limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        // this is an optimization for the special case of a limit for a find command to avoid an\n        // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n        // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n        // produces results for the find command.  Once a batch is filled up, it is returned and only\n        // on the subsequent getMore will the query framework consider the limit, determine the cursor\n        // is exhausted and return a cursorId of zero.\n        // instead, if we determine there are no more documents to request from the server, we preemptively\n        // close the cursor\n        await this.close().catch(() => null);\n        return { cursor: { id: Long.ZERO, nextBatch: [] } };\n      }\n    }\n\n    const response = await super.getMore(batchSize);\n    // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n    if (response) {\n      this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n    }\n\n    return response;\n  }\n\n  /**\n   * Get the count of documents for this cursor\n   * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n   */\n  async count(options?: CountOptions): Promise<number> {\n    emitWarningOnce(\n      'cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead '\n    );\n    if (typeof options === 'boolean') {\n      throw new MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n    return executeOperation(\n      this.client,\n      new CountOperation(this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        ...options\n      })\n    );\n  }\n\n  /** Execute the explain for the cursor */\n  async explain(verbosity?: ExplainVerbosityLike): Promise<Document> {\n    return executeOperation(\n      this.client,\n      new FindOperation(undefined, this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        explain: verbosity ?? true\n      })\n    );\n  }\n\n  /** Set the cursor query */\n  filter(filter: Document): this {\n    assertUninitialized(this);\n    this[kFilter] = filter;\n    return this;\n  }\n\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n  hint(hint: Hint): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n  min(min: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n  max(max: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n  returnKey(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n  showRecordId(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n  addQueryModifier(name: string, value: string | boolean | number | Document): this {\n    assertUninitialized(this);\n    if (name[0] !== '$') {\n      throw new MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    }\n\n    // Strip of the $\n    const field = name.substr(1);\n\n    // NOTE: consider some TS magic for this\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value as string | Document;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value as boolean;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value as string | Document;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value as Document;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value as number;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value as Document;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = formatSort(value as string | Document);\n        break;\n\n      case 'query':\n        this[kFilter] = value as Document;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value as boolean;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value as boolean;\n        break;\n\n      default:\n        throw new MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n  comment(value: string): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n  maxAwaitTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  override maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project<T extends Document = Document>(value: Document): FindCursor<T> {\n    assertUninitialized(this);\n    this[kBuiltOptions].projection = value;\n    return this as unknown as FindCursor<T>;\n  }\n\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n  sort(sort: Sort | string, direction?: SortDirection): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = formatSort(sort, direction);\n    return this;\n  }\n\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n  allowDiskUse(allow = true): this {\n    assertUninitialized(this);\n\n    if (!this[kBuiltOptions].sort) {\n      throw new MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    }\n\n    // As of 6.0 the default is true. This allows users to get back to the old behavior.\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n  collation(value: CollationOptions): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n  limit(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n  skip(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}